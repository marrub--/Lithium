// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_BossBrainExplosion : Actor {
   default {
      +NOGRAVITY
   }
   override void markPrecacheSounds() {
      super.markPrecacheSounds();
      markSound("weapons/rocklx");
   }
   states {
   Spawn:
      TNT1 A 0;
      TNT1 A 0 A_StartSound("weapons/rocklx", lch_body);
      MEXP AB 2 bright;
      MEXP CD 3 bright;
      MEXP EF 4 bright;
      TNT1 A 3;
      TNT1 A 0 A_SpawnItemEx("Lith_BossBrainExplosion", frandom(-8,8));
      stop;
   }
}

class Lith_BossDamageEffect : Actor {
   default {
      RenderStyle "Add";

      +NOTIMEFREEZE
      +NOINTERACTION
      +BRIGHT
   }
   override void tick() {
      scale *= 0.95;
      a_fadeOut(0.01);
   }
   states
   {
   Spawn:
      BLLT Q -1;
      stop;
   }
}

class Lith_BossDamage : Actor {
   default {
      RenderStyle "Add";
      Scale 4;
      Radius 4;
      Height 4;
      Speed 24;

      Projectile;
      +SEEKERMISSILE
      +BRIGHT
      +THRUACTORS
   }

   action void Lith_A_SpawnEffect(bool dorandom) {
      let fx = Spawn("Lith_BossDamageEffect", pos);
      fx.scale = scale;
      if(dorandom)
         fx.vel = (frandom(-2,2), frandom(-2,2), frandom(-2,2));
   }

   states {
   Spawn:
      BLLT Q 0;
      BLLT Q 0 ThrustThingZ(0, 4, 0, 0);
   SpawnLoop:
      BLLT Q 0 Lith_A_SpawnEffect(false);
      BLLT Q 1 A_SeekerMissile(90, 90, SMF_PRECISE);
      loop;
   Death:
      TNT1 A 0 A_DamageTracer(damage);
      TNT1 AAAAAAAAAAAA 0 Lith_A_SpawnEffect(true);
      stop;
   }
}

class Lith_ATField : Actor {
   default {
      RenderStyle "ColorAdd";
      XScale 2;
      YScale 10;
      VSpeed 2;
      Alpha 0.1;

      +NOTIMEFREEZE
      +NOINTERACTION
      +OLDRADIUSDMG
   }

   states
   {
   Spawn:
      #EBA B 1;
   SpawnLoop:
      #EBA B 0;
      #EBA B 1 A_FadeOut(frandom(0.06, 0.08));
      loop;
   }
}

class Lith_ATFieldCrash : Lith_ATField {
   states {
   Spawn:
      #EBA B 1;
      #EBA B 1 A_FadeOut(frandom(0.01, 0.02));
      wait;
   }
}

class Lith_SpawnFire : SpawnFire {
   default {
      SeeSound "vile/firecrkl";
   }
}

class Lith_SpawnShot : SpawnShot replaces SpawnShot {
   default {
      Speed 20;
   }

   states {
   Spawn:
      BOSF A 3 bright A_SpawnSound;
      BOSF BBBCCCDDD 1 bright A_SpawnFly("Lith_SpawnFire");
      loop;
   }
}

class Lith_BossEye : BossEye replaces BossEye {
   default {
      DropItem "DoomImp",       0, 50;
      DropItem "Demon",         0, 40;
      DropItem "Cacodemon",     0, 30;
      DropItem "Fatso",         0, 30;
      DropItem "Spectre",       0, 30;
      DropItem "HellKnight",    0, 24;
      DropItem "Arachnotron",   0, 20;
      DropItem "Revenant",      0, 10;
      DropItem "BaronOfHell",   0, 9;
      DropItem "PainElemental", 0, 4;
      DropItem "Archvile",      0, 2;
   }

   Lith_BossBrain m_bossBrain;
   int m_lastBreath;

   override void tick() {
      if(!isFrozen() && m_bossBrain) {
         /* code is cursed. do not attempt to refactor. */
         for(int i = 0; i < 40; i++) {
            int t  = i * 9;
            let mp = (cos(t) * 400, sin(t) * 400, 0);
            if(m_bossBrain.m_shield > 0) {
               let mo = Spawn("Lith_ATField", pos + mp);
               mo.alpha *= 0.5 + m_bossBrain.m_shield / double(m_bossBrain.m_shieldMax);
            } else if(m_bossBrain.m_shieldCrash) {
               let mo = Spawn("Lith_ATFieldCrash", pos + mp);
               if(m_bossBrain.m_shieldCrash < 4) {
                  mo.vel = (frandom(-44, 44), frandom(-44, 44), frandom(-44, 44));
               } else {
                  mo.vel = (cos(-t) * 44, sin(-t) * 44, 0);
               }
            } else {
               break;
            }
         }
      }

      super.tick();
   }

   action(Actor) void Lith_A_BrainSpit() {
      if(__lith_fun & lfun_tainted) {
         m_lastBreath++;
         if(m_lastBreath < 1) {
            A_SetTics(35);
            return;
         }
         A_SetTics(40 / m_lastBreath);
         if(m_lastBreath > 6) {
            m_lastBreath = -15;
         }
      }
      A_BrainSpit();
   }

   states(Actor)
   {
   Spawn:
      TNT1 A 0;
      TNT1 A 1 A_Look;
      wait;
   See:
      TNT1 A 180 A_BrainAwake;
      TNT1 A 120 Lith_A_BrainSpit;
      wait;
   }
}

class Lith_BossBrain : BossBrain replaces BossBrain;

default {
   Health 700;
   Mass int.Max;
   PainChance 256;

   +NOICEDEATH
   +OLDRADIUSDMG
   +SHOOTABLE
   +SOLID
}

int m_shield;
int m_oldShield;
int m_shieldRegenTicks;
int m_shieldCrash;
int m_shieldMax;

bool m_bossEye;
int m_boom;

override void markPrecacheSounds() {
   super.markPrecacheSounds();
   markSound("enemies/ios/crack");
   markSound("enemies/ios/crash");
   markSound("brain/pain");
   markSound("brain/death");
}
override void postBeginPlay() {
   super.postBeginPlay();

   Lith_BossEye th;
   for(let it = ThinkerIterator.create("Lith_BossEye"); (th = Lith_BossEye(it.next()));) {
      th.m_bossBrain = self;
      m_bossEye = true;
   }

   m_shieldMax = 50;
   if(__lith_fun & lfun_tainted) {
      health *= 4;
      m_shieldMax *= 2;
   }
   m_shieldRegenTicks = 0;
   m_shield = m_shieldMax;
   m_oldShield = m_shieldMax;
}

override void tick() {
   if(!isFrozen()) {
      if(m_shield < m_oldShield) {
         int secs;
         if(m_shield <= 0) secs = 24;
         else              secs = 40;
         m_shieldRegenTicks = 35 * secs;
      }

      if(m_shieldRegenTicks == 0) {
         m_shield += 20;
         m_shield  = min(m_shield, m_shieldMax);
      } else {
         m_shieldRegenTicks--;
      }

      if(m_shieldCrash) m_shieldCrash--;

      m_oldShield = m_shield;
   }

   super.tick();
}

override int damageMobj(Actor inflictor, Actor source, int damage, name mod, int flags, double angle) {
   if(source is "Lith_BossDamage") {
      if(m_shield > 0) {
         A_StartSound("enemies/ios/crack", lch_body2, attenuation: 0.2);
         m_shield -= damage;
         if(m_shield <= 0) {
            A_StartSound("enemies/ios/crash", lch_body2, attenuation: 0.2);
            m_shieldCrash = 75;
         }
      }
      return 0;
   } else if((m_bossEye && (!source || !source.player || m_shield <= 0)) ||
      !m_bossEye || damage >= TELEFRAG_DAMAGE) {
      return super.damageMobj(inflictor, source, damage, mod, flags, angle);
   } else {
      return 0;
   }
}

states
{
Spawn:
   BBRN A -1;
   stop;
Pain:
   TNT1 A 0 A_Quake(1, 36, 0, 4096, "");
   BBRN B 1 A_StartSound("brain/pain", lch_voice, attenuation: 0.1);
   goto Spawn;
Death:
   TNT1 A 0 {
      A_Quake(9, 120, 0, 4096, "");
      A_StartSound("brain/death", lch_voice, attenuation: 0.1);
      m_boom = 32;
   }
DeathLoop:
   BBRN A 0 A_JumpIf(m_boom-- == 0, "Done");
   BBRN AA 0 A_SpawnItemEx("Lith_BossBrainExplosion", frandom(-256,256),-320,frandom(0,510) - pos.z, flags: SXF_NOCHECKPOSITION|SXF_ABSOLUTEPOSITION);
   BBRN A 1;
   loop;
Done:
   BBRN A 98;
   BBRN A -1 A_BrainDie;
   stop;
}

/* EOF */
