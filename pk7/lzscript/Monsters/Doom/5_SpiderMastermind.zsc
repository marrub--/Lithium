// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_SpiderMastermindBulletTrail : Lith_MonsterBulletTrail {
   default {
      Scale 0.6;
   }

   override void tick() {
      if(!isFrozen()) {
         a_fadeOut(0.05);
      }
   }
}

class Lith_SpiderMastermindBullet : FastProjectile
{
   default
   {
      Alpha       0.9;
      Damage      0;
      Height      2;
      MissileType "Lith_SpiderMastermindBulletTrail";
      Radius      1;
      RenderStyle "Translucent";
      Speed       256;
      Species     "Lith_SpiderMastermind";

      +BLOODSPLATTER
      +MTHRUSPECIES
   }

   states
   {
   Spawn:
      TNT1 A 1;
      wait;
   }
}

class Lith_XH_SpiderMastermind : Lith_SpiderMastermind
{
   default
   {
      +MISSILEEVENMORE
   }
}

class Lith_SpiderMastermind : Lith_Monster replaces SpiderMastermind;

default
{
   Health           4000;
   Height           100;
   Mass             9000;
   MinMissileChance 120;
   Radius           128;
   Speed            16;
   Species          "Lith_SpiderMastermind";

   ActiveSound "spider/active";
   DeathSound  "spider/death";
   PainSound   "spider/pain";
   SeeSound    "spider/sight";

   Obituary "$OB_SPIDER";
   Tag      "$LITH_INFO_SHORT_SpiderMastermind";

   +E3M8Boss
   +E4M8Boss
   +Boss
   +BossDeath
   +DontMorph
   +FloorClip
   +MissileMore
   +NoRadiusDmg
}

override class<Actor> GetBloodType(int type)
{
   if(type == 0)
      if(Random(0, 255) < 200) return GetReplacement("BulletPuff");
      else                     return GetReplacement("Blood");
   else
      return Super.GetBloodType(type);
}

override void markPrecacheSounds() {
   super.markPrecacheSounds();
   markSound("spider/walk");
   markSound("enemies/spiderdemon/fire");
   markSound("enemies/spiderdemon/ready");
}
void Lith_A_Metal()
{
   A_StartSound("spider/walk", lch_body, attenuation: ATTN_IDLE);
   A_StopSound(lch_weapon);
   A_Chase(flags: CHF_DONTMOVE);
   A_Stop();
}

state Lith_A_SpiderMastermindShoot(int spreadx, int spready)
{
   double x = FRandom(-5 * spreadx, 5 * spready);
   double y = FRandom(-3 * spreadx, 3 * spready);

   A_CustomBulletAttack(x, y, 1, 3 * Random(1, 5), flags: CBAF_NORANDOM|CBAF_EXPLICITANGLE, missile: "Lith_SpiderMastermindBullet", spawnheight: 45, spawnofs_xy: 10);

   if(Random(0, 500) == 0)
   {
      vel.z += 10;
      Thrust(16, angle + randompick(90, -90));
      return ResolveState("Jump");
   }
   else
      return null;
}

void Lith_A_SpiderMastermindExplode()
{
   A_StartSound("explosion", lch_body, attenuation: 0.1);

   for(int i = 0; i < 10; i++)
      A_SpawnItemEx("Lith_CannonExplosionParticle", 0,0,8, FRandom(-8,8),FRandom(-8,8),FRandom(8,14));
}

states
{
Spawn:
   SPID AB 10 A_Look;
   loop;

See:
   SPID A 7 Lith_A_Metal;
   SPID BBCC 3 A_Chase;
   SPID D 7 Lith_A_Metal;
   SPID EEFF 3 A_Chase;
   loop;

Missile:
   SPID A 2 bright;
   SPID A 0 A_StartSound("enemies/spiderdemon/ready", lch_weapon2, CHANF_NOPAUSE, attenuation: 0.3);
   SPID A 20 bright A_FaceTarget;
   SPID A 0 A_StartSound("enemies/spiderdemon/fire", lch_weapon, CHANF_LOOP, attenuation: 0.4);
MissileLoop:
   SPID G 0 bright Lith_A_SpiderMastermindShoot(3, 3);
   SPID G 1 bright;
   SPID H 0 bright Lith_A_SpiderMastermindShoot(1, 1);
   SPID H 1 bright A_MonsterRefire(40, "See");
   loop;
Jump:
   SPID I 10 A_StopSound(lch_weapon);
   goto Missile;

Death:
   SPID J -1;
Crash:
   SPID J 0 A_StopSound(lch_weapon);
   SPID J 20 Lith_A_Die;
   SPID KLMNOPQR 10 Lith_A_SpiderMastermindExplode;
   SPID S 30;
   SPID S -1 A_BossDeath;
   stop;
}

/* EOF */
