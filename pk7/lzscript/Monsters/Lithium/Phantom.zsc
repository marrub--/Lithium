// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_PhantomAuraFX : Actor {
   default {
      Alpha       0.8;
      RenderStyle "Subtract";
      Scale       0.1;

      +BRIGHT
      +NOINTERACTION
   }

   states {
   Spawn:
      #EDE A 1 A_FadeOut(0.01);
      wait;
   }
}

class Lith_BasicPhantom : Lith_Phantom {
   override void Lith_PostInit() {}
   override void Lith_OnDeath () {}

   override void Tick() {
      if(Level.TotalTime % 10 == 0)
         Lith_EmitAura();

      if(!isFrozen() && m_MeleeTime)
         m_MeleeTime--;

      Super.Tick();
   }
}

class Lith_Phantom : Lith_Monster;

default {
   Height       56;
   Mass         1000;
   Radius       20;
   RenderStyle  "Stencil";
   Species      "Lith_Phantom";
   Speed        3;
   StencilColor "Black";

   +Boss
   +DontHarmSpecies
   +DontMorph
   +MissileMore
   +NeverTarget
   +NoPain
   +NoTarget
   +NoFear
   +ThruSpecies
}

int m_Phase;
int m_MeleeTime;

int m_Step;

override void markPrecacheSounds() {
   super.markPrecacheSounds();
   markSound("enemies/phantom/aura");
}

virtual void Lith_PostInit() {
   CallACS("Lith_PhantomSound");
   A_StartSound("enemies/phantom/aura", lch_body2, CHANF_LOOP, 0.7, 0.7);
}

virtual void Lith_OnDeath() {
   CallACS("Lith_PhantomDeath");
}

void Lith_EmitAura() {
   for(int i = 0; i < 8; i++)
      A_SpawnItemEx("Lith_PhantomAuraFX", frandom(-20,20),frandom(-20,20),frandom(0,32), 0,0,frandom(0.4,1.8), 0, 0, 128);
}

override void Tick() {
   if(!isFrozen() && health > 0) {
      if(target && target.player && !CheckIfTargetInLOS())
         target = null;

      if(!target) {
         for(let it = BlockThingsIterator.Create(self, 1024); it.next();) {
            let mo = it.thing;
            if(mo && (mo.bISMONSTER && mo.bCOUNTKILL || mo.player) &&
               !(mo is "Lith_Phantom") && checkSight(mo))
            {
               target = it.thing;
               SetState(ResolveState("See"));
               break;
            }
         }
      }

      if(Level.TotalTime % 5 == 0)
         Lith_EmitAura();

      if(m_MeleeTime)
         m_MeleeTime--;
   }

   Super.Tick();
}

override void PostBeginPlay()
{
   Super.PostBeginPlay();
   m_Step = 1;
   Lith_PostInit();
}

override void Die(Actor source, Actor inflictor, int dmgflags)
{
   A_NoBlocking();
   Lith_OnDeath();
   Super.Die(source, inflictor, dmgflags);
}

states
{
Spawn:
   PLAY A 0;
   PLAY A 0 A_JumpIf(m_Step == 0, "Spawn2");
   PLAY B 0 A_JumpIf(m_Step == 1, "Spawn2");
   PLAY C 0 A_JumpIf(m_Step == 2, "Spawn2");
   PLAY D 0 {m_Step = 0;}
Spawn2:
   PLAY #### 1 {A_Look(); A_Wander();}
   PLAY # 0 {m_Step++;}
   PLAY # 0 ResolveState("Spawn");
   stop;
GetOutOfDodge:
   #### # 0 Lith_A_Die;
   #### # 1 A_FadeOut(0.05);
   wait;
Death:
   PLAY H 10 Lith_A_Die;
   PLAY I 60;
   TNT1 A 70;
   stop;
}

/* EOF */
