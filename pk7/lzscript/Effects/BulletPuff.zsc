// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │               By Marrub / Alison.  Ryan Cordell and Xaser.               │
// │             Attribution is encouraged, though not required.              │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_PuffSmoke : Actor {
   default {
      Radius 1;
      Height 1;
      RenderStyle "Add";
      Alpha 0.3;
      Scale 0.4;
      +NoInteraction
      +FloorClip
      +ForceXyBillboard
      +DontSplash
   }

   override void tick() {
      if(!isFrozen()) {
         Lith_UTIL.stateTick(self);
      }
   }

   states {
   Spawn:
      SMK5 ABCDEFGHIJKLMNOP 1;
      stop;
   }
}

class Lith_HotEmber : Actor {
   default {
      Radius 2;
      Height 2;
      Mass 8;
      Gravity 0.45;
      Renderstyle "Translucent";
      Alpha 0.9;
      Scale 0.3;
      +Bright
      +NoBlockmap
      +DontSplash
      -NoGravity
   }
   states {
   Spawn:
      #EEM A 1 light("Lith_BulletPuff1");
      #EEM BBCC 4 light("Lith_BulletPuff2") a_spawnItemEx("Lith_HotEmberTrail", fRandom[lith_bulletpuff](0, 0.5), fRandom[lith_bulletpuff](-0.5, 0.5), fRandom[lith_bulletpuff](-0.5, 0.5), fRandom[lith_bulletpuff](0, 0.5), fRandom[lith_bulletpuff](-0.5, 0.5), fRandom[lith_bulletpuff](-0.5, 0.5));
      #EEM DEFG 4 light("Lith_BulletPuff3");
      stop;
   }
}

class Lith_HotEmberTrail : Actor {
   default {
      Radius 2;
      Height 2;
      Renderstyle "Translucent";
      Alpha 0.9;
      Scale 0.3;
      +DontSplash
      +NoInteraction
   }

   states {
   Spawn:
      #EEM EFG 5 light("Lith_BulletPuff3");
      stop;
   }
}

class Lith_BulletAfterSmoke : Lith_GunSmoke {
   static const string textures[] = {
      "#ESMA0", "#ESMB0", "#ESMC0", "#ESMD0", "#ESME0", "#ESMF0", "#ESMG0",
      "#ESMH0", "#ESMI0", "#ESMJ0", "#ESMK0"
   };
   double m_sx, m_sy;
   int m_whichTex, m_nextSwitch;
   void lith_setTex() {
      texture = TexMan.checkForTexture(textures[m_whichTex], TexMan.Type_Any);
   }
   override void postBeginPlay() {
      super.postBeginPlay();
      alpha = 0.01;
      scale.x = 0.3 * fRandom[lith_bulletpuff](2, 6);
      scale.y = 0.3 * fRandom[lith_bulletpuff](0.4, 1.5);
      m_sx = fRandom[lith_bulletpuff](0.005, 0.01);
      m_sy = fRandom[lith_bulletpuff](0.001, 0.005);
      m_noTicker = true;
      lith_setTex();
      m_nextSwitch = 10;
   }
   override void tick() {
      super.tick();
      if(!isFrozen()) {
         if(m_ticks == m_nextSwitch) {
            if(m_whichTex == 10) {
               destroy();
               return;
            }
            ++m_whichTex;
            lith_setTex();
            switch(m_whichTex) {
            case 1: case 2:
               m_nextSwitch += 10;
               break;
            case 3: case 4: case 5: case 6:
               m_nextSwitch += random(14, 56);
               break;
            case 7: case 8: case 10:
               m_nextSwitch += 9;
               break;
            case 9:
               m_nextSwitch += 14;
               break;
            }
         }
         ++m_ticks;
         scale.x += m_sx;
         scale.y += m_sy;
         switch(m_whichTex) {
         case 0: case 1: case 2:
            alpha += fRandom[lith_bulletpuff](0.002, 0.005);
            break;
         case 7: case 8: case 9: case 10:
            alpha -= 0.0017071;
            break;
         }
      }
   }
}

class Lith_BulletTracer : Actor {
   default {
      Radius 2;
      Height 2;
      Speed 67;
      RenderStyle "Add";
      +Bright
      +DontSplash
   }

   vector3 m_targ;
   double  m_velw;

   override void postBeginPlay() {
      if(tracer) {
         super.postBeginPlay();
         int n = randomPick[lith_bulletpuff](45, -45);
         roll = fRandom[lith_bulletpuff](n - 2, n + 2);
         m_targ = tracer.pos;
         m_velw = vel.length();
      } else {
         destroy();
      }
   }

   override void tick() {
      if(!isFrozen()) {
         setOrigin(pos + vel, true);
         if((pos - m_targ).length() <= m_velw) {
            destroy();
         }
      }
   }

   states {
   Spawn:
      ____ A -1 light("Lith_BulletPuff1");
      stop;
   }
}

class Lith_BulletTracerSlow : Lith_BulletTracer {
   default {
      Speed 43;
   }
}

class Lith_BulletTracerBig : Lith_BulletTracerSlow {
}

class Lith_BulletRicochetSpark : Actor {
   default {
      RenderStyle "Add";
      +NoInteraction
      +DontSplash
      +FlatSprite
      +RollSprite
   }
   override void postBeginPlay() {
      super.postBeginPlay();
      roll  = fRandom[lith_bulletpuff](0, 359);
      pitch = fRandom[lith_bulletpuff](-5, 5) + 45;
      double sc = fRandom[lith_bulletpuff](0.05, 0.2);
      scale = (sc, sc);
   }
   states {
   Spawn:
      TNT1 A 0;
      SPRK ABCD 0 a_jump(51, "Spawn1");
   Spawn1:
      #### # random(1, 2) bright light("Lith_BulletPuff1");
      stop;
   }
}

class Lith_BulletPuffPainless : Lith_BulletPuff {default {+Painless}}
class Lith_BulletPuffPainful  : Lith_BulletPuff {default {+ForcePain}}

class Lith_BulletPuff : Actor replaces BulletPuff;

default {
   RenderStyle "Add";
   DamageType "Bullet";
   Alpha 0.9;
   +Bright
   +FloorClip
   +ForceRadiusDmg
   +ForceXyBillboard
   +HitTracer
   +NoBlockmap
   +NoGravity
   +NoClip
   +PuffGetsOwner
   -AllowParticles
}

void lith_a_smokeFX() {
   for(int i = 0, m = random[lith_bulletpuff](0, 2); i < m; i++) {
      let smoke = level.spawnVisualThinker('Lith_BulletAfterSmoke');
      smoke.pos = pos +
         (fRandom[lith_bulletpuff](-1,1),
          fRandom[lith_bulletpuff](-1,1),
          fRandom[lith_bulletpuff](-2,2));
      smoke.vel = (fRandom[lith_bulletpuff](-0.5,0.5),
                   fRandom[lith_bulletpuff](-0.5,0.5),
                   fRandom[lith_bulletpuff](-0.2,0.2));
   }
}

void lith_a_ricochetFX() {
   if(random[lith_bulletpuff](0, 255) < 32) return;
   for(int i = 0, m = random[lith_bulletpuff](0, 3); i < m; i++) {
      a_spawnItemEx("Lith_HotEmber", fRandom[lith_bulletpuff](-1, 1), fRandom[lith_bulletpuff](-1, 1), fRandom[lith_bulletpuff](0, 1), fRandom[lith_bulletpuff](-4, 4), fRandom[lith_bulletpuff](-4, 4), fRandom[lith_bulletpuff](2, 5), 0, SXF_NOCHECKPOSITION);
   }
   a_spawnParticle("FFFFFF", SPF_FULLBRIGHT | SPF_RELATIVE, 25, 4, 0,
      fRandom[lith_bulletpuff](-8,8), fRandom[lith_bulletpuff](-8,8), fRandom[lith_bulletpuff](-2,2),
      fRandom[lith_bulletpuff]( 0,1), fRandom[lith_bulletpuff](-5,5), fRandom[lith_bulletpuff]( 5,10),
      0, 0, fRandom[lith_bulletpuff](-0.5, -3),
      1.0, -1);
}

void lith_a_playRicochetSound() {
   if(random(0, 6) == 0) {
      a_startSound("effects/puff/ricochet", lch_body, volume: lith_weapons_ricochetvol);
   }
}

override void markPrecacheSounds() {
   super.markPrecacheSounds();
   markSound("effects/puff/ricochet");
   markSound("marathon/hit");
   markSound("marathon/hitwall");
   markSound("marathon/hitsolid");
}

override void postBeginPlay() {
   super.postBeginPlay();
   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_TorgueMode)) {
      a_spawnItemEx("Lith_EXPLOOOSION", flags: SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
   }
   if(tracer) {
      if(!tracer.bDormant) {
         if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Seven7s)) {
            a_startSound("marathon/hit", lch_body);
         }
         return;
      } else {
         setState(spawnState);
      }
   }
   if(random[lith_bulletpuff](0, 3) == 0) {
      lith_a_smokeFX();
   }
   if(random[lith_bulletpuff](0, 2) == 0) {
      lith_a_ricochetFX();
   }
   if(random[lith_bulletpuff](0, 4) == 0) {
      spawn("Lith_BulletRicochetSpark", pos);
   }
   if(random[lith_bulletpuff](0, 20) == 0) {
      spawn("Lith_PuffSmoke", pos.plusZ(4.0 + 0.1 * random[lith_bulletpuff](-10, 10)));
   }
}

states {
Melee:
XDeath:
   TNT1 A 8;
   stop;
Spawn:
   XPUF A 0;
   XPUF A 0 a_jumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_Seven7s), "SpawnMarathon");
Spawn1:
   XPUF A 0 a_jump(256, "PuffNormal", "PuffNormalAlt", "PuffMirrored", "PuffMirroredAlt");
   stop;
Crash:
   XPUF A 0;
   XPUF A 0 a_jumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_Seven7s), "CrashMarathon");
   goto Spawn1;
PuffNormal:
   XPUF QR 1 light("Lith_BulletPuff1");
   XPUF STU 1 light("Lith_BulletPuff2");
   goto PuffNormalEnd;
PuffNormalAlt:
   XPUF A 0 lith_a_playRicochetSound;
   XPUF AB 1;
   XPUF CDE 1 light("Lith_BulletPuff2");
PuffNormalEnd:
   XPUF FG 1 light("Lith_BulletPuff3");
   XPUF H 1;
   stop;
PuffMirrored:
   XPUF VW 1 light("Lith_BulletPuff1");
   XPUF XYZ 1 light("Lith_BulletPuff2");
   goto PuffMirroredEnd;
PuffMirroredAlt:
   XPUF I 0 lith_a_playRicochetSound;
   XPUF IJ 1;
   XPUF KLM 1 light("Lith_BulletPuff2");
PuffMirroredEnd:
   XPUF NO 1 light("Lith_BulletPuff3");
   XPUF P 1;
   stop;
CrashMarathon:
   TNT1 A 0 a_startSound("marathon/hitwall", lch_body, volume: lith_weapons_ricochetvol);
   goto MarathonPuff;
SpawnMarathon:
   TNT1 A 0 a_startSound("marathon/hitsolid", lch_body, volume: lith_weapons_ricochetvol);
   goto MarathonPuff;
MarathonPuff:
   TNT1 A 0 A_SetScale(0.5);
   TNT1 A 0 A_SetTranslucent(1, 1);
   MPUF ABCDEFG 2 bright;
   stop;
}

/* EOF */
