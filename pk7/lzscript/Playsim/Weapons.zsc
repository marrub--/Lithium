// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

extend class Lith_HERMES;

static bool weaponScoped() {
   let wep = Lith_Weapon(players[consolePlayer].readyWeapon);
   return wep && wep.m_ads == Lith_Weapon._ads_scope;
}

static bool weaponAimed() {
   let wep = Lith_Weapon(players[consolePlayer].readyWeapon);
   return wep && wep.m_ads != Lith_Weapon._ads_none;
}

static int GetMaxMag(string cname) {
   let p   = players[consolePlayer].mo;
   let wep = p ? Lith_Weapon(p.findInventory(cname)) : null;
   return wep ? wep.m_max : -1;
}

static int GetCurMag(string cname) {
   let p   = players[consolePlayer].mo;
   let wep = p ? Lith_Weapon(p.findInventory(cname)) : null;
   return wep ? wep.m_fired : -1;
}

static void IonizeFX(Actor mo) {
   Lith_CopyEffect.create("Lith_IonizedFx", mo);
}

static void DelearSprite_(Actor mo, double cp, double sp, double a, int x, int y) {
   mo.a_spawnItemEx("Lith_DelearSprite", cp, x,(mo.height - 19)+y-sp,mo.vel.x,mo.vel.y,mo.vel.z,a,SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY|SXF_ABSOLUTEANGLE);
}

static void DelearSprite(Actor mo_) {
   let mo = Lith_Player(mo_);
   let w  = Lith_Delear(mo.FindInventory("Lith_Delear"));
   if(!w) return;

   double a  = mo.m_IYaw;
   double cp = Cos(mo.m_IPitch) * 32;
   double sp = Sin(mo.m_IPitch) * 32;

   switch(w.m_Fired) {
   case  0: DelearSprite_(mo, cp, sp, a,  -8, 18);
   case  1: DelearSprite_(mo, cp, sp, a, -12, 16);
   case  2: DelearSprite_(mo, cp, sp, a, -16, 14);
   case  3: DelearSprite_(mo, cp, sp, a, -20, 12);
   case  4: DelearSprite_(mo, cp, sp, a,  -8,  8);
   case  5: DelearSprite_(mo, cp, sp, a, -12,  6);
   case  6: DelearSprite_(mo, cp, sp, a, -16,  4);
   case  7: DelearSprite_(mo, cp, sp, a, -20,  2);
   case  8: DelearSprite_(mo, cp, sp, a,   8, 18);
   case  9: DelearSprite_(mo, cp, sp, a,  12, 16);
   case 10: DelearSprite_(mo, cp, sp, a,  16, 14);
   case 11: DelearSprite_(mo, cp, sp, a,  20, 12);
   case 12: DelearSprite_(mo, cp, sp, a,   8,  8);
   case 13: DelearSprite_(mo, cp, sp, a,  12,  6);
   case 14: DelearSprite_(mo, cp, sp, a,  16,  4);
   case 15: DelearSprite_(mo, cp, sp, a,  20,  2);
   }
}

/* EOF */
