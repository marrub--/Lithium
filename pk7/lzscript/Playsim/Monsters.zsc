// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

extend class Lith_HERMES;

static void SurgeOfDestiny(Actor mo) {
   mo.GiveInventory("Lith_SurgeProtector", 1);
   mo.A_Explode(128, 192, xf_nosplash);
   mo.A_StartSound("weapons/dark/fire", lch_body);
   mo.A_SpawnItemEx("Lith_StarBarrier", 24,0,32, 2,0,2,  50, SXF_NOCHECKPOSITION);
   mo.A_SpawnItemEx("Lith_StarBarrier", 24,0,32, 2,0,2,  90, SXF_NOCHECKPOSITION);
   mo.A_SpawnItemEx("Lith_StarBarrier", 24,0,32, 2,0,2, 135, SXF_NOCHECKPOSITION);
   mo.A_SpawnItemEx("Lith_StarBarrier", 24,0,32, 2,0,2, 180, SXF_NOCHECKPOSITION);
   mo.A_SpawnItemEx("Lith_StarBarrier", 24,0,32, 2,0,2, 225, SXF_NOCHECKPOSITION);
   mo.A_SpawnItemEx("Lith_StarBarrier", 24,0,32, 2,0,2, 270, SXF_NOCHECKPOSITION);
   mo.A_SpawnItemEx("Lith_StarBarrier", 24,0,32, 2,0,2, 310, SXF_NOCHECKPOSITION);
   for(int i = 0; i < 9; i++)
      mo.A_SpawnProjectile("Lith_StarShrapnel", 64, 0, FRandom(0, 360), CMF_AIMDIRECTION);
   for(int i = 0; i < 3; i++)
      mo.A_SpawnProjectile("Lith_StarShrapnelHoming", 64, 0, FRandom(0, 360), CMF_AIMDIRECTION);
}

static void DieNow(Actor mo) {
   mo.A_Die();
}

static void DieMonster(Actor mo) {
   if(mo.health < 1000) mo.A_Die();
}

static void SoundAlert(Actor mo) {
   mo.soundAlert(mo);
}

static void PhantomOut(Actor mo) {
   mo.A_Quake(9, 35*2, 0, 2048);
   for(int i = 0; i < 76; i++) {
      mo.A_SpawnItemEx("Lith_PlayerDeathParticle", frandom(-16,16), frandom(-16,16), 0, 0, 0, frandom(2, 6), 0, SXF_NOCHECKPOSITION);
   }
}

static void PhantomTeleport(Actor mo) {
   Lith_CopyEffect.create("Lith_PhantomTeleportFx", mo, vel: (0.0, 0.0, 0.5));
}

static void MonsterBarrierLook(Actor mo)
{
   for(let it = BlockThingsIterator.Create(mo, 192*2); it.Next();)
      if(it.thing && it.Thing.Player) ACS_ExecuteWithResult(lsc_addangle, int(it.Thing.Pos.X), int(it.Thing.Pos.Y));
}

static void SpawnBoss(Actor a, string name, int phase) {
   let b = Lith_Phantom(Actor.spawn(name, a.pos));
   b.angle      = a.angle;
   b.args[0]    = a.args[0];
   b.args[1]    = a.args[1];
   b.args[2]    = a.args[2];
   b.args[3]    = a.args[3];
   b.args[4]    = a.args[4];
   b.master     = a.master;
   b.pitch      = a.pitch;
   b.roll       = a.roll;
   b.spawnAngle = a.spawnAngle;
   b.spawnPoint = a.spawnPoint;
   b.special    = a.special;
   b.special1   = a.special1;
   b.special2   = a.special2;
   b.target     = a.target;
   b.tracer     = a.tracer;
   b.vel        = a.vel;
   b.changeTID(a.tid);
   b.bCountSecret = a.spawnFlags &  MTF_SECRET;
   b.spawnFlags   = a.spawnFlags & ~MTF_SECRET;
   b.handleSpawnFlags();
   b.spawnFlags = a.spawnFlags;
   a.clearCounters();
   a.destroy();
   b.m_phase = phase;
   if(phase == 2) {
      b.damageMultiply    = 1.5;
      b.reactionTime      = 4;
      b.health           += b.health / 2;
      b.missileChanceMult = 0.5;
   } else if(phase == 3) {
      b.damageMultiply    = 2;
      b.reactionTime      = 2;
      b.health           *= 2;
      b.missileChanceMult = 0.0625;
   }
}

static void triggerBoss() {
   if(Lith_UTIL.pData(_pdt_mphantom) == _mphantom_spawned) {
      return;
   }
   double minRadius = getDefaultByType('Lith_Phantom').radius;
   double minHeight = getDefaultByType('Lith_Phantom').height;
   Actor mo;
   for(let it = ThinkerIterator.create('Actor'); (mo = Actor(it.next()));) {
      if(!mo.bBoss && !mo.bBossDeath && mo.bIsMonster && mo.radius >= minRadius && mo.height >= minHeight) {
         mo.acs_scriptCall("Lith_SpawnBoss", 0);
         break;
      }
   }
}

static void SetTeleFogTo(Actor mo, string type) {
   mo.telefogDestType = mo.telefogSourceType = type;
}

/* EOF */
