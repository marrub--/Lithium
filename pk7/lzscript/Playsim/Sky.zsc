class Lith_SkyThinker : Thinker;

static const color[] fire_pal = {
   0xFF070707, 0xFF1F0707, 0xFF2F0F07, 0xFF470F07, 0xFF571707, 0xFF671F07,
   0xFF771F07, 0xFF8F2707, 0xFF9F2F07, 0xFFAF3F07, 0xFFBF4707, 0xFFC74707,
   0xFFDF4F07, 0xFFDF5707, 0xFFDF5707, 0xFFD75F07, 0xFFD75F07, 0xFFD7670F,
   0xFFCF6F0F, 0xFFCF770F, 0xFFCF7F0F, 0xFFCF8717, 0xFFC78717, 0xFFC78F17,
   0xFFC7971F, 0xFFBF9F1F, 0xFFBF9F1F, 0xFFBFA727, 0xFFBFA727, 0xFFBFAF2F,
   0xFFB7AF2F, 0xFFB7B72F, 0xFFB7B737, 0xFFCFCF6F, 0xFFDFDF9F, 0xFFEFEFC7,
   0xFFFFFFFF
};

const canvas_w = 1024;
const canvas_h = 128;

const fire_canvas_w = 64;
const fire_canvas_h = 128;
const fire_canvas_size = fire_canvas_w * fire_canvas_h;

/* all modes */
transient Canvas m_canvas;
textureId m_origSky1, m_origSky2, m_setSky1, m_setSky2;
int       m_mode, m_rain;
color     m_color, m_fogColor;

/* canvas mode */
textureId m_base, m_blendTex, m_gradient;
int       m_baseSw, m_baseSh, m_baseDw, m_baseDh, m_baseY;
double    m_speed, m_blendAmt;

/* electric storms */
textureId m_lightning;
int       m_flash, m_flashLen, m_flashPos;
color     m_flashColor;

/* firestorms */
transient Canvas        m_fireCanvas;
uint8[fire_canvas_size] m_fire;

/* clouds */
textureId m_clouds;
int       m_cloudsStyle, m_cloudsW, m_cloudsH;
color     m_cloudsColor;

static Lith_SkyThinker create() {
   let th = new('Lith_SkyThinker');
   th.changeStatNum(Lith_HERMES._stat_environment);
   th.m_origSky1 = level.skyTexture1;
   th.m_origSky2 = level.skyTexture2;
   th.m_mode = _msky_nochange;
   th.m_rain = -1;
   th.m_blendTex.setInvalid();
   return th;
}

clearScope static Lith_SkyThinker get() {
   foreach(th : ThinkerIterator.create('Lith_SkyThinker', Lith_HERMES._stat_environment)) {
      return Lith_SkyThinker(th);
   }
   return null;
}

/* callbacks */
override void tick() {
   if(m_mode == _msky_nochange) {
      return;
   }
   m_fogColor = Lith_AirThinker.get().m_fogColor;
   if(level.skyTexture1 != m_setSky1 || level.skyTexture2 != m_setSky2) {
      if(level.skyTexture1 != m_setSky1) {
         m_origSky1 = level.skyTexture1;
      }
      if(level.skyTexture2 != m_setSky2) {
         m_origSky2 = level.skyTexture2;
      }
      level.changeSky(m_setSky1, m_setSky2);
   }
   if(m_mode == _msky_replace) {
      setReplacedSky();
   }
   int rain = Lith_UTIL.pData(_pdt_rain);
   if(rain != m_rain) {
      m_rain = rain;
      resetClouds();
   }
   if(m_rain == _rain_fire) {
      tickSkyFire();
   }
}

ui void drawSkyTex(textureId tex, int dw, int dh, int sw, int sh, int xofs, int yofs, double blend = 1.0) {
   let style = blend == 1.0 ? STYLE_Normal : STYLE_Translucent;
   m_canvas.drawTexture(
      tex, true, canvas_w-dw, 0,
      DTA_SrcWidth,sw, DTA_SrcHeight,sh,
      DTA_DestHeight,dh, DTA_DestWidth,dw,
      DTA_SrcY,yofs, DTA_SrcX,-xofs,
      DTA_FlipY,true,
      DTA_Alpha,blend, DTA_LegacyRenderStyle,style);
   m_canvas.drawTexture(
      tex, true, 0, 0,
      DTA_SrcWidth,xofs,
      DTA_DestHeight,sh, DTA_DestWidth,xofs,
      DTA_SrcY,yofs, DTA_SrcX,sw-xofs,
      DTA_FlipY,true,
      DTA_Alpha,blend, DTA_LegacyRenderStyle,style);
   for(int x = xofs; x < canvas_w-sw; x += sw) {
      m_canvas.drawTexture(
         tex, true, x, 0,
         DTA_SrcWidth,sw, DTA_SrcHeight,sh,
         DTA_DestWidth,sw, DTA_DestHeight,sh,
         DTA_SrcY,yofs,
         DTA_FlipY,true,
         DTA_Alpha,blend, DTA_LegacyRenderStyle,style);
   }
}

ui void drawSky(RenderEvent evt) {
   if(m_mode == _msky_nochange) {
      return;
   }
   /* calculate flash time */
   let flash_delta = level.time - m_flash;
   let do_flash    = flash_delta >= 0 && flash_delta < m_flashLen;
   let flash_norm  = do_flash ?
      1.0 - (flash_delta + evt.fracTic) / double(m_flashLen) :
      0.0;
   /* clear, then check mode */
   m_canvas.dim("black", 1.0, 0, 0, canvas_w, canvas_h);
   switch(m_mode) {
   case _msky_none:
      /* null sky just does nothing */
      break;
   case _msky_tintonly:
      /* for tint-only, we only need to dim with the sky shade */
      let dim_cr = m_color;
      if(do_flash) {
         dim_cr = color(
            255,
            min(int(dim_cr.r * 5.0f * flash_norm), 255),
            min(int(dim_cr.g * 5.0f * flash_norm), 255),
            min(int(dim_cr.b * 5.0f * flash_norm), 255));
      }
      m_canvas.dim(dim_cr, 1.0, 0, 0, canvas_w, canvas_h);
      break;
   default:
      /* with other skies, we need to draw a sky texture */
      int dw = m_baseDw, dh = m_baseDh;
      int sw = m_baseSw, sh = m_baseSh;
      int xofs = int(((gameTic + evt.fracTic) * 28.5714 * m_speed) % dw);
      int yofs = m_baseY;
      drawSkyTex(m_base, dw, dh, sw, sh, xofs, yofs);
      if(m_blendTex.isValid()) {
         drawSkyTex(m_blendTex, dw, dh, sw, sh, xofs, yofs, m_blendAmt);
      }
      if(do_flash) {
         m_canvas.drawTexture(m_lightning, true, m_flashPos, 0, DTA_Alpha,1.0 - flash_norm, DTA_LegacyRenderStyle,STYLE_Add, DTA_Color,m_flashColor, DTA_FlipY,true, DTA_FlipX,m_flashPos & 1 == 0);
      }
      if(m_clouds.isValid()) {
         int cszx = m_cloudsW, cszy = m_cloudsH;
         for(int x = 0; x < canvas_w; x += cszx) {
            m_canvas.drawTexture(m_clouds, true, x, 0, DTA_DestHeight,canvas_h, DTA_DestWidth,cszx, DTA_FlipX,true,DTA_FlipY,true, DTA_LegacyRenderStyle,m_cloudsStyle, DTA_Color,m_cloudsColor);
         }
      }
      m_canvas.dim(m_color, m_color.a / 400.0, 0, 0, canvas_w, canvas_h, STYLE_Add);
      m_canvas.drawTexture(m_gradient, true, 0, 0, DTA_DestHeight,dh,DTA_DestWidth,canvas_w, DTA_FlipY,true);
      if(do_flash) {
         m_canvas.dim("white", flash_norm * 0.2f, 0, 0, canvas_w, dh, STYLE_Add);
      }
   }
}

void resetCanvas() {
   if(m_mode != _msky_nochange) {
      m_fireCanvas = TexMan.getCanvas("LITHFIRE");
      m_canvas     = TexMan.getCanvas("LITHCSKY");
   }
}

void replaceSky() {
   m_flash    = 0;
   m_flashLen = 0;
   m_setSky1.setInvalid();
   m_setSky2.setInvalid();
   let skyC    = Lith_URANUS.getTex("LITHCSKY");
   m_gradient  = Lith_URANUS.getTex("LITHSKGR");
   m_lightning = Lith_URANUS.getTex("LITHSKLI");
   m_mode      = Lith_UTIL.pData(_pdt_msky);
   switch(m_mode) {
   default:
      /* you'll need to add new skies to this switch */
      m_mode = _msky_nochange;
      break;
   case _msky_tintonly:
      color cr;
      /* no atmosphere? */
      if(Lith_UTIL.pData(_pdt_mflg, _mflg_vacuum)) {
         cr = 0xFF000000;
      } else {
         switch(Lith_UTIL.pData(_pdt_menv)) {
         case _menv_evil:       cr = 0xFFFF0000; break;
         case _menv_hell:       cr = 0xFF540203; break;
         case _menv_interstice: cr = 0xFF160508; break;
         case _menv_abyss:      cr = 0xFFAFAFAF; break;
         default:               cr = 0xFF0C0C0F; break;
         }
         /* energy in the clouds? */
         if(Lith_UTIL.pData(_pdt_mflg, _mflg_lightning)) {
            cr = color(
               255,
               min(int(cr.r * 1.437f), 255),
               min(int(cr.g * 1.437f), 255),
               min(int(cr.b * 1.437f), 255));
         }
      }
      cr = color(
         255,
         min(cr.r + int(m_fogColor.r * (m_fogColor.a / 255.0)), 255),
         min(cr.g + int(m_fogColor.g * (m_fogColor.a / 255.0)), 255),
         min(cr.b + int(m_fogColor.b * (m_fogColor.a / 255.0)), 255)
      );
      m_color = cr;
      setSkyToCanvas(skyC);
      break;
   case _msky_replace:
      setReplacedSky();
   case _msky_vanilla:
      m_color = m_fogColor;
   case _msky_none:
      setSkyToCanvas(skyC);
      break;
   }
   resetClouds();
   resetCanvas();
}

void setReplacedSky() {
   m_blendTex.setInvalid();
   int which = -1;
   double blend = 0.0;
   let light = Lith_LightThinker.get();
   if(lith_sv_dynsky && light) {
      let rt_hrs = light.m_rtHrs;
      let rt_min = light.m_rtMin;
      let amt =
         min(sin((rt_hrs * 60 + rt_min) / 1440.0 * 180.0) * 3.0, 2.9999);
      if(rt_hrs >= 12) {
         blend = 1 - (amt % 1.0);
         if(amt < 2 && amt >= 1) {
            which = 3;
         } else {
            which = int(amt);
            if(which == 0) {
               blend = 0.0;
            }
         }
      } else {
         which = int(amt);
         if(which == 2) {
            blend = 0.0;
         } else {
            blend = amt % 1.0;
         }
      }
   }
   textureId tex;
   tex.setInvalid();
   double speed = 0.0;
   switch(Lith_UTIL.pData(_pdt_menv)) {
   case _menv_evil: tex = Lith_URANUS.getTex("HELP");     speed = 0.001; break;
   case _menv_hell: tex = Lith_URANUS.getTex("LITHSKRD"); speed = 0.01;  break;
   case _menv_interstice: tex = Lith_URANUS.getTex("LITHSKDE"); break;
   case _menv_abyss:      tex = Lith_URANUS.getTex("LITHWHIT"); break;
   }
   if(tex.isValid()) {
      if(m_base != tex) {
         setBase(tex, speed);
      }
      return;
   }
   textureId blendTex;
   blendTex.setInvalid();
   if(which == -1) {
      tex = Lith_URANUS.getTex("LITHSKST");
   } else {
      tex      = Lith_URANUS.getTex("LITHSKS" .. which);
      blendTex = Lith_URANUS.getTex("LITHSKS" .. ((which + 1) % 4));
   }
   if(m_base != tex) {
      setBase(tex, speed);
   }
   m_blendTex = blendTex;
   m_blendAmt = Lith_UTIL.easeInCubic(blend);
}

/* firestorms */
void initSkyFire() {
   for(int src = 0; src < m_fire.size(); ++src) {
      m_fire[src] = src < fire_canvas_w * (fire_canvas_h - 1) ? 0 : fire_pal.size() - 1;
   }
}

void tickSkyFire() {
   for(int src = fire_canvas_w; src < m_fire.size(); ++src) {
      if(m_fire[src] == 0) {
         m_fire[src - fire_canvas_w] = 0;
      } else {
         int rnd = random[lith_skyFire](0, 3);
         int dst = src - rnd + 1 - fire_canvas_w;
         if(dst > 0) {
            m_fire[dst] = m_fire[src] - (rnd & 1);
         }
      }
   }
   for(int y = 0; y < fire_canvas_h; ++y) {
      for(int x = 0; x < fire_canvas_w; ++x) {
         m_fireCanvas.dim(fire_pal[m_fire[y * fire_canvas_w + x]], 1.0, x, y, 1, 1, STYLE_Normal);
      }
   }
}

/* setters */
void setSkyToCanvas(textureId sky) const {
   let st1 = m_origSky1;
   let st2 = m_origSky2;
   let was_double_sky     = checkDoubleSky(m_origSky1, m_origSky2);
   let will_be_double_sky = was_double_sky && checkDoubleSky(m_origSky1, sky);
   if(m_mode == _msky_vanilla) {
      let curTex   = was_double_sky ? m_origSky2      : m_origSky1;
      let curSpeed = was_double_sky ? level.skySpeed2 : level.skySpeed1;
      setBase(curTex, curSpeed);
   }
   if(was_double_sky)
      {m_setSky1 = m_origSky1; m_setSky2 = sky;}
   else
      {m_setSky1 = sky; m_setSky2 = m_origSky2;}
   if(will_be_double_sky)
      {m_setSky1 = m_origSky1; m_setSky2 = sky;        level.skySpeed2 = 0.0;}
   else
      {m_setSky1 = sky;        m_setSky2 = m_origSky2; level.skySpeed1 = 0.0;}
   level.changeSky(m_setSky1, m_setSky2);
}

void setBase(textureId tex, double skySpeed) {
   m_speed = skySpeed;
   m_base  = tex;
   [m_baseSw, m_baseSh] = TexMan.getSize(m_base);
   if(m_baseSh < canvas_h) {
      m_baseDw = m_baseSh *= canvas_h / m_baseSh;
      m_baseDh = m_baseSw *= canvas_h / m_baseSh;
   } else if(m_baseSh == canvas_h) {
      m_baseDh = m_baseSh;
      m_baseDw = m_baseSw;
   } else if(m_baseSh < 200) {
      let ratio = canvas_h / double(m_baseSh);
      m_baseDh = canvas_h;
      m_baseDw = int(m_baseSw * ratio);
   } else if(m_baseSh <= 240) {
      m_baseDh = m_baseSh = canvas_h;
      m_baseDw = m_baseSw;
   } else {
      m_baseY  = m_baseSh - canvas_h;
      m_baseDh = m_baseSh = canvas_h;
      m_baseDw = m_baseSw;
   }
}

void setSkyFlash(int skyFlash, int skyFlashLen) {
   if(m_mode != _msky_nochange) {
      m_flash      = skyFlash;
      m_flashLen   = skyFlashLen / 2;
      m_flashPos   = random[lith_skyflash](0, canvas_w-TexMan.getSize(m_lightning));
      m_flashColor = color(179 + random[lith_skyflash](0, 76), 220 + random[lith_skyflash](0, 35), 255, 255);
   }
}

clearScope static bool checkDoubleSky(textureId st1, textureId st2) {
   if(level.info.flags & LEVEL_DOUBLESKY) {
      int x1 = 0, x2 = 0, y1 = 0, y2 = 0;
      if(st1.isValid()) {
         [x1, y1] = TexMan.getSize(st1);
      }
      if(st2.isValid()) {
         [x2, y2] = TexMan.getSize(st2);
      }
      return y1 == y2 && y1 != 0;
   } else {
      return false;
   }
}

/* clouds */
void resetClouds() {
   switch(m_mode) {
   case _msky_none:
   case _msky_tintonly:
      m_clouds.setInvalid();
      break;
   default:
      switch(m_rain) {
      default:
         m_clouds.setInvalid();
         break;
      case _rain_fire:
         setClouds(Lith_URANUS.getTex("LITHFIRE"), STYLE_Add);
         initSkyFire();
         break;
      case _rain_blood:
         setClouds(Lith_URANUS.getTex("LITHSKCL"), cr: 0xFFCF0000);
         break;
      case _rain_snow:
         setClouds(Lith_URANUS.getTex("LITHSKCL"), cr: 0xFFCFCFCF);
         break;
      case _rain_rain:
         setClouds(Lith_URANUS.getTex("LITHSKCL"));
         break;
      }
   }
}

void setClouds(textureId tex, int style = STYLE_Normal, color cr = 0xFFFFFFFF) {
   m_clouds      = tex;
   m_cloudsColor = cr;
   m_cloudsStyle = style;
   let [w, h] = TexMan.getSize(m_clouds);
   int scale = canvas_h / h;
   w *= scale;
   h *= scale;
   m_cloudsW = w;
   m_cloudsH = h;
}

/* EOF */
