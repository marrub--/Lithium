// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_Cyberspace : Thinker;

const RW = 64;
const RH = 48;

color  m_dBuf[RW * RH];
double m_camX[RW];

const MW = 8;
const MH = 8;

static const uint8[] CMAP = {
   1, 1, 1, 1, 1, 1, 1, 1,
   1, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 1, 0, 0, 1, 0, 1,
   1, 0, 0, 0, 0, 1, 0, 1,
   1, 0, 1, 0, 0, 0, 0, 1,
   1, 0, 1, 0, 0, 1, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 1,
   1, 1, 1, 1, 1, 1, 1, 1
};

/* camera normal */
double m_nx;
double m_ny;

/* camera plane */
double m_px;
double m_py;

/* view pos */
int m_vx;
int m_vy;

static Lith_Cyberspace create() {
   let cs = new("Lith_Cyberspace");

   cs.m_nx = -1.0;
   cs.m_ny =  0.0;

   cs.m_px = 0.0;
   cs.m_py = 0.66;

   cs.m_vx = 4;
   cs.m_vy = 4;

   for(int x = 0; x < RW; x++)
      cs.m_camX[x] = x / double(RW) * 2 - 1;

   cs.changeStatNum(_stat_cyberspace);

   callAcs("Lith_CSLoadMap");

   return cs;
}

override void tick() {
   lith_rotateView(2.0);
}

void lith_rotateView(double rel) {
   double o_nx = m_nx;
   double o_px = m_px;

   /* rotate normal and plane with a simple matrix */
   m_nx = m_nx * cos(rel) - m_ny * sin(rel);
   m_ny = o_nx * sin(rel) + m_ny * cos(rel);
   m_px = m_px * cos(rel) - m_py * sin(rel);
   m_py = o_px * sin(rel) + m_py * cos(rel);
}

void lith_drawFrame() {
   for(int x = 0; x < RW; x++) {
      /* camera x coordinate */
      double ndc = m_camX[x];
      if(ndc == 0) ndc = 0.001; /* hack to prevent sigfpe when facing 0° */

      /* ray normal */
      double rnx = m_nx + m_px * ndc;
      double rny = m_ny + m_py * ndc;

      /* direction delta */
      double ddx = sqrt(1 + (rny * rny) / (rnx * rnx));
      double ddy = sqrt(1 + (rnx * rnx) / (rny * rny));

      /* distance to side */
      double sideDx;
      double sideDy;

      /* step sign */
      int stepX;
      int stepY;

      /* get direction for ray normal */
      if(rnx < 0) {stepX = -1; sideDx = 0;}
      else        {stepX =  1; sideDx = ddx;}
      if(rny < 0) {stepY = -1; sideDy = 0;}
      else        {stepY =  1; sideDy = ddy;}

      /* dda raycast */
      int mapX = m_VX;
      int mapY = m_VY;

      bool side = false;

      do {
         if(sideDx < sideDy) {sideDx += ddx; mapX += stepX; side = false;}
         else                {sideDy += ddy; mapY += stepY; side = true; }
      } while(!CMAP[mapX + mapY * MW]);

      /* get perspective distance */
      double pwDst;
      if(side) pwDst = (mapY - m_VY + (1 - stepY) / 2) / rny;
      else     pwDst = (mapX - m_VX + (1 - stepX) / 2) / rnx;

      /* get line draw properties */
      int lineH = int(RH / pwDst);

      int ds = -lineH / 2 + RH / 2;
      int de =  lineH / 2 + RH / 2;

      if(ds <   0) ds = 0;
      if(de >= RH) de = RH - 1;

      if(ds == de) continue;

      /* get light amount for line */
      int light = 0xFF - int(pwDst * 32);
      if(side) light /= 2;
      light = clamp(light, 32, 135);

      /* clear and draw line */
      for(int y =  0; y <  RH; y++) m_dBuf[x + y * RW] = 0;
      for(int y = ds; y <= de; y++) m_dBuf[x + y * RW] = light | 0xFF000000;
   }
}

ui void lith_render() const {
   /* draw scene from pixel buffer */
   for(int y = 0; y < RH; y++) {
      for(int x = 0; x < RW; x++) {
         Lith_URANUS.drawRect(x, y, 1, 1, m_dBuf[x + y * RW], (RW, RH));
      }
   }
}

/* EOF */
