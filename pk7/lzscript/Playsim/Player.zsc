// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

extend class Lith_HERMES;

string m_logName;
string m_bipName;

static clearScope double GetAttackHeight(Actor mo) {
   return mo.height / 2.0 + mo.player.mo.attackZOffset * mo.player.crouchFactor;
}

static ui void Project(Actor mo, double x_, double y_, double z_, int px, int py, int pv) {
   let [x, y, v] = Lith_URANUS.instance().project((x_, y_, z_));
   if(px) ACS_ExecuteWithResult(lsc_setptri32,  px, x);
   if(py) ACS_ExecuteWithResult(lsc_setptri32,  py, y);
   if(pv) ACS_ExecuteWithResult(lsc_setptrbool, pv, v);
}

static void TraceFrom(Actor mo, double yaw, double pitch, double dist, double offsetz, bool floor, int px, int py, int pz) {
   vector3 v = Lith_URANUS.instance().traceFromActor(mo, yaw * 360, pitch * 360, dist, offsetz, floor).hitPos;
   if(px) ACS_ExecuteWithResult(lsc_setptrk32, px, int(v.x * FIX));
   if(py) ACS_ExecuteWithResult(lsc_setptrk32, py, int(v.y * FIX));
   if(pz) ACS_ExecuteWithResult(lsc_setptrk32, pz, int(v.z * FIX));
}

static void Nuke(Actor mo) {
   mo.A_StartSound("player/nuke", lch_body2, attenuation: ATTN_NONE);
   for(let it = BlockThingsIterator.Create(mo, 6144); it.next();)
      if(it.thing && it.thing.bSHOOTABLE && it.thing.checkSight(mo) && !it.thing.player)
         DieMonster(it.thing);
   mo.soundAlert(mo);
}

static void PlayerDeath(Actor mo) {
   mo.A_Quake(9, 35*2, 0, 2048);
   mo.A_StartSound("player/death2", lch_body3, attenuation: ATTN_NONE);
   for(int i = 0; i < 76; i++)
      mo.A_SpawnItemEx("Lith_PlayerDeathParticle", FRandom(-32,32), FRandom(-32,32), FRandom(0, 64), FRandom(-2, 2), FRandom(-2, 2), FRandom(1, 2), 0, SXF_NOCHECKPOSITION);
}

static void PlayerDeathNuke(Actor mo) {
   for(int i = 0; i < 76; i++)
      mo.A_SpawnItemEx("Lith_PlayerDeathParticle2", FRandom(-32,32), FRandom(-32,32), FRandom(0, 64), FRandom(-16, 16), FRandom(-16, 16), FRandom(1.5, 2.5), 0, SXF_NOCHECKPOSITION);
   Nuke(mo);
}

static void DeleteItem(Actor mo, int item) {
   let id = Lith_IDOL(mo.findInventory("Lith_IDOL"));
   if(id) id.lith_remove(item);
}

static bool UseItem(Actor mo, int item) {
   let id = Lith_IDOL(mo.findInventory("Lith_IDOL"));
   if(id) return id.lith_use(item);
   else   return false;
}

static void Log(int type, int levl, string name) {
   let sv = instance();
   if(sv) {
      sv.m_logName = name;
      callAcs("Lith_LogS", levl, type);
   }
}

static void UnlockBip(Actor mo, string name) {
   let sv = Instance();
   if(sv && mo.Player) {
      sv.m_bipName = name;
      mo.ACS_ScriptCall("Lith_BIPUnlock");
   }
}

static bool AdrenalineCheck(Actor mo)
{
   Actor th;
   for(let it = ThinkerIterator.Create("Actor"); (th = Actor(it.Next()));)
      if(th.bMISSILE && th.Target && th.Target.bCOUNTKILL && !th.IsZeroDamage() &&
         th.distance3D(mo) <= 100)
         return true;
   return false;
}

/* EOF */
