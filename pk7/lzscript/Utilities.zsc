// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │    By Marrub / Alison. & InsanityBringer. Attribution is encouraged,     │
// │                           though not required.                           │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

/* UTIL: Utilities and Tools Intersperse Languages */
struct Lith_UTIL {
   // angles
   static double constDeg(double x) {
      x %= 360;
      if(x < 0) x += 360;
      return x;
   }

   static double invertDeg(double x) {
      x += 180;
      x %= 360;
      if(x < 0) x += 360;
      return x;
   }

   static double diffDeg(double a, double b) {
      double d = (b - a) % 360;
      if(d < 0) d += 360;
      return d;
   }

   static double sDiffDeg(double a, double b) {
      double d = b - a;
      if(d ~== 0) return 0;
      d %= 360;
      return 2 * d % 360 - d;
   }

   static double, double circleSpread(double mdy, double mdp) {
      double dy = fRandom(mdy, 0);
      double dp = fRandom(mdp, 0);
      double a  = fRandom(0, 360);
      return sin(a) * dy, cos(a) * dp;
   }

   static vector3 anglesToVec(vector2 a, double r) {
      let cp = cos(-a.y);
      return (cos(a.x)*cp*r, sin(a.x)*cp*r, sin(-a.y)*r);
   }

   static vector2 vecToAngles(vector3 v) {
      return (atan2(v.x, v.y), invertDeg(asin(v.z)));
   }

   // collision functions
   static bool, vector2, vector2 collideLineAabb(vector2 p, vector2 dt, vector2 center, vector2 s2) {
      // get intersection time with box's edges
      let s   = (1.0 / dt.x, 1.0 / dt.y);
      let sgn = (s.x < 0 ? -1 : 1, s.y < 0 ? -1 : 1);
      let near = ((center.x - sgn.x * s2.x - p.x) * s.x,
                  (center.y - sgn.y * s2.y - p.y) * s.y);
      let far  = ((center.x + sgn.x * s2.x - p.x) * s.x,
                  (center.y + sgn.y * s2.y - p.y) * s.y);
      // check closest time of collision on both axes
      if(near.x <= far.y && near.y <= far.x) {
         // check nearest and furthest time
         let nt = max(near.x, near.y);
         let ft = min(far.x, far.y);
         if(nt < 1 && ft > 0) {
            // within box, calculate hit segment
            let ht = clamp(nt, 0, 1); // depth
            let hd = ((1 - ht) * -dt.x, (1 - ht) * -dt.y); // delta
            let hp = (p.x + dt.x * ht, p.y + dt.y * ht); // pos
            return true, hd, hp;
         }
      }
      return false, (0,0), (0,0);
   }

   // matrix math
   static vector3, vector3, vector3 mat3x3Multiply(vector3 m1, vector3 m2, vector3 m3, vector3 n1, vector3 n2, vector3 n3) {
      // get columns
      let nx = (n1.x, n2.x, n3.x);
      let ny = (n1.y, n2.y, n3.y);
      let nz = (n1.z, n2.z, n3.z);
      // dot every combination
      return
         (m1 dot nx, m1 dot ny, m1 dot nz),
         (m2 dot nx, m2 dot ny, m2 dot nz),
         (m3 dot nx, m3 dot ny, m3 dot nz);
   }

   static vector3, vector3, vector3 mat3x3TranslateVec2(vector2 v) {
      return
         (1, 0, v.x),
         (0, 1, v.y),
         (0, 0, 1);
   }

   static vector3, vector3, vector3 mat3x3Rotate(double theta) {
      let c = cos(theta);
      let s = sin(theta);
      return
         (c, -s, 0),
         (s,  c, 0),
         (0,  0, 1);
   }

   static vector2 mat3x3MultiplyVec2(vector3 m1, vector3 m2, vector3 m3, vector2 v) {
      // treat v as a vector3 with z=1
      let vv = (v, 1);
      // only calculate first two elements
      return (m1 dot vv, m2 dot vv);
   }

   // easing
   static double easeInQuad(double t) {
      return t * t;
   }

   static double easeInOutQuad(double t) {
      if(t < 0.5) {
         return 2.0 * t * t;
      } else {
         double tt = -2.0 * t + 2.0;
         return 1.0 - tt * tt / 2.0;
      }
   }

   static double easeInCubic(double t) {
      return t * t * t;
   }

   static double easeOutCubic(double t) {
      t = 1 - t;
      return 1 - t * t * t;
   }

   static double lerp(double a, double b, double t) {
      return (1.0 - t) * a + t * b;
   }

   static vector2 vec2Lerp(vector2 a, vector2 b, double t) {
      return (1.0 - t) * a + t * b;
   }

   static vector3 vec3Lerp(vector3 a, vector3 b, double t) {
      return (1.0 - t) * a + t * b;
   }

   static double angleLerp(double a, double b, double t) {
      return a + sDiffDeg(a, b) * t;
   }

   static color colorLerp(color a, color b, double t) {
      uint rd = uint(lerp(a.r, b.r, t));
      uint gr = uint(lerp(a.g, b.g, t));
      uint bl = uint(lerp(a.b, b.b, t));
      uint al = uint(lerp(a.a, b.a, t));
      return (al << 24) | (rd << 16) | (gr << 8) | bl;
   }

   // misc. math
   static int round(double n) {
      return int(n * 1000) % 1000 < 500 ? int(n) : int(n+0.5);
   }

   // ACS utilities
   static play int exec(Actor mo, int scr, int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0) {
      return Level.ExecuteSpecial(84, mo, null, false, scr, arg0, arg1, arg2, arg3);
   }

   static int pData(int info, int permutation = 0) {
      return acs_executeWithResult(lsc_pdata, info, permutation);
   }

   // actors
   static play bool stateTick(Actor mo) {
      if(mo.tics >= 0 && --mo.tics <= 0) {
         mo.setState(mo.curState.nextState);
         return true;
      } else {
         return false;
      }
   }

   // metaprogramming
   static bool classExists(name cnam) {
      class<Object> cls = cnam;
      return cls != null;
   }

   // visual effects
   static void particlePosVel(FSpawnParticleParams pp, vector3 pos, vector2 angles = (0, 0), double distance = 0.0, vector3 vel = (0,0,0), vector2 vel_angles = (0, 0), double vel_distance = 0.0) {
      pp.pos = pos;
      if(distance != 0) {
         pp.pos += Lith_UTIL.anglesToVec(angles, distance);
      }
      pp.vel = vel;
      if(vel_distance != 0) {
         let p = Lith_UTIL.anglesToVec(vel_angles, vel_distance);
         pp.vel = (pp.vel.x * p.x, pp.vel.y * p.y, pp.vel.z * p.z);
      }
   }

   play static void copyPSpriteVisualData(PSprite new, PSprite old) {
      new.sprite = old.sprite;
      new.frame = old.frame;
      new.x = old.x;
      new.y = old.y;
      new.oldx = old.oldx;
      new.oldy = old.oldy;
      new.baseScale = old.baseScale;
      new.pivot = old.pivot;
      new.scale = old.scale;
      new.rotation = old.rotation;
      new.halign = old.halign;
      new.valign = old.valign;
      new.coord0 = old.coord0;
      new.coord1 = old.coord1;
      new.coord2 = old.coord2;
      new.coord3 = old.coord3;
      new.alpha = old.alpha;
      new.firstTic = old.firstTic;
      new.interpolateTic = old.interpolateTic;
      new.translation = old.translation;
      new.bAddWeapon = old.bAddWeapon;
      new.bAddBob = old.bAddBob;
      new.bFlip = old.bFlip;
      new.bMirror = old.bMirror;
      new.bPlayerTranslated = old.bPlayerTranslated;
      new.bPivotPercent = old.bPivotPercent;
      new.bInterpolate = old.bInterpolate;
   }
}

class Lith_LineTracer : LineTracer {
   Actor m_ignore;
   int m_lnflags;
   override ETraceStatus traceCallback() {
      let mo = results.hitActor;
      let ln = results.hitLine;
      bool tomare;
      switch(results.hitType) {
      case TRACE_HITACTOR:
         tomare = mo != m_ignore && mo.bShootable && mo.bSolid;
         break;
      case TRACE_HITWALL:
         tomare = ln.flags & m_lnflags || results.tier != TIER_MIDDLE;
         break;
      default:
         tomare = true;
         break;
      }
      return tomare ? TRACE_STOP : TRACE_SKIP;
   }
}

class Lith_VecLerp {
   vector2 lst, nex;
   double  ds, tm;
   static Lith_VecLerp create(class<Lith_VecLerp> lt = 'Lith_VecLerp') {
      let l = Lith_VecLerp(new(lt));
      l.lst = (0, 0);
      l.nex = (0, 0);
      l.ds = 1;
      l.tm = 0;
      return l;
   }
   vector2 update(vector2 new, double ct) {
      let cur = get_cur(ct);
      if(new == nex) {
         return cur;
      } else {
         let del = cur - new;
         lst = cur;
         nex = new;
         ds  = get_ds(del);
         tm  = ct + ds;
         return lst;
      }
   }
   double get_ds(vector2 del) const {
      return sqrt(del.x * del.x + del.y * del.y) * 20.0;
   }
   vector2 get_cur(double ct) const {
      return ct < tm ? Lith_UTIL.vec2Lerp(lst, nex, Lith_UTIL.easeOutCubic(1 - clamp((tm - ct) / ds, 0, 1))) : nex;
   }
}

/* EOF */
