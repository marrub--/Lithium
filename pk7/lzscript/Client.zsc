// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

#include "lzscript/Client/Render.zsc"

#include "lzscript/Client/CreditsMenu.zsc"
#include "lzscript/Client/Crosshair.zsc"
#include "lzscript/Client/DamageNum.zsc"
#include "lzscript/Client/Map.zsc"
#include "lzscript/Client/Draw.zsc"
#include "lzscript/Client/Menu.zsc"
#include "lzscript/Client/MessageBox.zsc"
#include "lzscript/Client/Particles.zsc"
#include "lzscript/Client/PlayerClassMenu.zsc"
#include "lzscript/Client/Projection.zsc"
#include "lzscript/Client/StatScreen.zsc"
#include "lzscript/Client/StatusBar.zsc"

#include "lzscript/libeye/projector.zsc"
#include "lzscript/libeye/projectorGl.zsc"
#include "lzscript/libeye/projectorPlanar.zsc"
#include "lzscript/libeye/viewport.zsc"

/* URANUS: Users Really Are Not UI Systems */
class Lith_URANUS : StaticEventHandler;

ui Lith_MenuDelegate m_del;

static clearScope Lith_URANUS instance() {
   return Lith_URANUS(find('Lith_URANUS'));
}

override void onRegister() {
   renRegister();
   particleRegister();
}

override void worldLoaded(WorldEvent evt) {
   let sky = Lith_SkyThinker.get();
   if(sky) sky.resetCanvas();
   if(evt.isSaveGame && Lith_UTIL.pData(_pdt_mflg, _mflg_corrupted)) {
      CallACS("Lith_TimelineInconsistent");
   }
   // HACK! HACK ! HACK  !! HAAAACK
   if(!level.nextMap || level.nextMap.left(6) == "enDSeQ") {
      level.nextMap = "LITHEND";
   }
}

override void worldUnloaded(WorldEvent evt) {
   renUnload();
}

override void worldTick() {
   renTick();
}

override void uiTick() {
   if(!m_del) {
      if(menuDelegate) {
         menuDelegate.destroy();
      }
      m_del = Lith_MenuDelegate.create();
      menuDelegate = m_del;
   }
   tickMenu();
}

override void renderOverlay(RenderEvent evt) {
   let sky = Lith_SkyThinker.get();
   if(sky) sky.drawSky(evt);
   renRender(evt);
   drawMenu(evt);
}

static double uiRandom(double min, double max) {
   return fRandom[Lith_GUI](min, max);
}

/* EOF */
