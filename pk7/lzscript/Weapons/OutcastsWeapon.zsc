// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_OutcastsWeapon : Lith_Weapon;

default {
   Inventory.RestrictedTo "Lith_MarinePlayer", "Lith_CyberMagePlayer";
}
bool m_knifeReFire;
int m_autoReloadTics;
action(Weapon) void Lith_A_HitKnife(class<Actor> puff) {
   lith_a_fireMelee((CountInv("PowerStrength") ? 20 : 5) * random(1, 10), 100, _mlf_no_turn, puff);
}
override void markPrecacheSounds() {
   super.markPrecacheSounds();
   markSound("weapons/knife/swing1");
   markSound("weapons/knife/swing2");
}
override void tick() {
   super.tick();
   if(owner && owner.player && owner.player.readyWeapon != self && m_fired &&
      Lith_UTIL.pData(_pdt_upgrade, UPGR_AutoReload)) {
      ++m_autoReloadTics;
      if(m_autoReloadTics > 35*5) {
         m_autoReloadTics = 0;
         lith_reloadFinish(true);
      }
   } else {
      m_autoReloadTics = 0;
   }
}
states(Weapon) {
User4:
   #### # 0 {
      return Lith_Player(self).m_pclass == pcl_marine ?
         null :
         ResolveState("ReadySelector");
   }
_UseKnife:
   #### # 0 A_JumpIf(invoker.m_ads, "ReadySelector");
   #### # 0 A_JumpIf(invoker.m_KnifeReFire, "_KnifeStart");
   #### # 3 offset(2, 34) lith_a_setInterpolation(true);
   #### # 1 offset(5, 41);
   #### # 1 offset(10, 58);
   #### # 1 offset(17, 87) lith_a_setInterpolation(false);
_KnifeStart:
   TNT1 A 0 {invoker.m_KnifeReFire = true;}
   TNT1 A 0 offset(1, 32) soundAlert(invoker.owner);
   TNT1 A 0 A_JumpIf(countInv("Lith_Knif"), "_Knife1");
   KNIF A 1 A_StartSound("weapons/knife/swing1", lch_weapon);
   KNIF B 1 lith_a_setInterpolation(true);
   KNIF CD 1;
   goto _KnifeNormal;
_Knife1:
   TNT1 A 1 A_StartSound("weapons/knife/swing2", lch_weapon);
   KNIF F 1;
   KNIF G 1 lith_a_setInterpolation(true);
   KNIF H 1;
_KnifeNormal:
   KNIF E 0 A_JumpIf(countInv("Lith_Knif"), "_KnifeEnd2");
   KNIF E 0 Lith_A_HitKnife("Lith_KnifPuf1");
   KNIF E 1 lith_a_setInterpolation(false);
   TNT1 A 1;
   TNT1 A 0 ResolveState("_KnifeEnd");
   stop;
_KnifeEnd2:
   KNIF I 0 Lith_A_HitKnife("Lith_KnifPuf2");
   KNIF I 1;
   KNIF J 1 lith_a_setInterpolation(false);
   TNT1 A 0 ResolveState("_KnifeEnd");
   stop;
_KnifeEnd:
   TNT1 A 7;
   TNT1 A 0 A_JumpIf(countInv("Lith_Knif"), "_KnifeDone");
   TNT1 A 0 GiveInventory("Lith_Knif", 1);
   TNT1 A 0 ResolveState("_KnifeEnd_1");
   stop;
_KnifeEnd_1:
   TNT1 AAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOSWITCH|WRF_ALLOWUSER4);
_KnifeEnd_2:
   TNT1 A 0 TakeInventory("Lith_Knif", 1);
   TNT1 A 0 ResolveState("_KnifeFinish");
   stop;
_KnifeDone:
   TNT1 A 0 {self.TakeInventory("Lith_Knif", 1);}
   TNT1 A 0 ResolveState("_KnifeDone_1");
   stop;
_KnifeDone_1:
   TNT1 AAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOSWITCH|WRF_ALLOWUSER4);
_KnifeDone_2:
   TNT1 A 0 ResolveState("_KnifeFinish");
   stop;
_KnifeFinish:
   TNT1 A 0 {invoker.m_KnifeReFire = false;}
   TNT1 A 1 A_Lower(60);
   TNT1 A 0 ResolveState("Select");
   stop;
}

/* EOF */
