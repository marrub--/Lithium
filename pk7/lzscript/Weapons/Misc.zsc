// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_ExclusiveWeapon : Lith_Weapon abstract {
   default {
      Weapon.SlotNumber 0;
      +Weapon.CheatNotWeapon
   }
   states(Weapon) {
   Deselect:
      /* this check required for death sequences */
      TNT1 A 0 A_JumpIf(health >= 1, "ReadySelector");
      TNT1 A 0 Lith_A_Lower(_raise_instant);
      wait;
   Select:
      TNT1 A 0 Lith_A_Raise(_raise_instant);
      loop;
   }
}

class Lith_SwordPuff : Lith_BulletPuff {
   default {
      DamageType "Melee";
      AttackSound "weapons/sword/swing1";
   }
}

class Lith_SwordCharge : Inventory {default {Inventory.MaxAmount 25;}}

class Lith_Sword : Lith_ExclusiveWeapon {
   default {
      Tag "$LITH_TAG_Sword";
      Weapon.Kickback 100;
      +Weapon.MeleeWeapon
      +Weapon.NoAutoFire
   }
   override void markPrecacheSounds() {
      super.markPrecacheSounds();
      markSound("weapons/sword/hit");
      markSound("weapons/sword/normal");
      markSound("weapons/sword/charge");
      markSound("weapons/sword/chargeup");
      markSound("weapons/sword/swing");
   }
   states(Weapon) {
   Ready:
      SORD A 0 {self.TakeInventory("Lith_SwordCharge", int.max);}
      SORD A 1 Lith_A_Ready;
      loop;
   Fire:
      SORD A 0 A_Jump(256, "FireSL", "FireSR");
   FireDone:
      SORD A 1 offset(-17, 50) A_WeaponReady(WRF_NOBOB);
      SORD A 1 offset(-13, 49) A_WeaponReady(WRF_NOBOB);
      SORD A 1 offset(-10, 46) A_WeaponReady(WRF_NOBOB);
      SORD A 1 offset(-8 , 43) A_WeaponReady(WRF_NOBOB);
      SORD A 1 offset(-4 , 40) A_WeaponReady(WRF_NOBOB);
      SORD A 1 offset(-2 , 38);
      SORD A 1 offset(-1 , 35);
      SORD A 1 offset(-1 , 33);
      SORD A 1 offset(0  , 32);
      goto ReadySelector;
   FireSL:
      SORD BCD 1;
      TNT1 A 2;
      SORD E 1;
      SORD F 1 A_CustomPunch(35, false, 0, "Lith_SwordPuff", 128.0, 0, 0, null, "weapons/sword/hit", "weapons/sword/normal");
      SORD GH 1 A_WeaponReady(WRF_NOBOB);
      TNT1 A 7 A_WeaponReady(WRF_NOBOB);
      goto FireDone;
   FireSR:
      SORD A 1 offset(-2 , 38);
      SORD A 1 offset(-10, 46);
      SORD A 1 offset(-17, 50);
      TNT1 A 2;
      SORD I 1;
      SORD J 1 A_CustomPunch(35, false, 0, "Lith_SwordPuff", 128.0, 0, 0, null, "weapons/sword/hit", "weapons/sword/normal");
      SORD KL 1 A_WeaponReady(WRF_NOBOB);
      TNT1 A 7 A_WeaponReady(WRF_NOBOB);
      goto FireDone;
   AltFire:
      SORD A 0 A_JumpIf(countInv("Lith_SwordCharge"), "AltFireSkipSound");
      SORD A 0 A_StartSound("weapons/sword/charge", lch_weapon);
   AltFireSkipSound:
      SORD A 1;
      SORD A 0 A_JumpIf(countInv("Lith_SwordCharge") == lith_maxInv("Lith_SwordCharge"), "AltFireForReal");
      SORD A 0 {self.GiveInventory("Lith_SwordCharge", 1);}
      SORD A 0 A_Refire;
      goto ReadySelector;
   AltFireForReal:
      SORD A 15 A_StartSound("weapons/sword/chargeup", lch_weapon2);
      SORD AB 2;
      SORD CD 1;
      TNT1 A 5;
      SORD E 1 A_StartSound("weapons/sword/swing", lch_weapon3);
      SORD F 1 A_SpawnItemEx("Lith_SwordBlitter", 0, 0, 24, 0, 0, 0, 0, SXF_SETTARGET | SXF_NOCHECKPOSITION);
      SORD GH 1;
      TNT1 A 4;
      SORD A 1 offset(-30, 70);
      SORD A 1 offset(-27, 65);
      SORD A 1 offset(-23, 60);
      SORD A 1 offset(-19, 55);
      SORD A 1 offset(-17, 50);
      SORD A 1 offset(-13, 49);
      SORD A 1 offset(-10, 46);
      SORD A 1 offset( -8, 43);
      SORD A 1 offset( -4, 40);
      SORD A 1 offset( -2, 38);
      SORD A 1 offset( -1, 35);
      SORD A 1 offset( -1, 33);
      SORD A 1 offset(  0, 32);
      goto ReadySelector;
   }
}

class Lith_Kenshirou : Lith_ExclusiveWeapon {
   default {
      Tag "$LITH_TAG_Kenshirou";
      +Weapon.MeleeWeapon
      +Weapon.NoAutoFire
   }
   bool m_seenShirtRip;
   int m_loops;
   states(Weapon) {
   Ready:
      TNT1 A 0 a_jumpIf(invoker.m_seenShirtRip, "Ready1");
      TNT1 A 0 a_startSound("weapons/kenshirou/shirtrip", lch_weapon);
      ,K10 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 bright;
      ,K11 ABCDEFGHIJKLMNOPQRSTUVWXYZ 2 bright;
      ,K12 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 bright;
      ,K13 ABCDEFGHIJKLMNOPQRSTUVWXYZ 2 bright;
      ,K14 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 bright;
      ,K15 ABCDEFGHIJKLMNOPQRSTUVWXYZ 2 bright;
      ,K16 ABCDEFGHIJK 1 bright;
      TNT1 A 0 {invoker.m_seenShirtRip = true;}
   Ready1:
      TNT1 A 1 lith_a_ready(WRF_NOBOB);
      wait;
   Deselect:
      TNT1 A 0 A_JumpIf(health >= 1, "ReadySelector");
      TNT1 A 0 a_startSound("weapons/kenshirou/lin", lch_weapon2);
      ,K05 ABABCDCDEFEF 2;
      ,K05 GHI 15;
      TNT1 A 0 Lith_A_Lower(_raise_instant);
      wait;
   Fire:
      TNT1 A 0 {
         a_startSound("weapons/kenshirou/hrkloop", lch_weapon, CHANF_LOOP);
         soundAlert(invoker.owner);
         invoker.m_loops = 0;
      }
      ,K04 P 0 bright a_jumpIf(random(0, 1), "FireLoop2");
      ,K04 ABCDEFGHIJKLMNOP 2 bright;
   FireLoop:
      ,K03 ABCDEFGHIJKLMNO 2 bright lith_a_fireMelee(15, 128, _mlf_pull_in);
      TNT1 A 0 a_jumpIf(invoker.m_loops++ < 1, "FireLoop");
      TNT1 A 0 a_reFire("FireLoop");
      goto FireEnd;
   FireLoop2:
      ,K01 ABCDEFGHIJKLMNOPQRSTUVWXYZ 2 bright lith_a_fireMelee(15, 128, _mlf_pull_in);
      ,K02 ABCD 2 bright;
      TNT1 A 0 a_jumpIf(invoker.m_loops++ < 1, "FireLoop2");
      TNT1 A 0 a_reFire("FireLoop2");
      goto FireEnd;
   FireEnd:
      TNT1 A 0 a_startSound("weapons/kenshirou/hrkend", lch_weapon);
      TNT1 A 25;
      TNT1 A 0 a_explode(256 * invoker.m_loops, 64 * invoker.m_loops, 0);
      goto ReadySelector;
   }
}

class Lith_WingsOfDeath : Lith_Weapon {
   default {
      Tag "$LITH_TAG_WingsOfDeath";
      Weapon.SlotNumber 0;
      Inventory.AltHudIcon "DWNGA0";
      Lith_Weapon.DefaultSpeed 4;
      +Weapon.CheatNotWeapon
   }
   override void markPrecacheSounds() {
      super.markPrecacheSounds();
      markSound("player/wings");
   }
   states(Weapon) {
   Ready:
      TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
      TNT1 A 0 {
         A_SetBlend("FF FF FF", 0.1, 5);
         Lith_CopyEffect.create("Lith_HeavenlyImage", self, (-4,-4,0), (-5,-7,1));
         Lith_CopyEffect.create("Lith_HeavenlyImage", self, (-4, 4,0), (-5, 7,1));
         self.GiveInventory("PowerFlight", 1);
         SoundAlert(Invoker.Owner);
         for(let it = BlockThingsIterator.create(self, 1024); it.next();) {
            let mo = it.thing;
            if(mo && mo != self && mo.bSHOOTABLE && mo.checkSight(self)) {
               mo.target = self;
               mo.damageMobj(self, self, int.max, 'Massacre', DMG_THRUSTLESS|DMG_FORCED|DMG_PLAYERATTACK|DMG_FOILINVUL|DMG_FOILBUDDHA|DMG_NO_ARMOR|DMG_NO_FACTOR|DMG_NO_PROTECT|DMG_NO_ENHANCE);
            }
         }
      }
      TNT1 A 0 A_JumpIf(level.time % 40 == 0, "Flap");
      TNT1 A 0 A_JumpIf(level.time % 2  == 0, "Ready");
      TNT1 A 0 A_ChangeVelocity(0, 0, -0.2);
      loop;
   Flap:
      TNT1 A 0 {
         A_ChangeVelocity(0, 0, 4);
         A_StartSound("player/wings", lch_weapon);
      }
      goto ReadySelector;
   Deselect:
      TNT1 A 0 {self.TakeInventory("PowerFlight", 1);}
      TNT1 A 0 Lith_A_Lower(_raise_instant);
      wait;
   Select:
      TNT1 A 0 Lith_A_Raise(_raise_instant);
      wait;
   Fire:
      goto ReadySelector;
   }
}

/* EOF */
