// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_DiffPlasma : Lith_PlasmaBolt {
   default {
      DamageFunction 8 * Random(6,9);
      DeathSound "weapons/plasdiff/explode";
      Speed 25;
   }

   states {
   Spawn:
      TNT1 A 0;
   Trail:
      TNT1 A 0 A_JumpIf(m_TrailStep >= 5, "TrailDone");
      TNT1 A 0 {
         m_TrailStep++;
         A_SpawnItemEx("Lith_PlasmaBoltTrail_Blue", m_TrailStep * 10. * Vel.X / -35., -(m_TrailStep * 10. * Vel.Y) / -35., 2. + m_TrailStep * 10. * Vel.Z / -35., flags: SXF_ABSOLUTEANGLE | SXF_NOCHECKPOSITION);
      }
      loop;
   TrailDone:
      TNT1 A 0 {
         m_TrailStep = 0;
      }
      goto Step;
   Step:
      TNT1 A 1 light("Lith_PlasmaPistolLight");
      TNT1 A 0 ResolveState("Trail");
   Death:
      PLSE A 4 bright light("Lith_PlasmaPistolLight") {
         for(int i = 0; i < 4; i++)
            A_SpawnParticle("Blue", SPF_FULLBRIGHT, 15, 4, 0, FRandom(-5, 5),FRandom(-5, 5),FRandom(-5, 5), FRandom(-5, 5),FRandom(-5, 5),FRandom(-5, 5));
      }
      PLSE BCDE 4 bright light("Lith_PlasmaPistolLight");
      stop;
   }
}

class Lith_PlasmaDiffuser : Lith_OutcastsWeapon;

default {
   Tag "$LITH_INFO_SHORT_PlasmaDiffuser";
   Weapon.SlotNumber 6;
   Weapon.SlotPriority 0.9;
   Weapon.UpSound "weapons/plasdiff/draw";
   Inventory.AltHudIcon "PDIFA0";
   Lith_Weapon.AmmoType "Lith_PlasmaAmmo";

   +Weapon.CheatNotWeapon
}
override void markPrecacheSounds() {
   super.markPrecacheSounds();
   markSound("weapons/plasdiff/fire");
   markSound("weapons/plasdiff/empty");
}
action(Weapon) void Lith_A_FirePlasmaDiff() {
   lith_takeAmmo(60);
   lith_gunFlash();
   soundAlert(invoker.owner);
   A_StartSound("weapons/plasdiff/fire", lch_weapon);
   A_FireProjectile("Lith_DiffPlasma", 0, false, 0, -9);
   A_FireProjectile("Lith_LightProjectileSkyShort", 0);
}

states(Weapon) {
Ready:
   PDFG BCDEFG 1 Lith_A_Ready;
   loop;

Deselect:
   PDFG A 1 Lith_A_Lower(_raise_fast);
   loop;

Select:
   PDFG A 1 Lith_A_Raise(_raise_fast);
   loop;

Fire:
   PDFG A 0 lith_jumpNoAmmo;
   PDFG H 1 offset(0, 44) bright Lith_A_FirePlasmaDiff;
   PDFG I 1 offset(0, 40) bright;
   PDFG J 1 offset(0, 37) bright;
   PDFG A 2 offset(0, 35) bright;
   PDFG A 1 offset(0, 34) bright A_ReFire;
   PDFG A 1 offset(0, 32) A_ReFire;
   goto ReadySelector;
FireEmpty:
   #### # 1 A_StartSound("weapons/plasdiff/empty", lch_dryweapon);
   #### # 1 offset(0, 37);
   #### # 1 offset(0, 36);
   #### # 1 offset(0, 35);
   #### # 1 offset(0, 34);
   #### # 1 offset(0, 32);
   #### # 1 A_ReFire;
   goto ReadySelector;
}

/* EOF */
