// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_Weapon : Weapon;

default {
   Inventory.PickupMessage "";
   Inventory.PickupSound "";
   Lith_Weapon.AdsInSound "weapons/adsin";
   Lith_Weapon.AdsOutSound "weapons/adsout";
   Lith_Weapon.AdsZoom 1.0;
   Lith_Weapon.DefaultSpeed 1.0;
   Lith_Weapon.SprintSpeed 2.0;
   Weapon.BobSpeed 1.5;
   Weapon.BobStyle "InverseSmooth";
   +Inventory.UnTossable
   +Weapon.NoAlert
}

enum Lith_PSprite {
   _psp_under_weapon     = psp_weapon - 10,
   _psp_under_weapon_max = psp_weapon - 1,
   _psp_weapon = psp_weapon,
   _psp_double_lg,
   _psp_double_rg,
   _psp_weapon_user,
   _psp_weapon_max = _psp_weapon_user + 10,
   _psp_flash = psp_flash,
   _psp_double_lf,
   _psp_double_rf,
   _psp_flash_user,
   _psp_flash_max = _psp_flash_user + 10,
   _psp_misc = 69420,
   _psp_misc_user,
   _psp_misc_max = _psp_misc_user + 200,
}

enum Lith_Hand {
   _rhs,
   _lhs,
}

enum Lith_Oscillate {
   _no_oscill,
   _oscillate,
}

enum Lith_TracerType {
   _tr_normal,
   _tr_slow,
   _tr_big,
   _tr_none
}

enum Lith_RaiseSpeed {
   _raise_slow,
   _raise_normal,
   _raise_fast,
   _raise_instant
}

enum Lith_MeleeFlags {
   _mlf_pull_in,
   _mlf_no_turn,
   _mlf_damage_stepup,
}

enum Lith_Ads {
   _ads_none,
   _ads_scope,
   _ads_sights,
}

meta sound m_adsOutSnd;
meta sound m_adsInSnd;
meta double m_adsZoom;
meta double m_defaultSpeed;
meta double m_sprintSpeed;
meta class<Actor> m_spawnType;
meta class<Lith_Ammo> m_ammoType;

bool m_side;
int m_ads;
int m_firePattern;
int m_fired;
int m_max;
state m_sprintReturn;
uint m_flags;

property AmmoType:     m_ammoType;
property MagSize:      m_max;
property AdsOutSound:  m_adsOutSnd;
property AdsInSound:   m_adsInSnd;
property AdsZoom:      m_adsZoom;
property SpawnType:    m_spawnType;
property DefaultSpeed: m_defaultSpeed;
property SprintSpeed:  m_sprintSpeed;

flagdef HitScan: m_flags, 0;

const _psp_flags =
   PSPF_ADDWEAPON | PSPF_ADDBOB | PSPF_ALPHA | PSPF_RENDERSTYLE;

virtual double, double lith_getFirePattern() {return 0, 0;}
virtual bool           lith_checkSprint()    {return false;}

virtual bool lith_adsShouldHappen() {return true;}

virtual void lith_reloadFinish(bool isAuto) {
   m_fired = 0;
}

override void markPrecacheSounds() {
   super.markPrecacheSounds();
   markSound(m_adsOutSnd);
   markSound(m_adsInSnd);
}

override double getSpeedFactor() {
   return owner && owner.player.readyWeapon == self ? (Lith_Player(owner).m_sprinting ? m_sprintSpeed : m_defaultSpeed) : 1;
}

override void postBeginPlay() {
   super.postBeginPlay();
   if(owner) {
      return;
   }
   if(m_spawnType) {
      A_SpawnItemEx(m_spawnType, flags:
                    SXF_TRANSFERTRANSLATION | SXF_TRANSFERAMBUSHFLAG  |
                    SXF_TRANSFERPITCH       | SXF_TRANSFERPOINTERS    |
                    SXF_TRANSFERSCALE       | SXF_TRANSFERSPECIAL     |
                    SXF_TRANSFERSTENCILCOL  | SXF_TRANSFERALPHA       |
                    SXF_TRANSFERRENDERSTYLE | SXF_TRANSFERSPRITEFRAME |
                    SXF_TRANSFERROLL);
   }
   destroy();
}

action(Weapon) void lith_resetCrosshair() {
   if(lith_xhair_enable) {
      a_setCrosshair(-1);
   } else {
      a_setCrosshair(0);
   }
}

int lith_getRaiseSpeed(Lith_RaiseSpeed speed) {
   switch(speed) {
   case _raise_slow:    return 10;
   case _raise_normal:  return 12;
   case _raise_fast:    return 18;
   case _raise_instant: return 60;
   default:             throwAbortException("invalid raise speed");
   }
   return 0;
}

bool lith_magEmpty() {return m_fired >= m_max;}

bool lith_noAmmo(int minAmount = 1) const {
   return m_ammoType && owner.countInv(m_ammoType) < minAmount;
}

action(Weapon) void lith_a_setInterpolation(bool on) {
   for(int psp = _psp_weapon; psp < _psp_weapon_max; ++psp) {
      a_overlayFlags(psp, pspf_interpolate, on);
   }
}

action(Weapon) void lith_a_overlayTick() {
   lith_resetCrosshair();
   double a = 1.0;
   int style = style_normal;
   if(invoker.m_ads == _ads_scope) {
      a = lith_weapons_scopealpha;
      style = style_subtract;
   } else if(!invoker.m_ads) {
      lith_a_adsZoomOut();
   }
   a *= Lith_UTIL.pData(_pdt_alpha) / FIX;

   for(int psp = _psp_weapon; psp < _psp_weapon_max; ++psp) {
      a_overlayFlags(psp, pspf_alpha|pspf_renderstyle, true);
      a_overlayRenderStyle(psp, style);
      a_overlayAlpha(psp, a);
      if(Lith_Player(self).m_wasDamaged) {
         a_overlayTranslation(psp, "Lith_FuckUp" .. random(1, 4));
      } else {
         a_overlayTranslation(psp, '');
      }
   }
}

action(Weapon) void Lith_A_Lower(Lith_RaiseSpeed speed) {
   if(!player) {
      return;
   }
   lith_a_setInterpolation(false);
   lith_a_adsCancel();
   if(!player.readyWeapon) {
      player.mo.bringUpWeapon();
      return;
   }
   int lowerSpeed = player.playerState != pst_dead ? invoker.lith_getRaiseSpeed(speed) : 8;
   let psp = player.findPSprite(_psp_weapon);
   if(psp) {
      if(player.morphTics || player.cheats & cf_instantweapswitch) {
         psp.y = weaponBottom;
      } else {
         psp.y += lowerSpeed;
      }
      if(psp.y >= weaponBottom) {
         resetPSprite(psp);
         for(int i = _psp_flash; i < _psp_flash_max; ++i) {
            player.setPSprite(i, null);
         }
         if(player.playerState != pst_dead) {
            player.mo.bringUpWeapon();
         } else {
            for(int i = _psp_weapon; i < _psp_weapon_max; ++i) {
               player.setPSprite(i, null);
            }
         }
      }
   }
}

action(Weapon) void Lith_A_Raise(Lith_RaiseSpeed speed) {
   if(!player) {
      return;
   }
   lith_resetCrosshair();
   lith_a_setInterpolation(false);
   lith_a_adsCancel();
   if(player.pendingWeapon != WP_NOCHANGE) {
      player.mo.dropWeapon();
      return;
   }
   if(!player.readyWeapon) {
      return;
   }
   int raiseSpeed = invoker.lith_getRaiseSpeed(speed);
   let psp = player.findPSprite(_psp_weapon);
   if(psp) {
      if(psp.y <= weaponBottom) {
         resetPSprite(psp);
      }
      psp.y -= raiseSpeed;
      if(psp.y <= weaponTop) {
         psp.y = weaponTop;
         psp.setState(invoker.getReadyState());
      }
   }
}

action(Weapon) void Lith_A_DoubleRaise() {
   A_Overlay(_psp_double_lg, "ReadyLH");
   A_Overlay(_psp_double_rg, "ReadyRH");
   A_OverlayFlags(_psp_double_lg, _psp_flags, true);
   A_OverlayFlags(_psp_double_rg, _psp_flags, true);
}

action(Weapon) void Lith_A_DoubleLower() {
   Lith_A_DoubleRaise();
}

action(Weapon) state Lith_A_DoubleState(bool oscillate, statelabel lh, statelabel rh, statelabel returnlh = null, statelabel returnrh = null) {
   if(oscillate) {
      invoker.m_side = !invoker.m_side;
      if(invoker.m_side) {
         A_Overlay(_psp_double_lg, lh);
         if(returnlh) return resolveState(returnlh);
      } else {
         A_Overlay(_psp_double_rg, rh);
         if(returnrh) return resolveState(returnrh);
      }
   } else {
      A_Overlay(_psp_double_lg, lh);
      A_Overlay(_psp_double_rg, rh);
   }
   return null;
}

action(Weapon) void Lith_A_DoubleOffset(bool left, int x, int y, int flags = 0) {
   int fst = left ? _psp_double_lg : _psp_double_rg;
   int snd = left ? _psp_double_lf : _psp_double_rf;
   A_OverlayOffset(fst, x, y, flags);
   A_OverlayOffset(snd, x, y, flags);
}

action(Weapon) state Lith_A_Ready(int flags = 0, stateLabel sprintReturn = "Select") {
   let psp = player.findPSprite(_psp_misc);
   if(!psp || !psp.curState) {
      A_Overlay(_psp_misc, "_OverlayHax");
   }
   let lp = Lith_Player(player.mo);
   if(Lith_UTIL.pData(_pdt_semifrozen)) {
      flags |= WRF_NOFIRE;
   } else if(lp) {
      lp.m_sprinting = false;
      if(lp.m_pclass == pcl_marine) {
         flags |= WRF_ALLOWUSER4;
      }
   }
   if(invoker.m_ads && !invoker.lith_adsShouldHappen()) {
      invoker.lith_adsCancel();
      return invoker.lith_gotoReady();
   } else if(invoker.lith_checkSprint()) {
      invoker.m_sprintReturn = resolveState(sprintReturn);
      return resolveState("_Sprint");
   } else if(Lith_StatFx.getInPool("Lith_StatShadowWalker")) {
      return resolveState("_ShadowWalk");
   } else {
      a_weaponReady(flags);
      return null;
   }
}

action(Weapon) state Lith_A_JumpIfMagEmpty(bool autoreload = true, statelabel rsn = "Reload", statelabel esn = "FireEmpty") {
   statelabel sn;
   if(autoreload) {
      if(lith_weapons_reloadempty) {
         sn = rsn;
      } else {
         sn = esn;
      }
   } else {
      sn = rsn;
   }
   if(invoker.lith_magEmpty()) {
      if(sn == "FireEmpty") {
         lith_a_setInterpolation(true);
      }
      return ResolveState(sn);
   } else {
      return null;
   }
}

action(Weapon) state Lith_A_JumpIfMagFull(statelabel sn = "ReadySelector") {
   return invoker.m_fired ? null : ResolveState(sn);
}

action(Weapon) void Lith_A_MagIncr(int amt = 1) {
   if(!Lith_UTIL.pData(_pdt_upgrade, UPGR_OneShot))
      invoker.m_fired = min(invoker.m_fired + amt, invoker.m_max);
   else
      invoker.m_fired = invoker.m_max;
}

action(Weapon) void Lith_A_ReloadFinish() {
   invoker.Lith_ReloadFinish(false);
}

action(Weapon) void Lith_A_RecoilUp(double amt) {
   double v = lith_weapons_recoil * amt;
   CallACS("Lith_RecoilUp", int(v * FIX));
}

action(Weapon) void Lith_A_RecoilDn(double amt) {
   double v = lith_weapons_recoil * (-amt/4);
   CallACS("Lith_RecoilUp", int(v * FIX));
}

action(Weapon) void Lith_A_ReloadBobUp(double amt) {
   double v = lith_weapons_reloadbob * amt;
   CallACS("Lith_RecoilUp", int(v * FIX));
}

action(Weapon) void Lith_A_ReloadBobDn(double amt) {
   double v = lith_weapons_reloadbob * -amt;
   CallACS("Lith_RecoilUp", int(v * FIX));
}

action(Weapon) void lith_a_adsZoomFactor(double amount = 1.0) {
   a_zoomFactor(1 + amount * lith_weapons_zoomfactor * invoker.m_adsZoom);
}

void lith_adsZoomOut() {
   fovScale = 1;
   if(owner && owner.player) {
      let p = owner.player;
      p.fov = p.desiredFov;
      p.cheats |= CF_NOFOVINTERP;
   }
}

void lith_adsCancel() {
   if(m_ads) {
      m_ads = _ads_none;
      lith_adsZoomOut();
   }
}

action(Weapon) void lith_a_adsZoomOut() {invoker.lith_adsZoomOut();}
action(Weapon) void lith_a_adsCancel()  {invoker.lith_adsCancel();}

action(Weapon) void lith_a_adsIn(int ads = _ads_sights) {
   if(!invoker.m_ads) {
      invoker.m_ads = ads;
      lith_a_adsZoomFactor();
      a_startSound(invoker.m_adsInSnd, lch_scope);
   }
}

action(Weapon) void lith_a_adsOut() {
   if(invoker.m_ads) {
      lith_a_adsCancel();
      a_startSound(invoker.m_adsOutSnd, lch_scope);
   }
}

action(Weapon) state lith_a_adsToggle(int ads = _ads_sights) {
   if(invoker.m_ads) {lith_a_adsOut();   return resolveState("AdsOut");}
   else              {lith_a_adsIn(ads); return resolveState("AdsIn");}
}

action(Weapon) void Lith_GunSmoke(class<Actor> type, double x = 0, double y = 6, bool ignoreCrouch = false) {
   if(!ignoreCrouch) (y -= ((1.0 - GetCrouchFactor(AAPTR_DEFAULT)) * 10.0));
   A_FireProjectile(type, 0, 0, x, y, FPF_NOAUTOAIM);
}

action(Weapon) void Lith_A_GunSmokeAndSparks(double x = 0, double y = 6, bool ignoreCrouch = false) {
   Lith_GunSmoke("Lith_GunSmokeAndSparks", x, y, ignoreCrouch);
}

action(Weapon) void Lith_A_GunSmokeAndSparksSmall(double x = 0, double y = 6, bool ignoreCrouch = false) {
   Lith_GunSmoke("Lith_GunSmokeAndSparksSmall", x, y, ignoreCrouch);
}

action(Weapon) void Lith_A_DropMag(class<Lith_DroppedMagazine> mag1, class<Lith_DroppedMagazine> mag2, double px, double py, double pz, double vx, double vy, double vz) {
   double vh = Player.ViewZ - Player.MO.ViewHeight - Pos.Z;
   px += FRandom(-1, 1); py += FRandom(-1, 1); pz += FRandom(-1, 1);
   vx += FRandom(-1, 1); vy += FRandom(-1, 1); vz += FRandom(-1, 1);
   A_SpawnItemEx(invoker.Lith_MagEmpty() || !mag2 ? mag1 : mag2, px,py,pz+vh, vx,vy,vz);
}

action(Weapon) void Lith_A_Casing(class<Lith_CasingBase> cas, double px, double py, double pz, double vx, double vy, double vz) {
   double vh = Player.ViewZ - Player.MO.ViewHeight - Pos.Z;
   px += FRandom(-1, 1); py += FRandom(-1, 1); pz += FRandom(-1, 1);
   vx += FRandom(-1, 1); vy += FRandom(-1, 1); vz += FRandom(-1, 1);
   A_SpawnItemEx(cas, Cos(Pitch)*px, py, pz-Sin(Pitch)*px+vh, vx, vy, vz);
}

action(Weapon) void Lith_FixedBullets(int numBullets, int damage, int flags = 0, class<Actor> puffType = "Lith_BulletPuff", double tracerX = 0, double range = 8192) {
   for(int i = 0; i < numBullets; i++) {
      let [p, y] = invoker.Lith_GetFirePattern();
      Lith_FireBullets(p, y, -1, damage, FBF_EXPLICITANGLE | FBF_NORANDOM | flags, puffType, tracerX, range);
   }
}

action(Weapon) void Lith_FireBullets(double spreadHorz, double spreadVert, int numBullets, int damage, int flags = 0, class<Actor> puffType = "Lith_BulletPuff", double tracerX = 0, double range = 8192, Lith_TracerType tracer = _tr_normal) {
   class<Actor> tracerType;
   switch(tracer) {
   case _tr_normal: tracerType = "Lith_BulletTracer";     break;
   case _tr_slow:   tracerType = "Lith_BulletTracerSlow"; break;
   case _tr_big:    tracerType = "Lith_BulletTracerBig";  break;
   case _tr_none:   tracerType = null;                    break;
   }
   A_FireBullets(spreadHorz, spreadVert, numBullets, damage, puffType, flags | FBF_PUFFTRACER, range, tracerType, 7 + FRandom(-1, 0), tracerX + FRandom(-0.7, 0.7));
}

action(Weapon) Actor lith_a_fireMelee(int damage, double range, int flags = 0, class<Actor> puffType = "Lith_BulletPuff") {
   if(!player) {
      return null;
   }
   FTranslatedLineTarget lt;
   double y = angle + random2() * (5.625 / 256.0);
   double p = aimLineAttack(y, range, lt, 8, ALF_CHECK3D|ALF_CHECKNONSHOOTABLE);
   if(flags & _mlf_damage_stepup && lt.lineTarget) {
      double rad  = radius - lt.lineTarget.radius;
      double dist = lt.lineTarget.distance2D(self) - rad;
      double rnge = range - rad;
      if(dist >= rnge) {
         damage *= 2;
      } else {
         damage = int(double(damage) * (1.0 + dist / rnge));
      }
   }
   let [puff, doneDamage] = lineAttack(y, range, p, damage, 'Melee', puffType, LAF_ISMELEEATTACK, lt);
   if(lt.lineTarget) {
      if(!(flags & _mlf_no_turn)) {
         angle = lt.angleFromSource;
      }
      if(flags & _mlf_pull_in) {
         bJustAttacked = true;
      }
   }
   return lt.lineTarget;
}

action(Weapon) State lith_jumpNoAmmo(int minAmount = 1, stateLabel label = "FireEmpty") {
   if(invoker.lith_noAmmo(minAmount)) {
      if(label == "FireEmpty") {
         lith_a_setInterpolation(true);
      }
      return resolveState(label);
   } else {
      return null;
   }
}

action(Weapon) void lith_takeAmmo(int amount = 1) {
   if(!sv_infiniteammo && !findInventory('PowerInfiniteAmmo', true)) {
      self.takeInventory(invoker.m_ammoType, amount);
   }
}

action(Weapon) State lith_jumpAmmo(int maxAmount, stateLabel label) {
   if(self.countInv(invoker.m_ammoType) >= maxAmount) {
      return resolveState(label);
   } else {
      return null;
   }
}

action(Weapon) clearScope int lith_maxInv(class<Inventory> itemType) {
   let item = findInventory(itemType);
   if(item) {
      return item.maxAmount;
   } else {
      return getDefaultByType(itemType).maxAmount;
   }
}

action(Weapon) void lith_sprint() {
   Lith_Player(invoker.owner).m_sprinting = true;
}

action(Weapon) state lith_jumpIfSprint() {
   if(vel.xy.length() < 8 || !Lith_Player(invoker.owner).m_onGround) {
      player.findPSprite(_psp_weapon).frame = 99;
   }
   if(getPlayerInput(INPUT_BUTTONS) & BT_SPEED == 0) {
      Lith_Player(invoker.owner).m_sprinting = false;
      return resolveState("_SprintDone");
   } else {
      return null;
   }
}

action void lith_gunFlash() {
   player.mo.playAttacking2();
}

virtual state lith_gotoReady() {
   return m_ads ? resolveState("AltReady") : resolveState("Ready");
}

states(Actor) {
Spawn:
   TNT1 A 0;
   stop;
}

states(Weapon) {
_OverlayHax:
   TNT1 A 1 lith_a_overlayTick;
   loop;
AdsOut:
AdsIn:
FireEmpty:
ReadySelector:
   #### # 0 {
      lith_a_setInterpolation(false);
      return invoker.lith_gotoReady();
   }
   stop;
}

/* EOF */
