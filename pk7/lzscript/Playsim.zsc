// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

#include "lzscript/Playsim/Files.zsc"
#include "lzscript/Playsim/Input.zsc"
#include "lzscript/Playsim/Light.zsc"
#include "lzscript/Playsim/Monsters.zsc"
#include "lzscript/Playsim/Player.zsc"
#include "lzscript/Playsim/Rain.zsc"
#include "lzscript/Playsim/StatusEffects.zsc"
#include "lzscript/Playsim/Weapons.zsc"
#include "lzscript/Playsim/Air.zsc"
#include "lzscript/Playsim/Sky.zsc"
#include "lzscript/Playsim/World.zsc"

class Lith_LevelPostProcessor : LevelPostProcessor {
   protected void apply(name checksum, string mapname) {
      if(checksum == '4859dfa9957f951b2e99b5fc335d2099') {
         for(uint i = 0; i < getThingCount(); ++i) {
            switch(getThingEdNum(i)) {
            case 2028: // column
               if(gameinfo.gametype & GAME_CHEX) {
                  setThingEdNum(i, 55); // spinny globe
               } else if(gameinfo.gametype & GAME_HERETIC) {
                  setThingEdNum(i, 27); // serpent torch
               }
               break;
            case 43: // burnt tree
               if(gameinfo.gametype & GAME_CHEX) {
                  setThingEdNum(i, 81); // small bush
               } else if(gameinfo.gametype & GAME_HERETIC) {
                  setThingEdNum(i, 37); // small stalagmite
               }
               break;
            case 54: // big tree
               if(gameinfo.gametype & GAME_CHEX) {
                  setThingEdNum(i, 47); // pine tree
               } else if(gameinfo.gametype & GAME_HERETIC) {
                  setThingEdNum(i, 38); // big stalagmite
               }
               break;
            case 44: // blue torch
            case 46: // red torch
               if(gameinfo.gametype & GAME_CHEX) {
                  setThingEdNum(i, 35); // lamppost
               } else if(gameinfo.gametype & GAME_HERETIC) {
                  setThingEdNum(i, 50); // wall torch
               }
               break;
            case 55: // short blue torch
               if(gameinfo.gametype & GAME_CHEX) {
                  setThingEdNum(i, 34); // small lamppost
               } else if(gameinfo.gametype & GAME_HERETIC) {
                  setThingEdNum(i, 76); // brazier
               }
               break;
            case 70: // burning barrel
               if(gameinfo.gametype & GAME_CHEX) {
                  setThingEdNum(i, 32); // barrel
               } else if(gameinfo.gametype & GAME_HERETIC) {
                  setThingEdNum(i, 44); // barrel
               } else if(!TexMan.checkForTexture("FCANA0", TexMan.Type_Sprite).isValid()) {
                  setThingEdNum(i, 2035); // explosive barrel
               }
               break;
            }
         }
      }
   }
}

/* HERMES: Horribly Explicit and Rudimentary Methods for Extended Scripting */
class Lith_HERMES : EventHandler;

enum GameFlags {
   _gamef_extrahard = 1 << 0,
}

enum StatNums {
   _stat_environment = Thinker.STAT_USER + 7,
}

string m_obituary;
name m_dmgType;
bool m_dmgWorld;
int m_bossLevel;
array<Actor> m_bossBabies;
int m_bossDeathInit;
int m_gameFlags;

override void onRegister() {
   m_gameFlags |= lith_sv_extrahard ? _gamef_extrahard : 0;
}

override void worldLoaded(WorldEvent ev) {
   if(ev.isReOpen) {
      return;
   }
   m_bossLevel = boss_none;
   m_bossBabies.clear();
   if(!lith_sv_postgame) {
      CVar.findCVar('__lith_fun').setInt(__lith_fun & ~lfun_postgame);
   }
   if(!level.nextMap || level.nextMap.left(6) == "enDSeQ") {
      if(level.info.flags & LEVEL_BRUISERSPECIAL || level.info.flags3 & LEVEL3_E1M8SPECIAL) {
         m_bossLevel = boss_barons;
      } else if(level.info.flags3 & LEVEL3_E2M8SPECIAL) {
         m_bossLevel = boss_cyberdemon;
      } else if(level.info.flags3 & LEVEL3_E3M8SPECIAL) {
         m_bossLevel = boss_spiderdemon;
      } else {
         let it = ThinkerIterator.create("BossBrain");
         if(it.next()) {
            m_bossLevel = boss_iconofsin;
         } else {
            m_bossLevel = boss_other;
         }
      }
   }
   Lith_SkyThinker.create();
   acs_executeWithResult(lsc_worldopen);
   setUpEnvironment();
}

static void UpdateSky() {
   Lith_SkyThinker.get().replaceSky();
}

void setUpEnvironment() {
   if(Lith_UTIL.pData(_pdt_menv) == _menv_evil) {
      S_ChangeMusic("lmusic/Ragnarok.ogg", 0, true, true);
      foreach(sec : level.sectors) {
         setUpEvilSector(sec);
      }
   }
   if(Lith_UTIL.pData(_pdt_mflg, _mflg_vacuum)) {
      level.gravity *= 0.2;
   }
   Lith_AirThinker.create();
   Lith_RainThinker.create();
   Lith_LightThinker.create();
}

void setUpEvilSector(Sector sec) {
   sec.flags |= Sector.SECF_ENDGODMODE;
   sec.setAngle(Sector.floor,   frandom(0, 360));
   sec.setAngle(Sector.ceiling, frandom(0, 360));
   foreach(ln : sec.lines) {
      ln.flags |= Line.ML_DONTDRAW;
      ln.alpha = frandom(0.5, 1);
      foreach(sd : ln.sidedef) {
         if(sd) {
            sd.addTextureXOffset(Side.top,    frandom(-7,7));
            sd.addTextureXOffset(Side.mid,    frandom(-7,7));
            sd.addTextureXOffset(Side.bottom, frandom(-7,7));
            sd.addTextureYOffset(Side.top,    frandom(-7,7));
            sd.addTextureYOffset(Side.mid,    frandom(-7,7));
            sd.addTextureYOffset(Side.bottom, frandom(-7,7));
            sd.light = random(-40, 40);
         }
      }
   }
}

override void worldThingDestroyed(WorldEvent ev) {
   let item = Lith_InventoryItem(ev.thing);
   if(item) item.lith_destroy();
}

override void worldUnloaded(WorldEvent ev) {
   PpShader.SetEnabled("Lith_End", false);
   if(!(level.clusterFlags & LevelLocals.CLUSTER_HUB || level.info.flags2 & LEVEL2_HEXENHACK) || LevelInfo.findLevelInfo(ev.nextMap).cluster != level.cluster) {
      acs_executeWithResult(lsc_hubclear);
   }
   m_bossDeathInit = 0;
   let it = ThinkerIterator.create("Lith_InventoryItem");
   for(Lith_InventoryItem mo; mo = Lith_InventoryItem(it.next());) {
      if(!mo.owner) {
         mo.lith_destroy();
      }
   }
}

override void worldThingSpawned(WorldEvent ev) {
   let th = ev.thing;
   if(th is "CommanderKeen") {
      th.bNoBlood = true;
      th.setTag("Commander Keen");
      return;
   }
   if(m_bossLevel == boss_iconofsin && th is "BossBrain") {
      m_bossBabies.push(th);
   }
   if(th.bIsMonster && !(th is "RandomSpawner")) {
      if(th.health > 0) {
         Lith_UTIL.exec(th, lsc_monsterinfo);
      }
      if(Lith_UTIL.pData(_pdt_menv) == _menv_evil) {
         th.damageMultiply += 2;
         th.scale.X *= fRandom(0.9, 1.1);
         th.scale.Y *= fRandom(0.9, 1.1);
         th.bLookAllAround = true;
      }
      switch(m_bossLevel) {
         case boss_barons:
            if(th.bE1M8Boss) {
               if(th.pos.x == 528) {
                  th.A_SetTranslation('Lith_BlueBaron');
               }
               m_bossBabies.push(th);
            }
            break;
         case boss_cyberdemon:
            if(th.bE2M8Boss || th.bE4M6Boss) {
               m_bossBabies.push(th);
            }
            break;
         case boss_spiderdemon:
            if(th.bE3M8Boss || th.bE4M8Boss) {
               m_bossBabies.push(th);
            }
            break;
      }
      if(m_bossLevel != boss_none) {
         if(Lith_UTIL.pData(_pdt_mflg, _mflg_corrupted)) {
            th.health *= 2;
            th.reactionTime = 0;
            th.damageMultiply *= 1.5;
         }
         if(th.bBossDeath) {
            th.health = int(th.health * 2.7);
            th.reactionTime = 0;
            th.damageMultiply *= 1.6;
         }
      }
   }
}

override void worldTick() {
   if(m_bossLevel != boss_none) {
      if(m_bossDeathInit == 0) {
         bool boss_baby_is_dead;
         if(m_bossBabies.size() == 0) {
            boss_baby_is_dead = false;
         } else {
            boss_baby_is_dead = true;
            foreach(bb : m_bossBabies) {
               if(m_bossLevel == boss_barons) {
                  if(playeringame[consoleplayer] && players[consoleplayer].mo) {
                     SecSpecial spec;
                     players[consoleplayer].mo.floorSector.getSpecial(spec);
                     if(!(spec.flags & Sector.SECF_ENDLEVEL))
                        boss_baby_is_dead = false;
                  }
               } else if(bb && bb.health > 0) {
                  boss_baby_is_dead = false;
               }
            }
         }
         if(boss_baby_is_dead) {
            m_bossDeathInit = level.time;
            if(m_bossLevel == boss_iconofsin && lith_sv_postgame) {
               int nf = __lith_fun;
               if(Lith_UTIL.pData(_pdt_mflg, _mflg_corrupted)) {
                  nf |=  lfun_division;
                  nf &= ~lfun_tainted;
               } else if(!(nf & lfun_division)) {
                  nf |= lfun_tainted;
               }
               CVar.findCVar('__lith_fun').setInt(nf);
            }
         }
      }
   }
}

override void worldThingDamaged(WorldEvent ev) {
   let src = ev.damageSource;
   let dst = ev.thing;
   if(!dst) {
      return;
   }
   let pos = dst.pos.plusZ(dst.height / 2);
   Lith_URANUS.instance().addDamageNum(pos, dst.radius/2, ev.damage, ev.thing);
   if(ev.damageType == 'Bullet' && ev.damage >= 4 && !dst.bNoBlood) {
      double vol = min(ev.damage / 16.0, 1);
      let mo = Actor.spawn("Lith_GoAway", pos);
      mo.a_startSound("body/bullethit", lch_body, volume: vol);
   }
   if(!src || src == dst) {
      return;
   }
   if(Lith_Player(src)) {
      let magnum = Lith_Magnum(src.player.readyWeapon);
      if(magnum) {
         if(dst.health <= 0) {
            magnum.lith_addMarksman();
         } else {
            magnum.lith_addAccurate();
         }
      }
      if(ev.damage > 0) {
         let it = ThinkerIterator.create('Lith_SubAxe');
         for(Lith_SubAxe axe; axe = Lith_SubAxe(it.next());) {
            if(axe.tracer == dst) {
               src.acs_scriptCall("Lith_GiveHealth", int(ceil(ev.damage / 30.0)));
               break;
            }
         }
      }
   } else if(src.countInv("Lith_MonsterID") && (dst.bCountKill || dst.player)) {
      src.acs_scriptCall("Lith_GiveMonsterEXP", ev.damage);
   }
}

override void worldThingDied(WorldEvent ev) {
   let mo = ev.thing;
   if(mo.bCountKill && !mo.bNoBlood && mo.health < mo.getGibHealth()) {
      for(int i = 0; i < 20; i++) {
         let xo = fRandom(-mo.radius,mo.radius);
         let yo = fRandom(-mo.radius,mo.radius);
         let zo = fRandom(         0,mo.height);
         let p = mo.pos + (xo,yo,zo);
         let bl = Actor.spawn("Lith_BloodHitCore", p, ALLOW_REPLACE);
         bl.translation = mo.bloodTranslation;
         if(ev.inflictor) {
            bl.a_face(ev.inflictor);
         }
      }
   }
   int sph = mo.spawnHealth();
   if(mo.bBossSpawned && sph > 50) {
      Lith_BossBrain to;
      int dmg = sph / 50 * random(1, 4);
      double sc = log10(sph);
      for(let it = ThinkerIterator.create("Lith_BossBrain"); (to = Lith_BossBrain(it.next()));) {
         if(to.m_shield > 0) {
            let shot = Actor.spawn("Lith_BossDamage", mo.pos);
            shot.target = mo;
            shot.tracer = to;
            shot.setDamage(dmg);
            shot.scale = (sc, sc);
         }
      }
   }
}

override void worldThingRevived(WorldEvent ev) {
   ev.thing.acs_scriptCall("Lith_ResurrectMonster");
}

override void checkReplacement(ReplaceEvent ev) {
   bool wasFinal = ev.isFinal;
   ev.isFinal = true;
   switch(ev.replacee.getClassName()) {
   // always replace icon of sin objects
   case 'BossBrain': ev.replacement = 'Lith_BossBrain'; return;
   case 'BossEye':   ev.replacement = 'Lith_BossEye';   return;
   case 'SpawnFire': ev.replacement = 'Lith_SpawnFire'; return;
   case 'SpawnShot': ev.replacement = 'Lith_SpawnShot'; return;
   case 'BossTarget': return;
   // special handling for titlemap actors
   case 'Lith_TitleMarine':
      if(Actor.getReplacement('Lith_TitleImp') is 'Lith_GoAway') {
         ev.replacement = 'Lith_GoAway';
      }
      return;
   case 'Lith_TitleImp':
      if(TexMan.checkForTexture("TROOI0", TexMan.Type_Sprite).isValid()) {
         ev.isFinal = wasFinal;
      } else {
         ev.replacement = 'Lith_GoAway';
      }
      return;
   case 'Lith_TitleHellKnight':
      if(TexMan.checkForTexture("BOS2I0", TexMan.Type_Sprite).isValid()) {
         ev.isFinal = wasFinal;
      } else if(TexMan.checkForTexture("BOSSI0", TexMan.Type_Sprite).isValid()) {
         ev.replacement = 'Lith_TitleBaron';
      } else {
         ev.replacement = 'Lith_GoAway';
      }
      return;
   case 'Lith_TitleCyberdemon':
      if(TexMan.checkForTexture("CYBRH0", TexMan.Type_Sprite).isValid()) {
         ev.isFinal = wasFinal;
      } else {
         ev.replacement = 'Lith_GoAway';
      }
      return;
   }
   ev.isFinal = false;
   // game difficulty
   if(m_gameFlags & _gamef_extrahard) {
      switch(ev.replacee.getClassName()) {
      case 'ZombieMan':     ev.replacement = 'Lith_XH_ZombieMan';     return;
      case 'ShotgunGuy':    ev.replacement = 'Lith_XH_ShotgunGuy';    return;
      case 'ChaingunGuy':   ev.replacement = 'Lith_XH_ChaingunGuy';   return;
      case 'DoomImp':       ev.replacement = 'Lith_XH_Imp';           return;
      case 'Demon':         ev.replacement = 'Lith_XH_Demon';         return;
      case 'Spectre':       ev.replacement = 'Lith_XH_Spectre';       return;
      case 'LostSoul':      ev.replacement = 'Lith_XH_LostSoul';      return;
      case 'Fatso':         ev.replacement = 'Lith_XH_Mancubus';      return;
      case 'Arachnotron':   ev.replacement = 'Lith_XH_Arachnotron';   return;
      case 'Cacodemon':     ev.replacement = 'Lith_XH_Cacodemon';     return;
      case 'HellKnight':    ev.replacement = 'Lith_XH_HellKnight';    return;
      case 'BaronOfHell':   ev.replacement = 'Lith_XH_BaronOfHell';   return;
      case 'Revenant':      ev.replacement = 'Lith_XH_Revenant';      return;
      case 'PainElemental': ev.replacement = 'Lith_XH_PainElemental'; return;
      case 'Archvile':      ev.replacement = 'Lith_XH_Archvile';      return;
      case 'Cyberdemon':    ev.replacement = 'Lith_XH_Cyberdemon';    return;
      case 'SpiderMastermind':
         ev.replacement = 'Lith_XH_SpiderMastermind'; return;
      }
   }
   // iwad compatibility
   switch(ev.replacee.getClassName()) {
   case 'MiniZorchRecharge':
   case 'BlasterAmmo':
   case 'GoldWandAmmo':
   case 'MaceAmmo': ev.replacement = 'Clip'; break;
   case 'MiniZorchPack':
   case 'BlasterHefty':
   case 'GoldWandHefty':
   case 'MaceHefty':         ev.replacement = 'ClipBox';        break;
   case 'LargeZorchRecharge':
   case 'CrossbowAmmo':      ev.replacement = 'Shell';          break;
   case 'LargeZorchPack':
   case 'CrossbowHefty':     ev.replacement = 'ShellBox';       break;
   case 'PropulsorZorch':
   case 'PhoenixRodAmmo':    ev.replacement = 'RocketAmmo';     break;
   case 'PropulsorZorchPack':
   case 'ArtiTimeBomb':
   case 'PhoenixRodHefty':   ev.replacement = 'RocketBox';      break;
   case 'PhasingZorch':
   case 'SkullRodAmmo':      ev.replacement = 'Cell';           break;
   case 'PhasingZorchPack':
   case 'ArtiEgg':
   case 'SkullRodHefty':     ev.replacement = 'CellPack';       break;
   case 'Bootspoon':
   case 'Staff':             ev.replacement = 'Fist';           break;
   case 'SuperBootspork':
   case 'Gauntlets':         ev.replacement = 'Chainsaw';       break;
   case 'MiniZorcher':
   case 'GoldWand':          ev.replacement = 'Pistol';         break;
   case 'LargeZorcher':
   case 'Crossbow':          ev.replacement = 'Shotgun';        break;
   case 'SuperLargeZorcher': ev.replacement = 'SuperShotgun';   break;
   case 'RapidZorcher':
   case 'Blaster':           ev.replacement = 'Chaingun';       break;
   case 'ZorchPropulsor':
   case 'PhoenixRod':        ev.replacement = 'RocketLauncher'; break;
   case 'PhasingZorcher':
   case 'Mace':              ev.replacement = 'PlasmaRifle';    break;
   case 'LAZDevice':
   case 'SkullRod':          ev.replacement = 'BFG9000';        break;
   case 'BowlOfVegetables':
   case 'ArtiHealth':        ev.replacement = 'Medikit';        break;
   case 'ArtiInvisibility':  ev.replacement = 'BlurSphere';     break;
   case 'ArtiInvulnerability': ev.replacement = 'InvulnerabilitySphere'; break;
   case 'SuperchargeBreakfast':
   case 'ArtiSuperHealth': ev.replacement = 'SoulSphere';  break;
   case 'ArtiTomeOfPower': ev.replacement = 'Berserk';     break;
   case 'UltraGoggles':
   case 'ArtiTorch':       ev.replacement = 'Infrared';    break;
   case 'Zorchpack':
   case 'BagOfHolding':    ev.replacement = 'Backpack';    break;
   case 'BowlOfFruit':
   case 'CrystalVial':     ev.replacement = 'StimPack';    break;
   case 'SuperChexArmor':
   case 'EnchantedShield': ev.replacement = 'BlueArmor';   break;
   case 'ChexArmor':
   case 'SilverShield':    ev.replacement = 'GreenArmor';  break;
   case 'ComputerAreaMap':
   case 'SuperMap':        ev.replacement = 'AllMap';      break;
   case 'GlassOfWater':    ev.replacement = 'HealthBonus'; break;
   case 'SlimeRepellent':  ev.replacement = 'ArmorBonus';  break;
   case 'SlimeProofSuit':  ev.replacement = 'RadSuit';     break;
   // restore state on default
   default: ev.isFinal = wasFinal; break;
   }
}

override void RenderOverlay(RenderEvent evt) {
   double ftic = level.time - m_bossDeathInit + evt.fracTic;
   if(m_bossDeathInit == 0) {
      PpShader.SetEnabled("Lith_End", false);
   } else if(ftic > 15.0) {
      PpShader.SetEnabled("Lith_End", true);
      PpShader.SetUniform1f("Lith_End", "lith_t", ftic - 15.0);
   }
}

override void networkProcess(ConsoleEvent evt) {
   if(evt.name.left(9) == "Lith_Log:") {
      log(evt.args[0], evt.args[1], evt.name.mid(9));
   }
}

static clearScope Lith_HERMES Instance() {
   return Lith_HERMES(Find('Lith_HERMES'));
}

static clearScope string localize(string nm) {
   if(nm.byteAt(0) == CH_DOLLAR) {
      nm = nm.mid(1);
   }
   string ret = StringTable.localize(nm, false);
   return ret != nm ? ret : "";
}

static int EDataI(Actor mo, int info) {
   switch(info) {
   case _edt_bosslevel:    return instance().m_bossLevel;
   case _edt_paused:       return level.isFrozen();
   case _edt_spawnhealth:  return mo.spawnHealth();
   case _edt_viewheight:   return int(Lith_Player(mo).viewHeight);
   case _edt_attackheight: return int(getAttackHeight(mo));
   case _edt_lightning:    return level.info.flags & LEVEL_STARTLIGHTNING;
   case _edt_windspeed:    return int(Lith_AirThinker.get().m_speed);
   case _edt_windangle:    return int(Lith_UTIL.constDeg(Lith_AirThinker.get().m_angle));

   case _edt_chex:    return gameinfo.gametype & GAME_Chex    != 0;
   case _edt_heretic: return gameinfo.gametype & GAME_Heretic != 0;

   case _edt_rampancy:     return Lith_UTIL.classExists('Robot_Thingo') ? 1 : 0;
   case _edt_legendoom:    return Lith_UTIL.classExists('LDLegendaryMonsterMarker') ? 1 : 0;
   case _edt_colorfulhell: return Lith_UTIL.classExists('CHBoner') ? 1 : 0;

   case _edt_riflegrenade:
      return !Lith_CombatRifle(mo.findInventory("Lith_CombatRifle")).m_grenFire;
   }
   return 0;
}

static string EDataS(Actor mo, int info) {
   switch(info) {
   case _edt_obituary: return instance().m_obituary;
   case _edt_logname:  return instance().m_logName;
   case _edt_bipname:  return instance().m_bipName;
   case _edt_origsky1: return level.info.skyPic1;
   case _edt_origsky2: return level.info.skyPic2;
   case _edt_sky1:     return TexMan.getName(level.skyTexture1);
   case _edt_sky2:     return TexMan.getName(level.skyTexture2);
   case _edt_maphash:  return level.getChecksum();
   }
   return "";
}

static clearScope void print(int level, string s) {
   Console.printfEx(level, s);
}

static double getAirControl() {
   return level.airControl;
}

/* EOF */
