// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

extend class Lith_Player;

override int damageMobj(Actor inflictor, Actor source, int damage, name mod, int flags, double angle) {
   let sv = Lith_HERMES.instance();
   sv.m_dmgWorld = !(inflictor || source);
   sv.m_dmgType  = mod;
   /* due to the fact that railguns can't not damage the player */
   if((source && source.bDontHarmSpecies &&
       source.getSpecies() == 'Lith_Player') ||
      (inflictor && inflictor.bDontHarmSpecies &&
       inflictor.getSpecies() == 'Lith_Player'))
   {
      return 0;
   }
   if(damage > 1) {
      if(countInv("Lith_MegaProtection")) {
         takeInventory("Lith_MegaProtection", damage / 2);
         damage /= 2;
      }
      if(m_DmgFac > 0) damage = max(1, damage * (100 - m_DmgFac) / 100);
   }
   if(m_iFrames) {
      return 0;
   } else if(m_shield && m_shield + health - damage > -spawnHealth() * 2) {
      if(!bInvulnerable && !(player.cheats & CF_GODMODE)) {
         m_shield = max(m_shield - damage, 0);
      }
      return 0;
   }
   /* remove the damage type for world stuff so obituaries are easier
    * to override */
   if(sv.m_dmgWorld || source == self) {
      mod = 'None';
   }
   if(damage > 1) {
      callAcs("Lith_RA_Give", Lith_HERMES.nameToDT(mod));
   }
   if(Lith_StatFx.getInPool("Lith_StatShadowWalker")) {
      damage /= 2.0 + Lith_UTIL.pData(_pdt_attr, at_spc) / 10.0;
   }
   return super.damageMobj(inflictor, source, damage, mod, flags, angle);
}

override void die(Actor source, Actor inflictor, int dmgflags) {
   target = source;
   super.die(null, inflictor, dmgflags);
   let sv = Lith_HERMES.Instance();
   string ob;
   if(source == self) {
      switch(sv.m_dmgType) {
         case 'Shrapnel': ob = "LITH_OB_S_Explosion"; break;
         default:         ob = "(suicide)";           break;
      }
   } else if(source) {
      ob = sv.m_dmgType == 'Melee' ? source.hitObituary : source.obituary;
   } else {
      switch(sv.m_dmgType) {
         case 'Falling':  ob = "(falling)";  break;
         case 'Crush':    ob = "(crush)";    break;
         case 'Exit':     ob = "(exit)";     break;
         case 'Drowning': ob = "(drowning)"; break;
         case 'Slime':    ob = "(slime)";    break;
         case 'Fire':     ob = "(fire)";     break;
         default:         ob = "(default)";  break;
      }
   }
   sv.m_obituary = Lith_HERMES.localize(ob);
   callAcs("Lith_Obituary");
}

/* EOF */
