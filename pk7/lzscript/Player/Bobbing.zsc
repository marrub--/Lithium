// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

extend class Lith_Player;

enum Lith_BobDir {
   _up,
   _down,
};

int m_mbobprv;
int m_mbobpos;
int m_mbobdir;
bool m_noFireBob;

void Lith_BobWeapon() {
   double mang = vel.angle() - angle;
   double mvel = vel.xy.length();

   m_LastVXVel = m_VXVel;
   m_VXVel = clamp(sin(mang) * mvel, -4.0, 4.0);

   m_LastVYVel = m_VYVel;
   m_VYVel = clamp(cos(mang) * mvel, 0.0, 4.0);

   m_LastIPitch = m_IPitch;
   m_LastVPitch = m_VPitch;
   m_IPitch = Lith_UTIL.Lerp(m_IPitch, Pitch, 0.277);
   m_VPitch = Min(m_IPitch - m_LastIPitch, 0.4);

   m_LastIYaw = m_IYaw;
   m_LastVYaw = m_VYaw;
   m_IYaw = Lith_UTIL.AngleLerp(m_IYaw, Angle, 0.277);
   if(m_IYaw - m_LastIYaw ~== 0) {m_VYaw = 0;}
   else                          {m_VYaw = m_IYaw - m_LastIYaw;}
   m_VYaw = clamp(m_VYaw, -20, 20);

   if(Vel.Z - m_LastZVel > double.Epsilon) {
      if(m_LastZVel >= 0) {m_ZVel += Vel.Z;}
      else                {m_ZVel += 10 - m_LastZVel * 4;}
   }

   m_ZVel = Lith_UTIL.Lerp(m_ZVel, 0, 0.277);
   m_LastZVel = Vel.Z;

   m_LastVZVel = m_VZVel;
   m_VZVel = Lith_UTIL.Lerp(m_VZVel, m_ZVel, 0.32);

   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Seven7s)) {
      m_mbobprv = m_mbobpos;
      if(!(vel.length() < 4 ||
           !player.readyweapon ||
           player.readyweapon.bDONTBOB) ||
         m_mbobpos != 0)
      {
         if(m_mbobdir == _up) m_mbobpos++; else m_mbobpos--;
      }
      /**/ if(m_mbobpos < -10) {m_mbobdir = _up;   m_mbobpos = -10;}
      else if(m_mbobpos >  10) {m_mbobdir = _down; m_mbobpos =  10;}
   }
   m_noFireBob = lith_weapons_nofirebob;
}

override vector2 BobWeapon(double ticfrac) {
   if(!Player) return (0, 0);

   let wep = Player.ReadyWeapon;
   if(!wep) return (0, 0);

   // marathon bobbing :P
   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Seven7s)) {
      return (0, (m_mbobpos - m_mbobprv) * ticfrac + m_mbobpos + 5 + clamp(20 - 20 * (pitch + 90) / 180.0, 5, 15));
   }

   // store two positions - one for the previous tick and one for this tick
   // this way the position can be interpolated based on the tic fraction
   vector2 p[2];
   p[0] = (0, 0);
   p[1] = (0, 0);

   // only initialize them if dontbob isn't true
   if(!wep.bDONTBOB) for(int i = 0; i < 2; i++) {
      // create an angle based on the speed of the weapon bobbing and
      // the current tic
      double ang = wep.BobSpeed * 128 * Player.GetWBobSpeed() * (Level.Time - 1 + i) * 0.044;
      double bobtarget = Player.Bob;

      // don't bob when firing if the option is enabled
      if(m_noFireBob && !(Player.WeaponState & WF_WEAPONBOBBING)) {
         bobtarget = 0;
      }

      /*
      // if the weapon is snapping into place when firing,
      // smooth it out
      if(Abs(bobtarget - CurBob) <= 1) {
         CurBob = bobtarget;
      } else {
         double zoom = Max(1.0, Abs(CurBob - bobtarget) / 40);
         if(CurBob > bobtarget) CurBob -= zoom;
         else                   CurBob += zoom;
      }
      */

      double bobx = 0, boby = 0;

      if(/*CurBob*/ bobtarget != 0) {
         // set these to the multiplier for the x and y, which is the
         // current bob strength (CurBob), the weapon's bob range, and
         // the viewbob cvar all combined
         bobx = /*CurBob*/ bobtarget * wep.BobRangeX * ViewBob;
         boby = /*CurBob*/ bobtarget * wep.BobRangeY * ViewBob;

         // do some simple trigonometry to swing the weapon about
         // based on the angle and strength
         switch(wep.BobStyle) {
            case Bob_Alpha:
               bobx *= sin(ang) + cos(ang / 5) / 7;
               boby *= abs(sin(ang));
               break;
            case Bob_Smooth:
            case Bob_Normal:
               bobx *= cos(ang) + sin(ang / 5) / 7;
               boby *= 0.5 * (1 + sin(ang * 2));
               break;
            case Bob_InverseAlpha:
               bobx *= sin(ang) + cos(ang / 5) / 7;
               boby *= 1.0 - abs(sin(ang));
               break;
            case Bob_InverseSmooth:
            case Bob_Inverse:
               bobx *= cos(ang) + sin(ang / 5) / 7;
               boby *= 0.5 * (1 - sin(ang * 2));
               break;
         }
      }

      p[i] = (bobx, boby);
   }

   if(!level.isFrozen()) {
      // interpolate the positions based on the tic fraction
      vector2 interp = Lith_UTIL.vec2Lerp(p[0], p[1], ticfrac);

      // extra factors such as view movement
      interp.x -= Lith_UTIL.Lerp(m_LastVYaw, m_VYaw, ticfrac) / 2;
      interp.y -= Lith_UTIL.Lerp(m_LastVPitch, m_VPitch, ticfrac) * 3;
      interp.y += Lith_UTIL.Lerp(m_LastVZVel, m_VZVel, ticfrac);
      interp.x += Lith_UTIL.Lerp(m_LastVXVel, m_VXVel, ticfrac);
      interp.y += Lith_UTIL.Lerp(m_LastVYVel, m_VYVel, ticfrac);

      return interp;
   } else {
      return p[1];
   }
}

/* EOF */
