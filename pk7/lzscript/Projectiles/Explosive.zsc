// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_ExplosionAfterSmoke : Lith_BulletAfterSmoke {
   double m_fxAmount;
   override void postBeginPlay() {
      super.postBeginPlay();
      scale *= m_fxAmount;
      alpha = 0.1;
   }
}

class Lith_Explosive : Actor;

default {
   ExplosionDamage 128;
   ExplosionRadius -1;
   Lith_Explosive.FxAmount 1.0;
   Lith_Explosive.ExplosionSound "explosion";
}

meta double m_fxAmount;
meta sound m_explosionSound;
property FxAmount: m_fxAmount;
property ExplosionSound: m_explosionSound;

override void markPrecacheSounds() {
   super.markPrecacheSounds();
   markSound(m_explosionSound);
   markSound("marathon/explode");
}

bool checkMarathon() {
   return Lith_UTIL.pData(_pdt_upgrade, UPGR_Seven7s);
}

void lith_a_explodeSound(int chan = lch_body2) {
   double p = fRandom(0.9, 1.1);
   if(checkMarathon()) a_startSound("marathon/explode", chan, pitch: p);
   else                a_startSound(m_explosionSound,   chan, pitch: p);
}

state lith_a_jumpExplosion() {
   if(checkMarathon()) return resolveState("ExplodeMarathon");
   else                return resolveState("Explode");
}

state lith_a_doExplosion() {
   int numEmbers    = int(fRandom(10.0, 20.0) * m_fxAmount);
   int numParticles = int(50.0 * m_fxAmount);
   double emberRadius = m_fxAmount;
   if(m_fxAmount < 1.0) {
      emberRadius *= 2.0;
   }
   for(int i = 0; i < numEmbers; i++) {
      a_spawnItemEx("Lith_HotEmber",
                    fRandom(-4, 4) * emberRadius,
                    fRandom(-4, 4) * emberRadius,
                    fRandom(-4, 4) * emberRadius,

                    fRandom(-8, 8)  * emberRadius,
                    fRandom(-8, 8)  * emberRadius,
                    fRandom(-4, 14) * emberRadius,

                    0, SXF_NOCHECKPOSITION);
   }

   for(int i = 0; i < numParticles; i++) {
      a_spawnParticle("FFFF00", SPF_FULLBRIGHT | SPF_RELATIVE, 25, 4, 0,
                      fRandom(-8,8) * emberRadius,
                      fRandom(-8,8) * emberRadius,
                      fRandom(-2,2) * emberRadius,

                      fRandom( 0,1)  * emberRadius,
                      fRandom(-5,5)  * emberRadius,
                      fRandom( 5,10) * emberRadius,

                      0, 0, fRandom(-0.5, -3),
                      1.0, -1);

      a_spawnParticle("444444", SPF_FULLBRIGHT | SPF_RELATIVE, 25, 4, 0,
                      fRandom(-8,8) * emberRadius,
                      fRandom(-8,8) * emberRadius,
                      fRandom(-2,2) * emberRadius,

                      fRandom( 0,1)  * emberRadius,
                      fRandom(-5,5)  * emberRadius,
                      fRandom( 5,10) * emberRadius,

                      0, 0, fRandom(-0.5, -3),
                      1.0, -1);
   }

   if(frandom[lith_explosionsmoke](0, 1.0) < m_fxAmount) {
      let smoke = Lith_ExplosionAfterSmoke(level.spawnVisualThinker('Lith_ExplosionAfterSmoke'));
      smoke.pos = pos +
         (fRandom(-1,1) * emberRadius,
          fRandom(-1,1) * emberRadius,
          fRandom(-2,2) * emberRadius);
      smoke.vel = (fRandom(-0.5,0.5) * emberRadius,
                   fRandom(-0.5,0.5) * emberRadius,
                   fRandom(-0.2,0.2) * emberRadius);
      smoke.m_fxAmount = m_fxAmount;
   }

   bNoGravity = true;
   return lith_a_jumpExplosion();
}

void lith_a_scaleExplosion() {
   scale *= 1.03;
}

states {
Spawn:
   TNT1 A 0;
Death:
   TNT1 A 0 {
      A_Explode();
      Lith_A_ExplodeSound();
      return Lith_A_DoExplosion();
   }
   stop;
Explode:
   MEXP AB 1 bright light("Lith_Explode1") lith_a_scaleExplosion;
   MEXP CCDD 1 bright light("Lith_Explode2") lith_a_scaleExplosion;
   MEXP EEEFFF 1 bright light("Lith_Explode3") lith_a_scaleExplosion;
   stop;
ExplodeMarathon:
   MA7G BC 4 bright light("Lith_Explode1");
   MA7G DE 4 bright light("Lith_Explode2");
   MA7G FG 4 bright light("Lith_Explode3");
   stop;
}

/* EOF */
