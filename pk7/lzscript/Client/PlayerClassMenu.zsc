// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class ListMenuItemLith_PlayerDisplay : ListMenuItemPlayerDisplay {
   void init(ListMenuDescriptor menu) {
      super.init(menu, 0, 0, "black", "green");
   }
   private static bool showAsStan(class<PlayerPawn> pct) {
      return pct is "Lith_MarinePlayer" && !(__lith_fun & lfun_lane);
   }
   override void draw(bool selected, ListMenuDescriptor desc) {
      if(mMode == 0 && updatePlayerClass()) {
         let pct = (class<PlayerPawn>)(mPlayerClass.type);
         let pcn = pct.getClassName();
         let pcl = getDefaultByType(pct);
         let por = Lith_URANUS.getTex(pcl.portrait);
         let col = Lith_HERMES.localize(pcn .. "_Col");
         let nsf = showAsStan(pct) ? "_DeN" : "_Nam";
         let psf = showAsStan(pct) ? "_DPr" : "_Pro";
         let nam = Lith_HERMES.localize(pcn .. nsf);
         let pro = Lith_HERMES.localize(pcn .. psf);
         let dsc = Lith_HERMES.localize(pcn .. "_Dsc");
         let txt = Lith_HERMES.localize(pcn);
         let cr  = Font.findFontColor(col);
         let [porx, pory] = TexMan.getSize(por);
         int scrw  = Screen.getWidth();
         int scrh  = Screen.getHeight();
         let scale = double(scrh) / pory;
         let sc240 = 240.0 / pory;
         let xy    = Screen.virtualToRealCoords((320-(porx*sc240),0), (scrw, scrh), (320, 240));
         int x     = int(xy.x);
         int dw    = int(porx*scale);
         int dh    = int(pory*scale);
         Font bigf = menuDelegate.pickFont("bigupper");
         Font midf = menuDelegate.pickFont("lmidfont");
         Font smlf = menuDelegate.pickFont("smallfont");
         Font trmf = menuDelegate.pickFont("ltrmfont");
         Screen.drawTexture(
            por, true, x, 0,
            DTA_KeepRatio,true,
            DTA_DestWidth,dw,
            DTA_DestHeight,dh);
         if(cr == Font.CR_BLACK) {
            nam = "???";
            pro = "???";
            dsc = "NOT IMPLEMENTED";
            Screen.drawTexture(
               por, true, x, 0,
               DTA_KeepRatio,true,
               DTA_DestWidth,dw,
               DTA_DestHeight,dh,
               DTA_FillColor,color("black"),
               DTA_Alpha,0.96);
         }
         Lith_URANUS.drawBack(168-2, 75+59-2,  150+2, 32+2, (0, 0), _bk_tl1);
         Lith_URANUS.drawBack(104-2, 75+108-2, 206+2, 58+2, (0, 0), _bk_br3);
         Screen.drawText(bigf, cr, 168, 75+59, txt, DTA_Clean, true);
         Screen.drawText(midf, cr, 168, 75+73, nam, DTA_Clean, true);
         Screen.drawText(smlf, cr, 317-smlf.stringWidth(pro), 75+81, pro, DTA_Clean, true);
         Screen.drawText(trmf, cr, 104, 75+108, dsc, DTA_Clean, true);
      }
      Lith_URANUS.drawBack(14-2, 55-2, 74+2, 108+2, (0, 0), _bk_tl1br2);
   }
}

class Lith_PlayerClassMenu : ListMenu;

override void init(Menu parent, ListMenuDescriptor desc) {
   super.init(parent, desc);
   foreach(item : mDesc.mItems) {
      let sel = ListMenuItemTextItem(item);
      if(sel) {
         sel.mColor = Font.findFontColor(Lith_HERMES.localize(sel.mText .. "_Col"));
      }
   }
}

/* EOF */
