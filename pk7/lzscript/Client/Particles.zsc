// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

extend class Lith_URANUS;

transient FSpawnParticleParams pp_binary;
transient FSpawnParticleParams pp_equation;
transient FSpawnParticleParams pp_lightspark_center;
transient FSpawnParticleParams pp_kampilan_swing;
transient FSpawnParticleParams pp_700e_laser;
transient FSpawnParticleParams pp_4bore_dmg_buff;
transient FSpawnParticleParams pp_rocket_fire;
transient FSpawnParticleParams pp_rocket_smoke;
transient FSpawnParticleParams pp_rems_spark;
transient FSpawnParticleParams pp_rems_bullet;
transient FSpawnParticleParams pp_rems_spray;

void particleRegister() {
   pp_rems_spray.color1     = "purple";
   pp_rems_spray.style      = style_add;
   pp_rems_spray.flags      = spf_fullbright;
   pp_rems_spray.accel      = (0.0,0.0,-0.02);
   pp_rems_spray.lifetime   = 40;
   pp_rems_spray.size       = 24;
   pp_rems_spray.sizeStep   = -0.01;
   pp_rems_spray.startAlpha = 1.0;
   pp_rems_spray.fadeStep   = -1;
   pp_rems_spark.color1     = "purple";
   pp_rems_spark.texture    = getTex("PLSEE0");
   pp_rems_spark.style      = style_add;
   pp_rems_spark.flags      = spf_fullbright;
   pp_rems_spark.accel      = (0.0,0.0,-0.05);
   pp_rems_spark.startAlpha = 0.98;
   pp_rems_spark.fadeStep   = -1;
   pp_rems_bullet.color1     = "white";
   pp_rems_bullet.texture    = getTex("BLLTY0");
   pp_rems_bullet.style      = style_add;
   pp_rems_bullet.lifetime   = 5;
   pp_rems_bullet.size       = 6;
   pp_rems_bullet.startAlpha = 0.5;
   pp_rems_bullet.fadeStep   = -1;
   pp_rocket_fire.color1     = "white";
   pp_rocket_fire.texture    = getTex("MA7GH0");
   pp_rocket_fire.style      = style_add;
   pp_rocket_fire.lifetime   = 5;
   pp_rocket_fire.flags      = spf_fullbright;
   pp_rocket_fire.sizeStep   = -3;
   pp_rocket_fire.startAlpha = 1.0;
   pp_rocket_fire.fadeStep   = 0.1;
   pp_rocket_smoke.color1     = "white";
   pp_rocket_smoke.texture    = getTex("#ESMA0");
   pp_rocket_smoke.style      = style_add;
   pp_rocket_smoke.lifetime   = 20;
   pp_rocket_smoke.sizeStep   = 0.015;
   pp_rocket_smoke.startAlpha = 1.0;
   pp_rocket_smoke.fadeStep   = -1;
   pp_4bore_dmg_buff.texture    = getTex("ZAP1D0");
   pp_4bore_dmg_buff.style      = style_add;
   pp_4bore_dmg_buff.flags      = spf_fullbright;
   pp_4bore_dmg_buff.lifetime   = 24;
   pp_4bore_dmg_buff.size       = 0.5;
   pp_4bore_dmg_buff.startAlpha = 0.75;
   pp_4bore_dmg_buff.fadeStep   = -1;
   pp_700e_laser.color1     = "white";
   pp_700e_laser.texture    = getTex("#ELAA0");
   pp_700e_laser.style      = style_add;
   pp_700e_laser.lifetime   = 21;
   pp_700e_laser.size       = 3;
   pp_700e_laser.sizeStep   = -0.14;
   pp_700e_laser.fadeStep   = -1;
   pp_kampilan_swing.style      = style_add;
   pp_kampilan_swing.lifetime   = 35;
   pp_kampilan_swing.size       = 12;
   pp_kampilan_swing.startAlpha = 1.0;
   pp_kampilan_swing.fadeStep   = -1;
   pp_lightspark_center.style      = style_add;
   pp_lightspark_center.texture    = getTex("#LSPE0");
   pp_lightspark_center.lifetime   = 10;
   pp_lightspark_center.startAlpha = 0.25;
   pp_lightspark_center.fadeStep   = 0.001;
   pp_equation.color1     = "white";
   pp_equation.style      = style_normal;
   pp_equation.lifetime   = 70;
   pp_equation.startAlpha = 1.0;
   pp_equation.fadeStep   = -1;
   pp_equation.flags      = SPF_ROLL;
   pp_equation.startRoll  = 180;
   pp_binary.color1     = "white";
   pp_binary.style      = style_normal;
   pp_binary.lifetime   = 35;
   pp_binary.startAlpha = 1.0;
   pp_binary.fadeStep   = -1;
   pp_binary.flags      = SPF_ROLL;
   pp_binary.startRoll  = 180;
}

void particleRemsSpray(Actor orig, Actor targ) {
   let op   = orig.pos.plusZ(orig.height / 2);
   let tp   = targ.pos.plusZ(targ.height / 2);
   let vec  = tp - op;
   let dist = vec.length();
   vec = vec / dist;
   for(int i = 0; i < dist / 4; ++i) {
      vector3 pos = op + vec * (dist / 4 * i);
      Lith_UTIL.particlePosVel(pp_rems_spray, pos);
      level.spawnParticle(pp_rems_spray);
   }
}

void particleRemsSpark(PlayerPawn mo) {
   let vp = mo.pos.plusZ(mo.viewHeight);
   for(int i = 0, j = int(uiRandom(11,13)); i < j; i++) {
      pp_rems_spark.lifetime = int(uiRandom(8, 24));
      pp_rems_spark.size = uiRandom(0.5, 1.1);
      Lith_UTIL.particlePosVel(
         pp_rems_spark,
         vp+(uiRandom(-1,1),uiRandom(-1,1),uiRandom(-1,1)),
         (mo.angle+uiRandom(-10,20), mo.pitch+uiRandom(-15,15)),
         distance: uiRandom(8,24),
         vel: (1,1,mo.vel.z*1.5+uiRandom(-1,1)),
         vel_angles: (mo.angle-uiRandom(-2,2), mo.pitch-uiRandom(-2,2)),
         vel_distance: uiRandom(-4, 4));
      level.spawnParticle(pp_rems_spark);
   }
}

void particleRemsBullet(vector3 pos) {
   Lith_UTIL.particlePosVel(pp_rems_bullet, pos);
   level.spawnParticle(pp_rems_bullet);
}

void particleRocketTrail(Actor mo) {
   let pos = mo.pos.plusZ(4);
   let mv  = Lith_UTIL.vecToAngles(mo.vel / mo.vel.length());
   let ma  = Lith_UTIL.invertDeg(mo.angle);
   let mp  = Lith_UTIL.invertDeg(mv.y);
   let va  = ma+uiRandom(-2,2);
   let vp  = mp+uiRandom(-2,2);
   pp_rocket_fire.size  =
   pp_rocket_smoke.size = 10 * (mo.scale.x / 0.7);
   Lith_UTIL.particlePosVel(
      pp_rocket_smoke,
      pos, (va, vp), distance: uiRandom(16,32),
      vel: (1,1,1),
      vel_angles: (va, vp),
      vel_distance: uiRandom(0.1, 0.7));
   level.spawnParticle(pp_rocket_smoke);
   Lith_UTIL.particlePosVel(
      pp_rocket_fire,
      pos, (ma, mp), distance: 32,
      vel: (1,1,1),
      vel_angles: (va, vp),
      vel_distance: uiRandom(0.1, 0.7));
   level.spawnParticle(pp_rocket_fire);
}

void particle4BoreDamageBuff(vector3 pos, color cr) {
   pp_4bore_dmg_buff.color1 = cr;
   pp_4bore_dmg_buff.sizeStep = uiRandom(3, 9);
   Lith_UTIL.particlePosVel(pp_4bore_dmg_buff, pos);
   level.spawnParticle(pp_4bore_dmg_buff);
}

void particle700eLaserTrace(vector3 pos, double alpha) {
   pp_700e_laser.startAlpha = alpha;
   Lith_UTIL.particlePosVel(pp_700e_laser, pos);
   level.spawnParticle(pp_700e_laser);
}

void particle700eLaser(PlayerPawn mo, double p, double vp) {
   let vp = mo.pos.plusZ(vp);
   let mp = mo.pitch - p;
   let ma = (mo.angle - 18, mp-4);
   let va = (mo.angle + 18, mp-8);
   pp_700e_laser.startAlpha = 0.75;
   for(int i = 0; i < 5; ++i) {
      Lith_UTIL.particlePosVel(
         pp_700e_laser,
         vp, ma, distance: 16,
         vel: (i,i,i),
         vel_angles: va,
         vel_distance: 0.14);
      level.spawnParticle(pp_700e_laser);
   }
}

void particleKampilanSwing(Actor mo, color cr, bool left) {
   for(int i = 0; i < 28; ++i) {
      let ii = ((left ? 0 : -28) + i - 14) * 6.0;
      pp_kampilan_swing.color1 = i & 7 == 0 ? color("blue") : cr;
      Lith_UTIL.particlePosVel(
         pp_kampilan_swing,
         mo.pos, (mo.angle + ii, ii), distance: 8,
         vel: (1,1,1),
         vel_angles: (uiRandom(0, 360), uiRandom(0, 360)),
         vel_distance: 0.07);
      pp_kampilan_swing.accel = pp_kampilan_swing.vel * 0.5;
      level.spawnParticle(pp_kampilan_swing);
   }
}

void particleLightsparkCenter(vector3 pos, color cr, double rad) {
   pp_lightspark_center.color1 = cr;
   pp_lightspark_center.pos = pos;
   pp_lightspark_center.vel = (uiRandom(-0.07, 0.07),uiRandom(-0.07, 0.07),uiRandom(-0.07, 0.07));
   pp_lightspark_center.size = rad;
   level.spawnParticle(pp_lightspark_center);
}

void particleEquation(vector3 pos) {
   pp_equation.pos = pos;
   pp_equation.vel = (uiRandom(-0.07, 0.07),uiRandom(-0.07, 0.07),uiRandom(-0.07, 0.07));
   pp_equation.size = uiIRandom(24, 48);
   pp_equation.texture = getTex(":Equations:" .. uiIRandom(1, 18));
   level.spawnParticle(pp_equation);
}

void particleBinary(vector3 pos) {
   pp_binary.pos = pos;
   pp_binary.vel = (uiRandom(-0.07, 0.07),uiRandom(-0.07, 0.07),uiRandom(-0.07, 0.07));
   pp_binary.size = uiIRandom(12, 24);
   pp_binary.texture = getTex("fonts/lbigfont/3" .. uiIRandom(0, 1) .. ".png");
   level.spawnParticle(pp_binary);
}

/* EOF */
