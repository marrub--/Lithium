// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

enum Lith_VirtualCoordFlags {
   _vfl_keepRatio,
   _vfl_vBottom,
}

extend class Lith_URANUS;

enum XAlign {
   _xcl = 0 << 24,
   _xll = 1 << 24,
   _xrl = 2 << 24,
   _xrr = 3 << 24,
   _xcc = 4 << 24,
   _xlc = 5 << 24,
   _xrc = 6 << 24,
   _xlr = 7 << 24,
   _xcr = 8 << 24,
}

enum YAlign {
   _yc = 0 << 24,
   _yt = 1 << 24,
   _yb = 2 << 24,
}

enum DrawType {
   _type_clipSet,
   _type_clipClear,
   _type_setSize,
   _type_line,
   _type_sprite,
   _type_spriteAlpha,
   _type_spriteStencil,
   _type_spriteStencilAlpha,
   _type_text,
   _type_textAlpha,
   _type_rect,
   _type_fill,
}

/* 48 bytes */
struct DrawData {
   int       type;       /* 4 bytes */
   uint      tpt, tsz;   /* 8 bytes */
   int16     x, y, z, w; /* 8 bytes */
   int16     u, v, s, t; /* 8 bytes */
   uint      c;          /* 4 bytes */
   float     a;          /* 4 bytes (DON'T CHANGE THIS ONE!) */
   textureId tex;        /* 4 bytes */
   Font      fnt;        /* 8 bytes */
}

struct FadeMsg {
   uint8 fade;
   uint8 time;
   uint8 fSub;
   uint8 alph;
}

const _dptr_max = 10000;
const _tptr_max = 65535;
const _fmsg_max = 255;

DrawData[_dptr_max] m_d;
string  [_tptr_max] m_txt;
int     [_tptr_max] m_lnx;
FadeMsg [_fmsg_max] m_fadeMsg;
int                 m_tPtr, m_dPtr;
bool                m_noDraw;
int                 m_wrapX;

Font m_lSmlFont, m_lMidFont, m_lTrmFont, m_lBigFont;

transient Shape2D          m_rectShape;
transient Shape2DTransform m_rectTransform;

static clearScope DrawData getDt(DrawData dt) {
   return dt;
}

ui void drawAllData(RenderEvent evt) {
   vector2 sc = (320, 240);
   for(int i = 0; i < m_dPtr; i++) {
      let d = getDt(m_d[i]);
      switch(d.Type) {
      case _type_clipSet:
         setClip(d.X, d.Y, d.Z, d.W, sc);
         break;
      case _type_clipClear:
         Screen.clearClipRect();
         break;
      case _type_setSize:
         sc = (d.x, d.y);
         break;
      case _type_line:
         drawLn(d.X, d.Y, d.Z, d.W, d.C, sc);
         break;
      case _type_sprite:
         Screen.drawTexture(d.Tex, false, d.X, d.Y,
                            DTA_VirtualWidthF,sc.x, DTA_VirtualHeightF,sc.y,
                            DTA_TopOffset,0, DTA_LeftOffset,0,
                            DTA_LegacyRenderStyle,d.Z,
                            DTA_SrcX,d.u, DTA_SrcY,d.v,
                            DTA_SrcWidth,d.s, DTA_SrcHeight,d.t,
                            DTA_DestWidth,d.s, DTA_DestHeight,d.t);
         break;
      case _type_spriteAlpha:
         Screen.drawTexture(d.Tex, false, d.X, d.Y,
                            DTA_VirtualWidthF,sc.x, DTA_VirtualHeightF,sc.y,
                            DTA_TopOffset,0, DTA_LeftOffset,0,
                            DTA_LegacyRenderStyle,d.Z,
                            DTA_Alpha,d.A,
                            DTA_SrcX,d.u, DTA_SrcY,d.v,
                            DTA_SrcWidth,d.s, DTA_SrcHeight,d.t,
                            DTA_DestWidth,d.s, DTA_DestHeight,d.t);
         break;
      case _type_spriteStencil:
         Screen.drawTexture(d.Tex, false, d.X, d.Y,
                            DTA_VirtualWidthF,sc.x, DTA_VirtualHeightF,sc.y,
                            DTA_TopOffset,0, DTA_LeftOffset,0,
                            DTA_FillColor,d.C,
                            DTA_SrcX,d.u, DTA_SrcY,d.v,
                            DTA_SrcWidth,d.s, DTA_SrcHeight,d.t,
                            DTA_DestWidth,d.s, DTA_DestHeight,d.t);
         break;
      case _type_spriteStencilAlpha:
         Screen.drawTexture(d.Tex, false, d.X, d.Y,
                            DTA_VirtualWidthF,sc.x, DTA_VirtualHeightF,sc.y,
                            DTA_TopOffset,0, DTA_LeftOffset,0,
                            DTA_Alpha,d.A, DTA_FillColor,d.C,
                            DTA_SrcX,d.u, DTA_SrcY,d.v,
                            DTA_SrcWidth,d.s, DTA_SrcHeight,d.t,
                            DTA_DestWidth,d.s, DTA_DestHeight,d.t);
         break;
      case _type_text:
         if(d.U == 1) {
            /* outline */
            for(uint ln = 0; ln < d.tsz; ln++) {
               for(int j = 0; j < 4; ++j) {
                  Screen.drawText(d.Fnt, d.C,
                                  d.X-m_lnx[d.tpt + ln]+(j<2?-1:1),
                                  d.Y+d.W*ln+(j&1?-1:1),
                                  m_txt[d.tpt + ln],
                                  DTA_VirtualWidthF,sc.x,
                                  DTA_VirtualHeightF,sc.y,
                                  DTA_LegacyRenderStyle,STYLE_Stencil,
                                  DTA_Color,0xFF000000);
               }
            }
         }
         for(uint ln = 0; ln < d.tsz; ln++) {
            Screen.drawText(d.Fnt, d.C,
                            d.X-m_lnx[d.tpt + ln], d.Y+d.W*ln,
                            m_txt[d.tpt + ln],
                            DTA_VirtualWidthF,sc.x, DTA_VirtualHeightF,sc.y,
                            DTA_LegacyRenderStyle,d.Z);
         }
         break;
      case _type_textAlpha:
         for(uint ln = 0; ln < d.tsz; ln++) {
            Screen.drawText(d.Fnt, d.C,
                            d.X-m_lnx[d.tpt + ln], d.Y+d.W*ln,
                            m_txt[d.tpt + ln],
                            DTA_VirtualWidthF,sc.x, DTA_VirtualHeightF,sc.y,
                            DTA_Alpha,d.A,
                            DTA_LegacyRenderStyle,d.Z);
         }
         break;
      case _type_rect:
         drawRect(d.X, d.Y, d.Z, d.W, d.C, sc, d.U);
         break;
      case _type_fill:
         drawRect(0, 0, Screen.getWidth(), Screen.getHeight(), d.C, (Screen.getWidth(), Screen.getHeight()));
         break;
      }
   }
   Screen.clearClipRect();
}

static int LA(int wrapWidth, string s, string fnt) {
   let r = instance();
   let fon = r.fntAny(fnt);
   let brl = fon.breakLines(s, wrapWidth ? wrapWidth : int.max);
   int lny = fon.getHeight() * brl.count();
   int lnx = 0;
   for(int i = 0; i < brl.count(); i++) {
      let lnw = brl.stringWidth(i);
      if(lnx < lnw) lnx = lnw;
   }
   return (lnx & 0xFFFF) | ((lny & 0xFFFF) << 16);
}

static int LB(string t) {
   let tx = getTex(t);
   let [sx, sy] = TexMan.GetSize(tx);
   return (sx & 0xFFFF) | ((sy & 0xFFFF) << 16);
}

static void LZ(int w, int h) {
   let r = instance();
   let d = getDt(r.m_d[r.m_dPtr++]);
   d.Type = _type_setSize;
   d.X = w;
   d.Y = h;
}

static void LF(int fnum, int time, int speed, double alpha) {
   let r = instance();
   r.m_fadeMsg[fnum].Time = time;
   r.m_fadeMsg[fnum].FSub = speed;
   r.m_fadeMsg[fnum].Alph = int(alpha * 255.0);
   r.m_fadeMsg[fnum].Fade = 255;
}

static bool LX(int num) {
   let r = instance();
   return r.m_fadeMsg[num].Fade > 0 && r.m_fadeMsg[num].Alph > 0;
}

static int LY(int num) {
   let r = instance();
   return int(r.m_fadeMsg[num].Fade / 255.0 *
              r.m_fadeMsg[num].Alph / 255.0 *
              255.0);
}

static void LL(int x, int y, int z, int w, color c = 0) {
   let r = instance();
   if(r.m_noDraw) return;
   let d = getDt(r.m_d[r.m_dPtr++]);
   d.Type = _type_line;
   d.X = x;
   d.Y = y;
   d.Z = z;
   d.W = w;
   d.C = c;
}

static void LS(string tex, int xx, int yy, int flags = 0, double anum = 0.0, color cr = 0, int srcpos = 0, int srcsize = 0) {
   let r = instance();
   if(r.m_noDraw) return;
   int  x = xx & 0x00FFFFFF;
   int  y = yy & 0x00FFFFFF;
   int xa = xx & 0x7F000000;
   int ya = yy & 0x7F000000;
   let d = getDt(r.m_d[r.m_dPtr]);
   if(flags & _u_fade) {
      d.A  = r.m_fadeMsg[int(anum)].fade / 255.0;
      d.A *= r.m_fadeMsg[int(anum)].alph / 255.0;
   } else if(flags & _u_alpha) {
      d.A = clamp(anum, 0.0, 1.0);
   } else {
      d.A = 1.0;
   }
   if(d.A < 0.001) {
      return;
   }
   ++r.m_dPtr;
   d.Type = d.A < 1.0 ? _type_spriteAlpha : _type_sprite;
   if(flags & _u_add) {
      d.Z = STYLE_Add;
   } else if(d.Type == _type_spriteAlpha) {
      d.Z = STYLE_Translucent;
   } else {
      d.Z = STYLE_Normal;
   }
   if(flags & _u_color) {
      if(d.Type == _type_spriteAlpha) {
         d.Type = _type_spriteStencilAlpha;
      } else {
         d.Type = _type_spriteStencil;
      }
      d.C = cr;
   }
   d.Tex = getTex(tex);
   let [sx, sy] = TexMan.getSize(d.Tex);
   if(flags & _u_clip) {
      d.u = (srcpos  & 0xFFFF0000) >> 16;
      d.v =  srcpos  & 0x0000FFFF;
      d.s = (srcsize & 0xFFFF0000) >> 16;
      d.t =  srcsize & 0x0000FFFF;
   } else {
      d.u = 0;
      d.v = 0;
      d.s = sx;
      d.t = sy;
   }
   switch(xa) {
   default:
   case _xll: d.X = x;          break;
   case _xcl: d.X = x - sx / 2; break;
   case _xrl: d.X = x - sx;     break;
   }
   switch(ya) {
   default:
   case _yt: d.Y = y;          break;
   case _yc: d.Y = y - sy / 2; break;
   case _yb: d.Y = y - sy;     break;
   }
}

static void LT(string txt, string fnt, int xx, int yy, int cr, int flags = 0, double anum = 0.0, int ww = 0) {
   let r = instance();
   if(r.m_noDraw || !txt.length()) return;
   double a = 1.0;
   if(flags & _u_fade) {
      a  = r.m_fadeMsg[int(anum)].fade / 255.0;
      a *= r.m_fadeMsg[int(anum)].alph / 255.0;
   } else if(flags & _u_alpha) {
      a = clamp(anum, 0.0, 1.0);
   }
   if(a < 0.001) {
      return;
   }
   int  x = xx & 0x00FFFFFF;
   int  y = yy & 0x00FFFFFF;
   int xa = xx & 0x7F000000;
   int ya = yy & 0x7F000000;
   let d = getDt(r.m_d[r.m_dPtr++]);
   d.A    = a;
   d.Type = d.A < 1.0 ? _type_textAlpha : _type_text;
   if(flags & _u_add) {
      d.Z = STYLE_Add;
   } else if(d.Type == _type_textAlpha) {
      d.Z = STYLE_Translucent;
   } else {
      d.Z = STYLE_Normal;
   }
   d.C = cr;
   int lnx = 0;
   int wrapWidth = int.max;
   if(xa == _xll || xa == _xcl || xa == _xrl) {
      if(ww > 0) {
         wrapWidth = ww;
      } else if(xa == _xll && r.m_wrapX >= 0) {
         wrapWidth = r.m_wrapX - x;
      }
   }
   d.Fnt = r.fntAny(fnt, flags & _u_no_unicode);
   d.W   = d.Fnt.GetHeight();
   let brl = d.Fnt.BreakLines(txt, wrapWidth);
   d.tsz = brl.Count();
   d.tpt = r.m_tPtr;
   r.m_tPtr += d.tsz;
   for(uint i = 0; i < d.tsz; i++) {
      r.m_txt[d.tpt + i] = brl.stringAt(i);
      int lnw = brl.stringWidth(i);
      if(lnx < lnw) {
         lnx = lnw;
      }
      switch(xa) {
      default:
      case _xcl: case _xll: case _xrl: r.m_lnx[d.tpt + i] = 0;       break;
      case _xcr: case _xlr: case _xrr: r.m_lnx[d.tpt + i] = lnw;     break;
      case _xcc: case _xlc: case _xrc: r.m_lnx[d.tpt + i] = lnw / 2; break;
      }
   }
   switch(xa) {
   default:
   case _xcc: case _xll: case _xrr: d.x = x;           break;
   case _xcr: case _xlc:            d.x = x + lnx / 2; break;
   case _xcl: case _xrc:            d.x = x - lnx / 2; break;
   case _xlr:                       d.x = x + lnx;     break;
   case _xrl:                       d.x = x - lnx;     break;
   }
   switch(ya) {
   default:
   case _yt: d.Y = y;                   break;
   case _yc: d.Y = y - d.W * d.tsz / 2; break;
   case _yb: d.Y = y - d.W * d.tsz;     break;
   }
   if(flags & _u_outline) {
      d.U = 1;
   }
}

static void LC(int x = 0, int y = 0, int w = 0, int h = 0, int ww = 0) {
   let r = instance();
   let d = getDt(r.m_d[r.m_dPtr]);
   if(w <= 0 || h <= 0 || y + h <= 0) {
      r.m_noDraw = true;
      return;
   }
   ++r.m_dPtr;
   d.Type = _type_clipSet;
   d.X = x;
   d.Y = y;
   d.Z = w;
   d.W = h;
   if(ww) {
      r.m_wrapX = x + ww;
   } else {
      r.m_wrapX = -1;
   }
}

static void LU() {
   let r = instance();
   bool wasNoDraw = r.m_noDraw;
   r.m_noDraw = false;
   r.m_wrapX = -1;
   if(!wasNoDraw) {
      let d = getDt(r.m_d[r.m_dPtr++]);
      d.Type = _type_clipClear;
   }
}

static void LR(int x, int y, int w, int h, color cr, int flg) {
   let r = instance();
   if(r.m_noDraw) return;
   let d = getDt(r.m_d[r.m_dPtr++]);
   d.Type = _type_rect;
   d.X = x;
   d.Y = y;
   d.Z = w;
   d.W = h;
   d.U = flg & _u_add ? STYLE_ADD : STYLE_TRANSLUCENT;
   d.C = cr;
}

static void LW(color cr) {
   let r = instance();
   if(r.m_noDraw) return;
   let d = getDt(r.m_d[r.m_dPtr++]);
   d.Type = _type_fill;
   d.C = cr;
}

void tickDraw() {
   m_dPtr = 0;
   m_tPtr = 0;
   for(int i = 0; i < m_fadeMsg.size(); i++) {
      if(m_fadeMsg[i].fade) {
         if(!m_fadeMsg[i].time) {
            m_fadeMsg[i].fade =
               Max(int(m_fadeMsg[i].fade) - int(m_fadeMsg[i].fSub), 0);
         } else {
            m_fadeMsg[i].time--;
         }
      }
   }
}

ui static void setClip(double px, double py, double sx, double sy, vector2 vsz, uint vfl = 0) {
   let [p, s] = anyPosScale((px, py), (sx, sy), vsz, vfl);
   Screen.setClipRect(int(p.x), int(p.y), int(s.x), int(s.y));
}

ui void drawRect(double px, double py, double sx, double sy, color cr, vector2 vsz, uint vfl = 0, int style = STYLE_TRANSLUCENT) {
   let [p, s] = anyPosScale((px, py), (sx, sy), vsz, vfl);
   m_rectTransform.from2D(s.x, 0, 0, s.y, p.x, p.y);
   m_rectShape.setTransform(m_rectTransform);
   Screen.drawShapeFill(color(0xFF, cr.b, cr.g, cr.r), cr.a/255.0, m_rectShape);
}

ui static void drawLn(double x1, double y1, double x2, double y2, color cr, vector2 vsz, uint vfl = 0, double size = 1.0) {
   double ln1, ln2;
   ln1 = (x2 - x1, y2 - y1).length();
   if(ln1) {
      vector2 p1, p2;
      p1 = anyPos((x1, y1), vsz, vfl);
      p2 = anyPos((x2, y2), vsz, vfl);
      ln2 = (p2 - p1).length();
      let scale = ln2/ln1 * size;
      if(scale <= 1.05) {
         Screen.drawLine(p1.x, p1.y, p2.x, p2.y, cr, cr.a);
      } else {
         Screen.drawThickLine(p1.x, p1.y, p2.x, p2.y, scale, cr, cr.a);
      }
   }
}

static clearScope textureId getTex(string tex) {
   if(tex.byteAt(0) == CH_COLON) {
      tex.replace(":", "/");
      tex = "lgfx" .. tex .. ".png";
   }
   return TexMan.checkForTexture(tex, TexMan.Type_Any);
}

clearScope static vector2 cleanPos(vector2 p) {
   return ((p.x - 160.0) * cleanXFac + Screen.getWidth()  * 0.5,
           (p.y - 100.0) * cleanYFac + Screen.getHeight() * 0.5);
}

clearScope static vector2 cleanScale(vector2 s) {
   return (s.x * cleanXFac, s.y * cleanYFac);
}

clearScope static vector2, vector2 cleanPosScale(vector2 p, vector2 s) {
   return cleanPos(p), cleanScale(s);
}

clearScope static vector2 virtPos(vector2 p, vector2 vsz, uint vfl = 0) {
   return virtPosScale(p, (0, 0), vsz, vfl);
}

clearScope static vector2 virtScale(vector2 s, vector2 vsz, uint vfl = 0) {
   vector2 _; [_, s] = virtPosScale((0, 0), s, vsz, vfl);
   return s;
}

clearScope static vector2, vector2 virtPosScale(vector2 p, vector2 s, vector2 vsz, uint vfl = 0) {
   let [rp, rs] = Screen.virtualToRealCoords(p, s, vsz, vBottom: vfl & _vfl_vBottom, handleAspect: !(vfl & _vfl_keepRatio));
   return rp, rs;
}

clearScope static vector2 anyPos(vector2 p, vector2 vsz, uint vfl = 0) {
   if(vsz.x || vsz.y) {return virtPos(p, vsz, vfl);}
   else if(vfl)       {return virtPos(p, (cleanWidth, cleanHeight), vfl);}
   else               {return cleanPos(p);}
}

clearScope static vector2 anyScale(vector2 s, vector2 vsz, uint vfl = 0) {
   if(vsz.x || vsz.y) {return virtScale(s, vsz, vfl);}
   else if(vfl)       {return virtScale(s, (cleanWidth, cleanHeight), vfl);}
   else               {return cleanScale(s);}
}

clearScope static vector2, vector2 anyPosScale(vector2 p, vector2 s, vector2 vsz, uint vfl = 0) {
   vector2 rp, rs;
   if(vsz.x || vsz.y) {[rp, rs] = virtPosScale(p, s, vsz, vfl);}
   else if(vfl)       {[rp, rs] = virtPosScale(p, s, (cleanWidth, cleanHeight), vfl);}
   else               {[rp, rs] = cleanPosScale(p, s);}
   return rp, rs;
}

Font fntSml(bool forceLatinFont = false) const {
   return m_lSmlFont;
}

Font fntMid(bool forceLatinFont = false) const {
   return m_lMidFont;
}

Font fntBig(bool forceLatinFont = false) const {
   return m_lBigFont;
}

Font fntTrm(bool forceLatinFont = false) const {
   return m_lTrmFont;
}

Font fntAny(name name, bool forceLatinFont = false) const {
   switch(name) {
   case 'smallfnt': return fntSml(forceLatinFont);
   case 'lmidfont': return fntMid(forceLatinFont);
   case 'ltrmfont': return fntTrm(forceLatinFont);
   case 'bigupper': return fntBig(forceLatinFont);
   default:         return Font.getFont(name);
   }
}

/* EOF */
