// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ├──────────────────────────────────────────────────────────────────────────┤
// │                                                                          │
// │ Crosshair drawing.                                                       │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

extend class Lith_URANUS;

uint8 m_xhairR, m_xhairG, m_xhairB, m_xhairA, m_xhairStyle;
bool m_xhairEnable, m_xhairEnableJuicer;
double m_xhairScale;
uint m_xhairFlags;

void tickCrosshair() {
   PlayerInfo  p = players[consolePlayer];
   Lith_Weapon w = Lith_Weapon(p.readyWeapon);
   m_xhairR            = clamp(lith_xhair_r, 0, 255);
   m_xhairG            = clamp(lith_xhair_g, 0, 255);
   m_xhairB            = clamp(lith_xhair_b, 0, 255);
   m_xhairA            = clamp(lith_xhair_a, 0, 255);
   m_xhairStyle        = clamp(lith_xhair_style, 0, 9);
   m_xhairScale        = clamp(lith_xhair_scale, 0.25, 4.0);
   m_xhairEnable       = lith_xhair_enable && (!w || !w.m_ads);
   m_xhairEnableJuicer = lith_xhair_enablejuicer;
   m_xhairFlags =
      Line.ML_BLOCKING |
      Line.ML_BLOCKEVERYTHING |
      (!w || w.bHitScan ? Line.ML_BLOCKHITSCAN : 0) |
      (!w || !w.bHitScan ? Line.ML_BLOCKPROJECTILE : 0);
}

clearScope color xhairColor() const {
   return (m_xhairR << 16) | (m_xhairG << 8) | (m_xhairB << 0);
}

clearScope textureId xhairB() const {
   static const string[] XB_GFX = {
      ":XHairs:crossb",
      ":XHairs:circleb", ":XHairs:deltab",  ":XHairs:ovalb",
      ":XHairs:basicb",  ":XHairs:delearb", ":XHairs:finib",
      ":XHairs:angleb",  ":XHairs:dotb",    ":XHairs:xpb"
   };
   return getTex(XB_GFX[m_xhairStyle]);
}

clearScope textureId xhairW() const {
   static const string[] XW_GFX = {
      ":XHairs:crossw",
      ":XHairs:circlew", ":XHairs:deltaw",  ":XHairs:ovalw",
      ":XHairs:basicw",  ":XHairs:delearw", ":XHairs:finiw",
      ":XHairs:anglew",  ":XHairs:dotw",    ":XHairs:xpw"
   };
   return getTex(XW_GFX[m_xhairStyle]);
}

ui void drawCrosshairTracer(Actor tr, vector2 xh, vector2 hudSize) {
   if(tr && tr.health > 0 && Lith_UTIL.pData(_pdt_weapon) == weapon_m_rocket) {
      let [tr1x, tr1y, seen] = project((tr.pos.xy, tr.pos.z + tr.height / 2.0));
      if(seen) {
         drawLn(tr1x / m_xhairScale, tr1y / m_xhairScale, xh.x, xh.y, 0xFFFF0000, hudSize);
      }
   }
}

ui void drawCrosshairMain(vector2 xh, vector2 hudSize, bool juice = true, color cr = color(0, 0, 0, 0)) {
   if(m_xhairEnable && m_xhairA) {
      textureId xhb = xhairB();
      textureId xhw = xhairW();
      color     c   = cr.a ? cr : xhairColor();
      let [bsx, bsy] = TexMan.getSize(xhb);
      let [wsx, wsy] = TexMan.getSize(xhw);
      double xhx = xh.x - bsx/2.0;
      double xhy = xh.y - bsy/2.0;
      Screen.DrawTexture(xhb, false, xhx, xhy,
                         DTA_VirtualWidthF,hudSize.x,
                         DTA_VirtualHeightF,hudSize.y,
                         DTA_TopOffset,0, DTA_LeftOffset,0,
                         DTA_Alpha,m_xhairA/255.0);
      xhx = xh.x - wsx/2.0;
      xhy = xh.y - wsy/2.0;
      Screen.DrawTexture(xhw, false, xhx, xhy,
                         DTA_VirtualWidthF,hudSize.x,
                         DTA_VirtualHeightF,hudSize.y,
                         DTA_TopOffset,0, DTA_LeftOffset,0,
                         DTA_Alpha,m_xhairA/255.0,DTA_FillColor,c);
      if(juice && m_xhairEnableJuicer) {
         textureId xhl = getTex(":XHairs:L");
         textureId xhr = getTex(":XHairs:R");
         let [esx, esy] = TexMan.getSize(xhl);
         xhx = xh.x - esx/2.0;
         xhy = xh.y - esy/2.0;
         double xp = Lith_UTIL.pData(_pdt_recoilp)/FIX * 500.0 + 10.0;
         xp /= m_xhairScale;
         Screen.DrawTexture(xhl, false, xhx-xp, xhy,
                            DTA_VirtualWidthF,hudSize.x,
                            DTA_VirtualHeightF,hudSize.y,
                            DTA_TopOffset,0, DTA_LeftOffset,0,
                            DTA_Alpha,m_xhairA/255.0,DTA_FillColor,c);
         Screen.DrawTexture(xhr, false, xhx+xp, xhy,
                            DTA_VirtualWidthF,hudSize.x,
                            DTA_VirtualHeightF,hudSize.y,
                            DTA_TopOffset,0, DTA_LeftOffset,0,
                            DTA_Alpha,m_xhairA/255.0,DTA_FillColor,c);
      }
   }
}

const XH_RANGE = 2048.0;
ui void drawCrosshair(RenderEvent evt) {
   let pl = evt.camera;
   vector3 viewPos = (evt.viewPos.xy, evt.viewPos.z - pl.player.viewHeight + lith_hermes.getAttackHeight(pl));
   double yaw   = evt.viewAngle + Lith_UTIL.pData(_pdt_addy)/FIX;
   double pitch = evt.viewPitch + Lith_UTIL.pData(_pdt_addp)/FIX;
   let hudSize = (320, 240) / m_xhairScale;
   let trace_non_pass = traceFromPos(pl.curSector, viewPos, yaw, pitch, XH_RANGE, ignore: pl, lnflags: m_xhairFlags);
   let [xh, seen] = projectF(trace_non_pass.hitPos);
   xh /= m_xhairScale;
   drawCrosshairTracer(pl.tracer, xh, hudSize);
   drawCrosshairMain(xh, hudSize);
}

/* EOF */
