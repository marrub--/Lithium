// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_ShockEffectPuff : Lith_BasicPuff {
   default {
      DamageType "Electric";
   }
}

class Lith_ShockEffect : Actor {
   default {
      Alpha 0.7;
      RenderStyle "Add";
      Scale 0.6;
      Species "Lith_Player";
      +DontHarmSpecies
      +Bright
      +NoBlockmap
      +NoGravity
      +NoClip
      +Randomize
   }

   override void tick() {
      if(!isFrozen()) {
         Lith_UTIL.stateTick(self);
      }
   }

   states {
   Spawn:
      ZAP1 FEDCBA 1;
      stop;
   }
}

class Lith_ShockEffect2 : Lith_ShockEffect {
   default {
      +Friendly
      +NoBlockmap
      +NoGravity
      -NoInteraction
   }

   states {
   Spawn:
      ZAP1 FEFEFEDCBCBABA 2 A_CustomRailgun(5, 0, "", "White", RGF_SILENT|RGF_NOPIERCING|RGF_EXPLICITANGLE|RGF_FULLBRIGHT|RGF_CENTERZ, 0, 10, "Lith_ShockEffectPuff", FRandom(0, 360), FRandom(0, 360), FRandom(100,200), 10, 0.2, 0);
      stop;
   }
}

class Lith_SuperShockEffect : Actor {
   default {
      Alpha 0.7;
      RenderStyle "Add";
      Scale 0.6;
      Translation "Lith_SuperShockEffect";
      +Bright
      +NoInteraction
   }

   states {
   Spawn:
      SDXP IJKLMNOPQRS 1;
      SDXP S 1 A_FadeOut(0.2);
      wait;
   }
}

class Lith_ShockHitCount : Inventory {default {Inventory.MaxAmount 6;}}

class Lith_ShockPuff : Lith_BulletPuffPainful {
   default {
      +PuffOnActors
   }

   void lith_shock() {
      if(tracer) {
         if(!tracer.bDormant) {
            tracer.a_damageSelf(5, "Electric", 0, "None", src: AAPTR_TARGET);
         }
         Lith_CopyEffect.create("Lith_ShockFx", tracer);
      }
   }

   override void postBeginPlay() {
      super.postBeginPlay();
      a_startSound("weapons/erifle/zap", lch_body);
      spawn("Lith_ShockEffect", pos);
      if(Lith_UTIL.pData(_pdt_upgrade, UPGR_ShockRif_A)) {
         let mo = spawn("Lith_ShockEffect2", pos);
         mo.target = target;
         mo.tracer = tracer;
      }
      if(tracer) {
         lith_shock();
         if(Lith_UTIL.pData(_pdt_upgrade, UPGR_ShockRif_B)) {
            tracer.giveInventory("Lith_ShockHitCount", 1);
            if(tracer.countInv("Lith_ShockHitCount") > 5) {
               tracer.takeInventory("Lith_ShockHitCount", int.max);
               spawn("Lith_SuperShockEffect", pos);
               a_startSound("weapons/erifle/shock", lch_body);
               a_explode(64, 512, xf_nosplash);
               setState(resolveState("Shock"));
            }
         }
      }
   }

   states {
   Shock:
      TNT1 A 3;
      TNT1 AAAA 3 lith_shock;
      stop;
   }
}

class Lith_ShockRifle : Lith_CWeapon;

default {
   Lith_Weapon.SpawnType "Lith_ShotgunPickup";
   Lith_Weapon.MagSize 7;
   Tag "$LITH_INFO_SHORT_ShockRifle";
   Weapon.UpSound "weapons/erifle/draw";
   Weapon.SlotNumber 3;
   Weapon.SlotPriority 1;
   Inventory.AltHudIcon "CSRGY0";
   Lith_Weapon.AmmoType "Lith_BulletAmmo";
   +Weapon.NoAutoFire
   +Lith_Weapon.HitScan
}

action(Weapon) void Lith_A_FireShock() {
   Lith_A_MagIncr();
   lith_takeAmmo(4);
   A_Light(1);
   Lith_A_RecoilUp(0.5);
   A_Recoil(0.1);
   lith_gunFlash();
   soundAlert(invoker.owner);
   A_StartSound("weapons/erifle/fire", lch_weapon);
   Lith_FireBullets(1, 0, -1, int(37*FRandom(1,1.5)), FBF_NORANDOM, "Lith_ShockPuff");
   A_FireProjectile("Lith_LightProjectileRedShort", 0);
   Lith_A_GunSmokeAndSparksSmall();
}

states(Weapon) {
Ready:
   CSRG A 1 Lith_A_Ready(WRF_ALLOWRELOAD);
   loop;
Deselect:
   CSRG A 1 Lith_A_Lower(_raise_fast);
   loop;
Select:
   CSRG A 1 Lith_A_Raise(_raise_fast);
   loop;
Fire:
   CSRG A 0 lith_jumpNoAmmo(4);
   CSRG A 0 Lith_A_JumpIfMagEmpty;
   CSRG A 1 offset(0, 33);
   CSRG B 1 bright offset(0, 45) Lith_A_FireShock;
   CSRG C 1 bright offset(0, 43) {
      A_Light(0);
      Lith_A_RecoilDn(0.25);
   }
   CSRG A 1 offset(0, 37) Lith_A_RecoilDn(0.25);
   CSRG A 2 offset(0, 35);
   goto ReadySelector;
Reload:
   CSRG A 0 Lith_A_JumpIfMagFull;
   CSRG D 1 offset(1, 32) lith_a_setInterpolation(true);
   CSRG E 1 offset(3, 32);
   CSRG F 1 offset(4, 32);
   CSRG F 1 offset(8, 38);
   CSRG F 1 offset(12, 45);
   CSRG F 1 offset(16, 53) Lith_A_ReloadBobDn(0.1);
   CSRG F 1 offset(19, 60) Lith_A_ReloadBobDn(0.1);
   CSRG F 1 offset(21, 64) {
      Lith_A_ReloadBobDn(0.1);
      A_StartSound("weapons/erifle/reloadout", lch_reload);
   }
   CSRG F 1 offset(23, 67) {
      Lith_A_DropMag("Lith_ShockRifleMagazine", "Lith_ShockRifleMagazine2", 8,-1,20, FRandom(0,1),FRandom(1,3),0);
      Lith_A_ReloadBobDn(0.1);
   }
   CSRG F 1 offset(22, 69) Lith_A_ReloadBobDn(0.1);
   CSRG F 1 offset(19, 70) Lith_A_ReloadBobDn(0.1);
   CSRG F 7 offset(18, 72) Lith_A_ReloadBobDn(0.3);
   CSRG F 1 offset(17, 69);
   CSRG F 1 offset(19, 67);
   CSRG F 1 offset(20, 66);
   CSRG F 1 offset(21, 62);
   CSRG E 1 offset(20, 60);
   CSRG D 1 offset(21, 63) {
      A_StartSound("weapons/erifle/reloadin", lch_reload2);
      Lith_A_ReloadFinish();
      Lith_A_ReloadBobUp(0.1);
   }
   CSRG A 1 offset(23, 66) Lith_A_ReloadBobUp(0.1);
   CSRG A 1 offset(24, 68) Lith_A_ReloadBobUp(0.1);
   CSRG A 1 offset(25, 63) Lith_A_ReloadBobUp(0.1);
   CSRG A 1 offset(24, 59) Lith_A_ReloadBobUp(0.4);
   CSRG A 1 offset(22, 57);
   CSRG A 1 offset(20, 54);
   CSRG A 1 offset(16, 49);
   CSRG A 1 offset(12, 44);
   CSRG A 1 offset(10, 42);
   CSRG A 1 offset(8, 40);
   CSRG A 1 offset(5, 38);
   CSRG A 1 offset(2, 35) lith_a_setInterpolation(false);
   goto ReadySelector;
FireEmpty:
   #### # 1;
   #### # 2 offset(0, 41);
   #### # 1 offset(0, 45);
   #### # 1 offset(0, 43);
   #### # 1 offset(0, 40) A_StartSound("weapons/ionrifle/empty", lch_dryweapon);
   #### # 1 offset(0, 38);
   #### # 1 offset(0, 36);
   #### # 1 offset(0, 33);
   #### # 1 offset(0, 32);
   #### # 5;
   #### #### 1 A_ReFire;
   goto ReadySelector;
}

/* EOF */
