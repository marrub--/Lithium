// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_VoidShotTrail : Actor
{
   default
   {
      Alpha 0.9;
      RenderStyle "Add";
      Scale 0.05;
      Translation "Lith_VoidShot";

      +BRIGHT
      +NOINTERACTION
   }

   states
   {
   Spawn:
      BLLT N 0;
   SpawnLoop:
      #### # 0 A_JumpIf(scale.x < 0.005, "Death");
      #### # 1 ;
      #### # 0 A_SetScale(scale.x * 0.9);
      loop;
   Death:
      TNT1 A 0;
      stop;
   }
}

class Lith_VoidShotTrail2 : Lith_VoidShotTrail
{
   default
   {
      Scale 0.025;
      Translation "None";
   }

   states {Spawn: BLLT L 0; goto SpawnLoop;}
}

class Lith_VoidShotTrail3 : Lith_VoidShotTrail {default {Scale 0.15;}}
class Lith_VoidShotEffect : Lith_MonsterSoulEffect {default {Translation "Lith_VoidShot";}}

class Lith_VoidShot : Actor
{
   default
   {
      Alpha 0.9;
      Damage 5;
      Height 4;
      Radius 4;
      RenderStyle "Add";
      Scale 0.05;
      Speed 16;
      Translation "Lith_VoidShot";

      Projectile;
      +BRIGHT
      +SEEKERMISSILE
   }

   states
   {
   Spawn:
      BLLT N 0;
      BLLT N 0 {
         A_SpawnItemEx("Lith_VoidShotTrail");
         A_SpawnItemEx("Lith_VoidShotTrail2");
         if(Random(0, 1))
            A_SpawnItemEx("Lith_VoidShotTrail3");
      }
      BLLT N 0 A_Jump(256, 1, 2, 3, 3);
      BLLT N 0 A_ChangeVelocity(0,FRandom(-1,1),FRandom(-1,1), CVF_RELATIVE);
      BLLT N 0 A_SeekerMissile(5, 1, SMF_LOOK|SMF_PRECISE|SMF_CURSPEED);
      BLLT N 1;
      loop;
   Death:
      BLLT N 0 {
         A_StartSound("ghost/hit", lch_body);
         for(int i = 0; i < 12; i++)
            A_SpawnItemEx("Lith_VoidShotEffect", 0,0,0, FRandom(-2,2),FRandom(-2,2),FRandom(-2,2));
      }
      stop;
   }
}

class Lith_SPAS : Lith_CWeapon;

default
{
   Lith_Weapon.SpawnType "Lith_SuperShotgunPickup";
   Lith_Weapon.MagSize 8;
   Tag "$LITH_INFO_SHORT_Shotgun";
   Weapon.SlotNumber 3;
   Weapon.SlotPriority 0.95;
   Weapon.UpSound "weapons/spas/draw";
   Lith_Weapon.AmmoType "Lith_ShellAmmo";
   Inventory.AltHudIcon "CSHGZ0";
   +Weapon.NoAutoFire
   +Lith_Weapon.HitScan
}

action(Weapon) State Lith_A_FireSPAS()
{
   invoker.bHitScan = true;
   lith_takeAmmo();
   Lith_A_Casing("Lith_CasShellHot", 30, 6, 20, FRandom(3,4), FRandom(7,8), FRandom(7,9));
   if(!Lith_UTIL.pData(_pdt_upgrade, UPGR_SPAS_B))
      Lith_A_MagIncr();
   /* don't ask */
   if(Pos.Z - FloorZ >= 24) {
      A_Recoil(15);
      Lith_FireBullets(10.5, 3.5, 3, 3);
   }
   SoundAlert(Invoker.Owner);
   A_Recoil(0.7);
   Lith_A_RecoilUp(0.4);
   A_Light(1);
   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_SPAS_A))
      return ResolveState("FireVoid");
   if(invoker.m_fired & 1) {
      Lith_FireBullets(10.5, 3.5, 11, 6, puffType: "Lith_BulletPuffPainless");
   } else {
      Lith_FireBullets(10.5, 3.5, 11, 7);
   }
   Lith_A_GunSmokeAndSparks();
   A_FireProjectile("Lith_LightProjectileRedLong", 0);
   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_SPAS_B))
      return ResolveState("FireAuto");
   A_StartSound("weapons/spas/fire", lch_weapon);
   return null;
}

action(Weapon) void Lith_A_FireVoid()
{
   invoker.bHitScan = false;
   for(int i = 0; i < 6; i++)
      A_FireProjectile("Lith_VoidShot", FRandom(-5,5), false, 0, 0, FPF_NOAUTOAIM, -FRandom(-2,2));
   A_StartSound("weapons/spas/fire", lch_weapon);
}

action(Weapon) void Lith_A_FireSPASAuto()
{
   invoker.bHitScan = true;
   Lith_FireBullets(11, 5, 2, 2);
   Lith_A_GunSmokeAndSparks();
   A_StartSound("weapons/spas/fire2", lch_weapon);
}

states(Weapon)
{
Ready:
   CSHG A 1 Lith_A_Ready(WRF_ALLOWRELOAD);
   loop;

Deselect:
   CSHG A 1 Lith_A_Lower(_raise_fast);
   loop;

Select:
   CSHG A 1 Lith_A_Raise(_raise_fast);
   loop;

Fire:
   CSHG A 0 lith_jumpNoAmmo;
   CSHG A 0 Lith_A_JumpIfMagEmpty;
   CSHG B 1 bright offset(0, 42) Lith_A_FireSPAS;
   CSHG B 1 bright offset(0, 47);
   CSHG C 1 bright offset(0, 48) {A_Light(2); Lith_A_RecoilDn(0.2);}
   CSHG C 1 bright offset(0, 46);
   CSHG D 1 offset(0, 38) {A_Light(0); Lith_A_RecoilDn(0.2);}
   CSHG D 1 offset(0, 35);
   goto ReadySelector;
FireVoid:
   CSHG B 1 bright offset(0, 38) Lith_A_FireVoid;
   CSHG B 1 bright offset(0, 38);
   CSHG C 1 bright offset(0, 37) {A_Light(2); Lith_A_RecoilDn(0.2);}
   CSHG D 1 bright offset(0, 36);
   CSHG D 1 offset(0, 35) A_Light(0);
   CSHG A 1 offset(0, 35) Lith_A_RecoilDn(0.2);
   CSHG A 1 offset(0, 33);
   CSHG A 1 offset(0, 32);
   goto ReadySelector;
FireAuto:
   CSHG B 1 bright offset(0, 38) Lith_A_FireSPASAuto;
   CSHG B 1 bright offset(0, 38);
   CSHG C 1 bright offset(0, 37);
   CSHG C 1 bright offset(0, 37) {A_Light(2); Lith_A_RecoilDn(0.2);}
   CSHG D 1 bright offset(0, 36);
   CSHG D 1 bright offset(0, 36);
   CSHG D 1 offset(0, 35) A_Light(0);
   CSHG A 1 offset(0, 35) Lith_A_RecoilDn(0.2);
   CSHG A 1 offset(0, 34);
   CSHG A 1 offset(0, 33);
   CSHG A 1 offset(0, 32);
   goto ReadySelector;

FireEmpty:
   CSHG A 1;
   CSHG A 2 offset(0, 38);
   CSHG A 1 offset(0, 40);
   CSHG A 1 offset(0, 37) A_StartSound("weapons/spas/empty", lch_dryweapon);
   CSHG A 1 offset(0, 34);
   CSHG A 1 offset(0, 33);
   CSHG A 5 offset(0, 32);
   goto ReadySelector;

Reload:
   CSHG A 0 A_JumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_SPAS_B), "Ready");
   CSHG A 0 Lith_A_JumpIfMagFull;
   CSHR ABCDE 1;
   CSHR FG 2;
   CSHR H 2 A_StartSound("weapons/spas/load", lch_reload);
   CSHR IJKLMNOPQR 2;
   CSHR S 2 {
      A_StartSound("weapons/spas/pump", lch_reload2);
      Lith_A_ReloadFinish();
      Lith_A_ReloadBobDn(1.5);
   }
   CSHR TUVWXYZB 2;
   goto ReadySelector;
}

/* EOF */
