// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_FeuerTest : Actor {
   default {
      RenderStyle "Add";
      Scale 0.3;
      +Bright
      +NoInteraction
   }

   states {
   Spawn:
      BLLT E -1;
      stop;
   }
}

class Lith_FeuerFX : Actor {
   default {
      RenderStyle "Add";
      Scale 1.5;
      +NoInteraction
   }

   states {
   Spawn:
      BLLT R 0;
      BLLT R 0 {
         if(target) {
            let dist = distance2D(target);
            if(dist < 256) {
               alpha *= dist / 256.0;
            }
         }
         switch(random(0, 2)) {
         case 0: scale = (-scale.x,  scale.y); break;
         case 1: scale = ( scale.x, -scale.y); break;
         case 2: scale = (-scale.x, -scale.y); break;
         }
         scale *= fRandom(0.5, 1);
         return resolveState("Done");
      }
   Done:
      BLLT R 10;
      BLLT R 1 a_fadeOut;
      stop;
   }
}

class Lith_FeuerFX2 : Lith_FeuerFX {
   default {
      Scale 0.5;
   }

   states {
   Done:
      BLLT R 2;
      BLLT R 1 a_fadeOut;
      stop;
   }
}

class Lith_FeuerFinal : Actor {
   default {
      Damage 10;
      DamageType "Magic";
      RenderStyle "Add";
      Scale 0.3;

      Projectile;
      +NoGravity
   }

   states {
   Spawn:
      BLLT L 0;
   Death:
      BLLT L 5 {
         if(target) {
            let dist = distance2D(target);
            if(dist < 256) {
               alpha *= dist / 256.0;
            }
         }
         for(int i = 0; i < 15; i++)
            A_SpawnItemEx("Lith_FeuerFX", 0,0,0, FRandom(-4,4),FRandom(-4,4),FRandom(-2,2));
         A_StartSound("weapons/feuer/final", lch_body);
         A_Explode(96, 128, 0);
      }
      BLLT L 1 A_FadeOut;
      wait;
   }
}

class Lith_FeuerExplosion : Actor {
   default {
      DamageFunction 10;
      DamageType "Magic";
      RenderStyle "Add";
      Scale 0.15;

      Projectile;
      +NOGRAVITY
   }

   states {
   Spawn:
      BLLT L 1;
   Death:
      BLLT L 5 {
         if(target) {
            let dist = distance2D(target);
            if(dist < 256) {
               alpha *= dist / 256.0;
            }
         }
         for(int i = 0; i < 5; i++)
            A_SpawnItemEx("Lith_FeuerFX", 0,0,0, FRandom(-1,1),FRandom(-1,1),FRandom(-1,1));
         A_StartSound("weapons/feuer/explode", lch_body);
         A_Explode(5, 20, xf_nosplash);
      }
      BLLT L 1 A_FadeOut;
      wait;
   }
}

class Lith_Feuer : Lith_CWeapon;

default {
   Tag "$LITH_INFO_SHORT_Feuer";
   Weapon.SlotNumber 0;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/feuer/draw";
   Lith_Weapon.AmmoType "Lith_ManaAmmo";
   Inventory.AltHudIcon "SPELA0";

   -Weapon.NoAutofire
   +Inventory.Unclearable
   +Lith_Weapon.HitScan
}

action(Weapon) void Lith_A_FireFeuer(bool left) {
   CallACS("Lith_Feuer", left, true);
   SoundAlert(Invoker.Owner);
   lith_takeAmmo(15);
   A_StartSound("weapons/feuer/fire", lch_weapon);
}

states(Weapon) {
Ready:
   TNT1 A 1 bright Lith_A_Ready;
   TNT1 A 0 {
      for(int i = 0; i < 15; i++)
         A_SpawnItemEx("Lith_FeuerFX2", 32,16,32, FRandom(-1,1),FRandom(-1,1),FRandom(-1,1));
      for(int i = 0; i < 15; i++)
         A_SpawnItemEx("Lith_FeuerFX2", 32,-16,32, FRandom(-1,1),FRandom(-1,1),FRandom(-1,1));
   }
   loop;

Deselect:
   TNT1 A 0 Lith_A_Lower(_raise_instant);
   loop;

Select:
   TNT1 A 0 ACS_ScriptCall("Lith_MagicSelect", 3);
SelectLoop:
   TNT1 A 0 Lith_A_Raise(_raise_instant);
   loop;

Fire:
   TNT1 A 0 lith_jumpNoAmmo(30);
   TNT1 A 15 Lith_A_FireFeuer(true);
   TNT1 A 20 Lith_A_FireFeuer(false);
   goto ReadySelector;
}

/* EOF */
