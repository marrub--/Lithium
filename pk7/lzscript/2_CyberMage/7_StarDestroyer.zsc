// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_StarShrapnel : Actor {
   default {
      DamageFunction 10;
      Height 2;
      Mass 0;
      Radius 2;
      RenderStyle "Add";
      Scale 0.7;
      Speed 32;
      Projectile;
      +NODAMAGETHRUST
   }

   states {
   Spawn:
      BLLT M 4 bright;
      loop;
   Death:
      MICX A 1 bright {
         A_StartSound("weapons/dark/impact", lch_body, volume: 0.3);
         Scale = (.5, .5);
      }
      MICX BCDEFG 1 bright;
      stop;
   }
}

class Lith_StarShrapnelHoming : Lith_StarShrapnel {
   default {
      DamageFunction 30;
      Scale 1.4;
      Translation "Lith_StarShrapnelHoming";
   }

   states {
   Spawn:
      BLLT M 4 bright A_SeekerMissile(45, 360, SMF_LOOK);
      loop;
   }
}

class Lith_StarWoosh1 : Actor {
   default {
      Height 8;
      Radius 8;
      RenderStyle "Add";
      Scale 0.7;
      +NOINTERACTION
   }

   states {
   Spawn:
      BLLT L 2 bright {
         scale *= fRandom(0.9, 1.0);
         if(scale.x < 0.01) {
            destroy();
         }
      }
      loop;
   }
}

class Lith_StarWoosh2 : Lith_StarWoosh1 {
   states {
   Spawn:
      BLLT L 1 bright {
         scale *= fRandom(0.95, 1.0);
         if(scale.x < 0.01) {
            destroy();
         }
         a_fadeOut(0.05);
      }
      loop;
   }
}

class Lith_StarProjectile : Actor {
   default {
      Damage 20;
      Speed 2;
      Scale 0.15;
      Radius 8;
      Height 8;
      Mass 500;
      RenderStyle "Add";
      Projectile;
      +FORCERADIUSDMG
      +Ripper
      +SEEKERMISSILE
   }

   int m_SoundTimer;
   int m_RushTimer;
   int m_HomingShrapnelTimer;

   states {
   Spawn:
      TNT1 A 4;
      TNT1 A 0 {
         A_StartSound("weapons/dark/wind", lch_body, CHANF_LOOP, 1.0);
         let prj = A_SpawnProjectile("Lith_StarDestroyerRainbowProjectile1", 0);
         prj.target = invoker;
         prj = A_SpawnProjectile("Lith_StarDestroyerRainbowProjectile2", 0);
         prj.target = invoker;
         prj = A_SpawnProjectile("Lith_StarDestroyerRainbowProjectile3", 0);
         prj.target = invoker;
      }
   Spawn1:
      BLLT L 0 bright {m_RushTimer++; SoundAlert(target);}
      BLLT L 0 bright A_JumpIf(m_RushTimer > 35*7, "Rush");
      BLLT L 0 bright A_JumpIf(Scale.X < 0.7, "ScaleUp");
   SoundCheck:
      BLLT L 0 bright {m_HomingShrapnelTimer++;}
      BLLT L 0 bright A_JumpIf(m_HomingShrapnelTimer >= 10, "DoHomingMissile");
   SoundCheck1:
      BLLT L 0 bright {m_SoundTimer--;}
      BLLT L 0 bright A_JumpIf(m_SoundTimer > 0, "DoMissile");
      BLLT L 0 bright {m_SoundTimer = 3; A_StartSound("weapons/dark/fire", lch_weapon);}
   DoMissile:
      BLLT L 0 bright {
         double x_45 = Scale.X * 45;
         A_Explode(40, int(8 + 45 * Scale.X), xf_nosplash);
         for(int i = 0; i < 5; i++) {
            let [y, p] = Lith_UTIL.circleSpread(x_45, x_45);
            A_SpawnProjectile("Lith_StarShrapnel", y, p, 0, CMF_TRACKOWNER|CMF_AIMDIRECTION|CMF_BADPITCH);
         }
      }
      goto DoSeek;
   DoHomingMissile:
      BLLT L 0 bright {
         double x_45 = Scale.X * 45;
         m_HomingShrapnelTimer = 0;
         for(int i = 0; i < 2; i++) {
            let [y, p] = Lith_UTIL.circleSpread(x_45, x_45);
            A_SpawnProjectile("Lith_StarShrapnelHoming", y, p, 0, CMF_TRACKOWNER|CMF_AIMDIRECTION|CMF_BADPITCH);
         }
      }
      goto SoundCheck1;
   ScaleUp:
      BLLT L 0 bright A_SetScale(Scale.X * 1.01);
      goto SoundCheck;
   DoSeek:
      BLLT L 0 bright A_SeekerMissile(0, 1, SMF_LOOK);
      goto DoWoosh;
   Rush:
      BLLT L 0 bright {
         bRIPPER = false;
         A_ChangeVelocity(Vel.X*1.1, Vel.Y*1.1, Vel.Z*1.1, CVF_REPLACE);
      }
   DoWoosh:
      BLLT L 1 bright {
         A_SpawnItemEx("Lith_StarWoosh1", 0,0,0, 4,0,0, 180, SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION);
         A_SpawnItemEx("Lith_StarWoosh2", 0,0,0, 3,0,0, 180, SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION);
         A_Quake(1, 2, 0, 512);
         A_Quake(3, 2, 0, 256);
         A_Quake(5, 2, 0, 64);
         for(let it = BlockThingsIterator.create(self, 256); it.next();)
            if(it.thing && it.thing.player) it.thing.A_SetBlend("White", 0.1, 35*2);
         for(let it = BlockThingsIterator.create(self, 128); it.next();)
            if(it.thing && it.thing.player) it.thing.A_SetBlend("White", 0.4, 35*2);
         for(let it = BlockThingsIterator.create(self, 64); it.next();)
            if(it.thing && it.thing.player) it.thing.A_SetBlend("White", 0.7, 35*2);
      }
      goto Spawn1;
   Death:
      SDXP A 1 bright {
         A_Explode(128, 512, 0);
         A_StopSound(lch_body);
         A_StartSound("weapons/shipgun/explode", lch_body);
         Scale = (1, 1);
         for(let it = BlockThingsIterator.create(self, 512); it.next();)
            if(it.thing.player) it.thing.A_SetBlend("White", 0.1, 35*2);
      }
      SDXP BCDEFGHIJKLMNOPQRS 1 bright;
      SDXP T 1 bright A_FadeOut;
      wait;
   }
}

class Lith_SolspearThingy : Actor {
   default {
      RenderStyle "Add";
      Scale 0.15;
      +Bright
      +NOCLIP
      +NOGRAVITY
   }

   states {
   Spawn:
      BLLT L 0;
      BLLT L 5 A_Explode(128, 128, xf_nosplash);
      BLLT L 1 A_FadeOut(0.025);
      wait;
   }
}

class Lith_Solspear : Actor {
   default {
      BounceCount 15;
      BounceFactor 1;
      BounceSound "weapons/dark/fire";
      BounceType "Hexen";
      Damage 500;
      Height 8;
      Radius 8;
      RenderStyle "Add";
      Scale 0.15;
      Speed 48;
      WallBounceFactor 1;
      Projectile;
      +Bright
      +Ripper
   }

   const FLAGS = SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION;

   states {
   Spawn:
      BLLT L 1;
      BLLT L 0 {
         let prj = A_SpawnProjectile("Lith_StarDestroyerRainbowProjectile1", 0);
         prj.target = invoker;
         prj = A_SpawnProjectile("Lith_StarDestroyerRainbowProjectile2", 0);
         prj.target = invoker;
         prj = A_SpawnProjectile("Lith_StarDestroyerRainbowProjectile3", 0);
         prj.target = invoker;
      }
   Spawn1:
      BLLT L 0;
      BLLT L 1 {
         A_SpawnItemEx("Lith_SolspearThingy",  -8, flags: FLAGS);
         A_SpawnItemEx("Lith_SolspearThingy", -16, flags: FLAGS);
         A_SpawnItemEx("Lith_SolspearThingy", -24, flags: FLAGS);
         A_SpawnItemEx("Lith_SolspearThingy", -32, flags: FLAGS);
         A_SpawnItemEx("Lith_SolspearThingy", -40, flags: FLAGS);
         A_SpawnItemEx("Lith_SolspearThingy", -48, flags: FLAGS);
      }
      loop;
   }
}

class Lith_StarBarrier : Actor {
   default {
      Alpha 0.8;
      RenderStyle "Add";
      Translation "Lith_StarBarrier";
      XScale 0.3;
      YScale 0.4;
      +NOINTERACTION
      +NOTIMEFREEZE
   }

   states {
   Spawn:
      #EBA A 0;
      #EBA A 1 A_ScaleVelocity(FRandom(0.5,1));
   SpawnLoop:
      #EBA A 1 A_FadeOut(FRandom(0.04, 0.09));
      loop;
   }
}

class Lith_SurgeProtector : Powerup {
   default {
      Powerup.Duration 3;
   }

   override void ModifyDamage(int damage, name damageType, out int newdamage, bool passive) {
      newdamage = damage / 4;
   }
}

class Lith_StarDestroyer : Lith_CWeapon;

default {
   Lith_Weapon.SpawnType "Lith_BFG9000Pickup";
   Tag "$LITH_INFO_SHORT_StarDestroyer";
   Weapon.BobRangeX 1.7;
   Weapon.BobSpeed 0.7;
   Weapon.SlotNumber 7;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/shipgun/draw";
   Lith_Weapon.AmmoType "Lith_CannonAmmo";
   Inventory.AltHudIcon "SDSGZ0";
   +Weapon.NoAutoFire
   -Lith_Weapon.HitScan
}

action(Weapon) void Lith_A_FireStar() {
   lith_gunFlash();
   soundAlert(invoker.owner);
   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_ShipGun_A)) {
      A_StartSound("weapons/shipgun/firesol", lch_weapon);
      A_FireProjectile("Lith_Solspear");
   } else if(Lith_UTIL.pData(_pdt_upgrade, UPGR_ShipGun_B)) {
      A_StartSound("weapons/shipgun/firesurge", lch_weapon);
      CallACS("Lith_SurgeOfDestiny");
      A_FireProjectile("Lith_SurgeRainbowProjectile1", 0);
      A_FireProjectile("Lith_SurgeRainbowProjectile2", 0);
      A_FireProjectile("Lith_SurgeRainbowProjectile3", 0);
   } else {
      A_StartSound("weapons/shipgun/fire", lch_weapon);
      A_FireProjectile("Lith_StarProjectile");
   }
}

states(Weapon) {
Ready:
   SDSG AABBCCDDEEFFGGHH 1 Lith_A_Ready;
   loop;
Deselect:
   SDSG A 0 A_StopSound(lch_idleweapon);
DeselectLoop:
   SDSG A 1 Lith_A_Lower(_raise_slow);
   loop;
Select:
   SDSG A 0 A_StartSound("weapons/shipgun/idle", lch_idleweapon, CHANF_LOOP);
   SDSG A 1 Lith_A_Raise(_raise_slow);
   wait;
Fire:
   SDSG A 0 lith_jumpNoAmmo(5);
   SDSG A 1 A_StartSound("weapons/shipgun/prepare", lch_weapon2);
   #### # 0 lith_a_setInterpolation(true);
   SDSG ABCDEFFGGH 1 bright;
   SDSG HAABCDEFGH 1 bright;
   SDSG ABBCCDDEFG 1 bright offset(0, 33);
   SDSG HADEFHBCGH 1 bright offset(0, 34);
   SDSG A 1 bright {
      lith_takeAmmo(2);
      SoundAlert(Invoker.Owner);
   }
   SDSG A 1 bright offset(-1, 33);
   SDSG A 1 bright offset(-1, 34);
   SDSG A 1 bright offset(-1, 36);
   SDSG A 2 bright offset(1, 37);
   #### # 0 lith_a_setInterpolation(false);
   SDSF A 3 bright offset(1, 48);
   SDSF B 2 bright offset(0, 72) Lith_A_FireStar;
   SDSF C 1 bright offset(0, 67);
   #### # 0 lith_a_setInterpolation(true);
   SDSF D 1 bright offset(0, 57);
   SDSF E 1 bright offset(0, 44);
   SDSF F 1 bright offset(0, 40);
   SDSF G 1 bright offset(0, 37);
   SDSF H 1 bright offset(0, 35);
   SDSG AABBCCDDEEFFGGHH 1 offset(0, 32) A_ReFire;
   goto ReadySelector;
FireEmpty:
   SDSG A 2 A_StartSound("weapons/shipgun/empty", lch_dryweapon);
   SDSG B 1 offset(0, 28);
   SDSG C 1 offset(0, 29);
   SDSG D 1 offset(0, 32);
   SDSG E 1 offset(0, 35);
   SDSG F 1 offset(0, 40);
   SDSG G 1 offset(0, 42);
   SDSG H 1 offset(0, 43);
   SDSG A 1 offset(0, 44);
   SDSG B 1 offset(0, 40);
   SDSG C 1 offset(0, 37);
   SDSG D 1 offset(0, 34);
   SDSG EFG 1 offset(0, 32);
   SDSG H 1 A_ReFire;
   goto ReadySelector;
}

/* EOF */
