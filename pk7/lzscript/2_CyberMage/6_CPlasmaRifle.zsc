// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_PulseChargeTrail : Actor
{
   default
   {
      RenderStyle "Add";
      Scale 0.05;

      +NOINTERACTION
      +BRIGHT
   }

   states
   {
   Spawn:
      PBAL A 0;
      PBAL A 0 A_JumpIf(Scale.X > 0.15, "FadeOut");
      PBAL A 1 A_SetScale(Scale.X * FRandom(1.05,1.2));
      loop;
   FadeOut:
      PBAL A 0 A_JumpIf(Scale.X < 0.05, "Death");
      PBAL A 1 A_SetScale(Scale.X * FRandom(0.7,0.9));
      loop;
   Death:
      PBAL A 0;
      stop;
   }
}

class Lith_PulseCharge : Actor
{
   default
   {
      Speed 45;
      DamageType "Electric";
      DamageFunction 20 * Random(2, 4);
      Radius 8;
      Height 8;
      DeathSound "weapons/plasma/explode";

      Projectile;
   }

   states
   {
   Spawn:
      TNT1 AAA 0 A_SpawnParticle("Green", SPF_FULLBRIGHT, Random(20, 40), FRandom(1, 4), 0, FRandom(-6,6),FRandom(-6,6),FRandom(-6,6), 0,0,0, 0,0,0);
      TNT1 A 1 A_SpawnItemEx("Lith_PulseChargeTrail");
      loop;
   Death:
      TNT1 A 0 A_Explode(96, 32, xf_nosplash);
      TNT1 AAAAA 0 A_SpawnItemEx("Lith_PulseChargeTrail", 0,0,0, FRandom(-2,2),FRandom(-2,2),FRandom(-2,2), 0, SXF_NOCHECKPOSITION);
      stop;
   }
}

class Lith_CPlasmaRifle : Lith_CWeapon;

default
{
   Lith_Weapon.SpawnType "Lith_PlasmaRiflePickup";
   Tag "$LITH_INFO_SHORT_PlasmaRifle";
   Weapon.SlotNumber 6;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/plasma/draw";
   Lith_Weapon.AmmoType "Lith_PlasmaAmmo";
   Inventory.AltHudIcon "PLASA0";
   -Lith_Weapon.HitScan
}

action(Weapon) void Lith_A_FireCPlasma()
{
   lith_gunFlash();
   soundAlert(invoker.owner);
   A_FireProjectile("Lith_LightProjectileGreenShort", 0);
   lith_takeAmmo(30);
   A_StartSound("weapons/plasma/fire", lch_weapon);
   for(int i = 0; i < 5; i++) {
      let [y, p] = Lith_UTIL.circleSpread(5, 3);
      A_FireProjectile("Lith_PlasmaBolt", y, false, 0, -9, 0, -p);
   }
}

action(Weapon) void Lith_A_FirePulse()
{
   lith_gunFlash();
   soundAlert(invoker.owner);
   A_FireProjectile("Lith_LightProjectileGreenLong", 0);
   lith_takeAmmo(80);
   A_StartSound("weapons/plasma/altfire", lch_weapon);
   A_FireProjectile("Lith_PulseCharge");
}

states(Weapon)
{
Ready:
   CPLG A 1 Lith_A_Ready;
   loop;

Deselect:
   CPLG A 1 Lith_A_Lower(_raise_fast);
   loop;

Select:
   CPLG A 1 Lith_A_Raise(_raise_fast);
   loop;

Fire:
   CPLG A 0 lith_jumpNoAmmo;
   CPLG A 0 A_JumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_CPlasma_A), "FirePulse");
   CPLG B 2 offset(0, 36) bright Lith_A_FireCPlasma;
   CPLG C 1 offset(0, 35) bright;
   CPLG D 1 offset(0, 32);
   CPLG AAAA 1 A_ReFire;
   goto ReadySelector;
FirePulse:
   CPLG B 2 offset(0, 40) bright Lith_A_FirePulse;
   CPLG C 1 offset(0, 37) bright;
   CPLG C 1 offset(0, 34) bright;
   CPLG D 1 offset(0, 33);
   CPLG D 1 offset(0, 32);
   CPLG AAAA 1 offset(0, 32) A_ReFire;
   goto ReadySelector;
FireEmpty:
   CPLG A 1 A_StartSound("weapons/plasma/empty", lch_dryweapon);
   CPLG A 1 offset(0, 37);
   CPLG A 1 offset(0, 36);
   CPLG A 1 offset(0, 35);
   CPLG A 1 offset(0, 34);
   CPLG A 1 offset(0, 32);
   CPLG A 1 A_ReFire;
   goto ReadySelector;
}

/* EOF */
