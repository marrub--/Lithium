// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_ShrapnelProjectile : Actor {
   default {
      BounceType "Doom";
      BounceSound "weapons/shrapnel/bounce";
      BounceCount 10;
      RipSound "weapons/shrapnel/hit";
      DamageFunction (random(6, 9));
      DamageType "Shrapnel";
      Gravity 0.5;
      Height 16;
      Radius 12;
      Speed 10;
      Projectile;
      +AllowBounceOnActors
      +BounceOnActors
      +ExplodeOnWater
      +NoClip
      -NoGravity
   }

   bool m_smoke;

   override void postBeginPlay() {
      super.postBeginPlay();
      m_smoke = !lith_sv_lessparticles && random[Lith_ShrapnelGun](0, 1);
   }

   override int specialBounceHit(Actor mo, Line ln, readOnly<SecPlane> pln) {
      if(mo) {
         doMissileDamage(mo);
      }
      return -1;
   }

   state lith_a_jumpScale(double scale) {
      a_setScale(scale);
      return a_jump(255/17, "Spawn2");
   }

   states {
   Spawn:
      TNT1 A 0;
      SBRK ABCDEFGHIJKLMN 0 lith_a_jumpScale(0.26);
      BLLT I 0 lith_a_jumpScale(1.0);
      SHCA D 0 lith_a_jumpScale(0.4);
      SHCA E 0 lith_a_jumpScale(0.3);
   Spawn2:
      #### # 1 {
         if(m_smoke) {
            let smoke = level.spawnVisualThinker('Lith_CasingSmoke');
            smoke.pos = pos.plusZ(3);
            smoke.vel = (frandom(-0.2,0),frandom(-0.2,0),0);
         }
      }
      #### # 1 {bNoClip = false;}
      loop;
   Death:
      #### # 10;
      #### # 1 A_FadeOut;
      wait;
   }
}

class Lith_ShrapnelProjectileBouncy : Lith_ShrapnelProjectile {
   default {
      BounceFactor 0.9;
      WallBounceFactor 0.95;
      DamageFunction (3 + (10 - bounceCount) / 2);
   }
}

class Lith_ShrapnelPuff : Lith_BulletPuff {
   default {
      Lith_ShrapnelPuff.Projectile 'Lith_ShrapnelProjectile';
      +PuffOnActors
   }
   meta class<Lith_ShrapnelProjectile> m_projectile;
   property Projectile: m_projectile;
   override void postBeginPlay() {
      if(target) {
         angle = angleTo(target);
      }
      let prj = a_spawnProjectile(m_projectile, 0, 0, fRandom(-40, 20), CMF_OFFSETPITCH, fRandom(-80, 80));
      prj.target = target; /* do not replace with CMF_TRACKOWNER */
      if(random[Lith_ShrapnelGun](0, 5) == 0) {
         super.postBeginPlay();
      } else {
         destroy();
      }
   }
}

class Lith_ShrapnelPuffBouncy : Lith_ShrapnelPuff {
   default {
      Lith_ShrapnelPuff.Projectile 'Lith_ShrapnelProjectileBouncy';
   }
}

class Lith_ShrapnelGun : Lith_DWeapon;

default {
   Lith_Weapon.SpawnType "Lith_ShotgunPickup";
   Tag "$LITH_INFO_SHORT_ShrapnelGun";
   Weapon.SlotNumber 3;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/shrapnel/draw";
   Lith_Weapon.AmmoType "Lith_ShellAmmo";
   Inventory.AltHudIcon "SHCAZ0";
   -Weapon.NoAutoFire
   +Lith_Weapon.HitScan
}

int m_chargeLevel;

action(Weapon) void Lith_A_FireShrapnel() {
   Lith_A_GunSmokeAndSparksSmall(1, 6);
   A_StartSound("weapons/shrapnel/fire", lch_weapon);
   SoundAlert(Invoker.Owner);
   lith_gunFlash();
   soundAlert(invoker.owner);
   a_overlay(_psp_flash, "Flash");
   a_overlayFlags(_psp_flash, pspf_renderstyle, true);
   a_overlayRenderStyle(_psp_flash, style_add);
   Lith_A_RecoilUp(2);
   a_recoil(0.7);
   lith_a_setInterpolation(true);
   class<Lith_ShrapnelPuff> puff = Lith_UTIL.pData(_pdt_upgrade, UPGR_Shrapnel_B) ? 'Lith_ShrapnelPuffBouncy' : 'Lith_ShrapnelPuff';
   Lith_FireBullets(3.5, 2.5, 7 + invoker.m_chargeLevel * 3 / 4, 4, FBF_NORANDOM, puff, 2);
   Lith_FireBullets(3.5, 2.5, 7 + invoker.m_chargeLevel * 3 / 4, 8, FBF_NORANDOM, puff, 2);
   A_FireProjectile("Lith_LightProjectileRedShort", 0);
   a_setTics(1 + (invoker.m_chargeLevel / 4));
}

states(Weapon) {
Ready:
   SHCA A 1 Lith_A_Ready;
   loop;
Deselect:
   SHCA A 1 Lith_A_Lower(_raise_fast);
   loop;
Select:
   SHCA A 1 Lith_A_Raise(_raise_fast);
   loop;
Fire:
   #### # 0 lith_jumpNoAmmo;
   #### # 0 {
      lith_a_setInterpolation(true);
      invoker.m_chargeLevel = 0;
   }
   SHCA A 1;
   SHCA A 1 offset(2, 33);
   SHCA A 1 offset(4, 34);
   SHCA A 0 lith_takeAmmo(1);
   SHCA A 0 a_jumpIf(!Lith_UTIL.pData(_pdt_upgrade, UPGR_Shrapnel_A), "FireDone");
   SCHA A 0 a_startSound("weapons/rail/charge", lch_weapon);
Charge:
   SHCA A 1 a_weaponOffset(fRandom(6, 6+4), fRandom(36, 36+4), wof_interpolate);
   SHCA A 2 a_weaponOffset(fRandom(6, 6+4), fRandom(36, 36+4), wof_interpolate);
   SHCA A 0 {
      if(++invoker.m_chargeLevel & 7 == 7) {
         if(invoker.lith_noAmmo()) {
            return resolveState("FireDone");
         } else {
            lith_takeAmmo();
         }
      }
      a_reFire("Charge");
      return state(null);
   }
FireDone:
   SHCA C 1 offset(164, 109);
   SHCA B 1 offset(173, 117) bright lith_a_fireShrapnel;
   SHCA B 2 offset(180, 121);
   SHCA B 4 offset(183, 123);
   SHCA B 2 offset(178, 120);
   SHCA B 2 offset(169, 114);
   SHCA C 1 offset(165, 108);
   SHCA C 1 offset(152, 104);
   #### # 0 lith_a_setInterpolation(false);
   SHCA A 1 a_weaponOffset(0, 32);
   goto ReadySelector;
FireEmpty:
   SHCA A 2 offset(3, 38);
   SHCA A 1 offset(7, 40);
   SHCA A 1 offset(5, 37) A_StartSound("weapons/spas/empty", lch_dryweapon);
   SHCA A 1 offset(4, 34);
   SHCA A 1 offset(2, 33);
   SHCA A 5 offset(1, 32);
   goto ReadySelector;
Flash:
   SHCA F 2 bright;
   stop;
}

/* EOF */
