// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_700Express : Lith_DWeapon;

default {
   Lith_Weapon.SpawnType "Lith_PistolPickup";
   Lith_Weapon.MagSize 4;
   Lith_Weapon.DefaultSpeed 1.3;
   Tag "$LITH_INFO_SHORT_700Express";
   Weapon.SlotNumber 2;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/700e/draw";
   Inventory.AltHudIcon "REVLA0";
   +Lith_Weapon.HitScan
}

action(Weapon) void lith_fire700e() {
   Lith_A_RecoilUp(2.5);
   lith_gunFlash();
   soundAlert(invoker.owner);
   A_Recoil(1.5);
   A_Quake(2, 3, 0, 128);
   Lith_FireBullets(0, 0, -1, random[lith_dlweapon](60, 107), FBF_NORANDOM, "Lith_700Bullet", 4, tracer: _tr_slow);
   A_FireProjectile("Lith_LightProjectileRedShort", 0);
   for(int i = 1; i <= 3; i++) {
      Lith_A_GunSmokeAndSparks(7, 3 * i);
   }
   A_StartSound("weapons/700e/fire", lch_weapon, pitch: FRandom(0.9, 1.0));
}

action(Weapon) void lith_laser(double p) {
   let ply = Lith_Player(self);
   if(!ply || !ply.player) return;
   let vz  = ply.player.viewz - ply.viewheight - ply.pos.z + lith_hermes.getattackheight(ply);
   let loc = Lith_URANUS.instance().traceFromActor(ply, ply.m_iyaw, ply.m_ipitch - p, 2048, vz).hitPos;
   Lith_URANUS.instance().particle700eLaserTrace(loc, 0.5);
   loc = Lith_URANUS.instance().traceFromActor(ply, ply.angle, ply.pitch - p, 2048, vz).hitPos;
   Lith_URANUS.instance().particle700eLaserTrace(loc, 0.2);
   if(getAge() & 1) {
      Lith_URANUS.instance().particle700eLaser(ply, p, vz-1);
   }
}

bool m_fromFire;

action(Weapon) void lith_a_laserAndReady(double p) {
   lith_laser(p);
   a_weaponReady(WRF_NOBOB|WRF_ALLOWRELOAD|WRF_NOPRIMARY|WRF_NOSWITCH);
}

states(Weapon) {
Ready:
   700E A 0 lith_laser(0.0);
   700E A 1 Lith_A_Ready(WRF_ALLOWRELOAD);
   loop;
Deselect:
   700E A 1 Lith_A_Lower(_raise_fast);
   wait;
Select:
   700E A 1 Lith_A_Raise(_raise_fast);
   wait;
Fire:
   #### # 0 Lith_A_JumpIfMagEmpty;
   #### # 0 Lith_A_MagIncr;
   700E Y 1 bright {
      lith_fire700e();
      lith_laser(22.0);
   }
   700E Z 1 bright offset(10, 28) lith_laser(16.0);
   700E CCC 1 lith_laser(9.0);
   700E C 0 a_jumpIf(!invoker.lith_magEmpty(), "FireEnd0");
   700E CCCCCC 1 lith_laser(9.0);
FireEnd0:
   700E CC 1 offset(9, 28) {
      lith_a_setInterpolation(true);
      lith_laser(8.0);
      invoker.m_fromFire = true;
   }
   700E C 1 offset(7, 30) lith_laser(7.0);
   700E C 0 a_jumpIf(!invoker.lith_magEmpty(), "FireEnd1");
   700E C 1 offset(6, 30) lith_a_laserAndReady(6.9);
   700E C 1 offset(6, 31) lith_a_laserAndReady(6.8);
   700E C 1 offset(5, 31) lith_a_laserAndReady(6.7);
   700E C 1 offset(4, 31) lith_a_laserAndReady(6.6);
   700E C 1 offset(3, 32) lith_a_laserAndReady(6.5);
   700E C 0 {invoker.m_fromFire = false;}
   goto FireEnd2;
FireEnd1:
   700E C 1 offset(5, 31) lith_laser(6.7);
   700E C 1 offset(4, 31) lith_laser(6.6);
   700E C 1 offset(3, 32) lith_laser(6.5);
FireEnd2:
   700E BBB 1 offset(2, 32) lith_laser(5.5);
   700E BBB 1 offset(1, 32) lith_laser(5.0);
   700E A 1 lith_laser(0.0);
   700E A 1 lith_laser(0.0);
   700E A 1 offset(0, 32) lith_laser(0.0);
   700E A 1 offset(0, 32) {
      lith_laser(0.0);
      lith_a_setInterpolation(false);
   }
   700E A 0 a_reFire;
   goto ReadySelector;
FireEmpty:
   700E A 1 lith_laser(0.0);
   700E AA 1 offset(3, 38) lith_laser(0.0);
   700E A 1 offset(7, 40) lith_laser(0.0);
   700E A 1 offset(5, 37) {
      A_StartSound("weapons/spas/empty", lch_dryweapon);
      lith_laser(0.0);
   }
   700E A 1 offset(4, 34) lith_laser(0.0);
   700E A 1 offset(2, 33) lith_laser(0.0);
   700E AAAAA 1 offset(1, 32) lith_laser(0.0);
   goto ReadySelector;
Reload:
   #### # 0 Lith_A_JumpIfMagFull;
   #### # 0 {
      bool fromFire = invoker.m_fromFire;
      invoker.m_fromFire = false;
      lith_a_setInterpolation(true);
      return a_jumpIf(fromFire, "Reload1");
   }
   700E B 1;
   700E B 1 offset(2, 31) A_StartSound("weapons/700e/move", lch_reload);
Reload1:
   700E C 1 offset(1, 32) Lith_A_ReloadBobUp(0.5);
   700E C 1 offset(3, 32) Lith_A_ReloadBobUp(0.5);
   700E C 2 offset(4, 33) Lith_A_ReloadBobUp(0.5);
   700E C 4 offset(5, 34) Lith_A_ReloadBobUp(0.5);
   700E C 2 offset(2, 38);
   700E D 1 offset(3, 32) A_StartSound("weapons/700e/out", lch_reload2);
   700E D 1 offset(1, 32);
   700E D 1 offset(-1, 32) Lith_A_ReloadBobDn(0.25);
   700E E 1 offset(-1, 32) Lith_A_ReloadBobDn(0.25);
   700E E 1 offset(-2, 32) Lith_A_ReloadBobDn(0.25);
   700E F 1 offset(-3, 40);
   700E F 1 offset(-4, 54) {
      a_startSound("weapons/700e/cout", lch_dryweapon);
      for(int i = 0; i < invoker.m_Fired; i++)
         Lith_A_Casing("Lith_Cas700e", 10, frandom(1,2), 32, frandom(1,2), frandom(1,3), 0);
   }
   700E F 1 offset(-9, 68) lith_a_setInterpolation(false);
   TNT1 AAAA 4 {
      if(!invoker.m_Fired) {
         return ResolveState("ReloadDone");
      } else {
         lith_a_reloadBobDn(0.1);
         a_startSound("weapons/700e/bin", lch_reload, pitch: FRandom(0.9, 1.1));
         invoker.m_Fired--;
         return State(null);
      }
   }
ReloadDone:
   TNT1 A 2 Lith_A_ReloadFinish;
   700E C 1 offset(-35, 100);
   700E C 1 offset(-20, 90) {
      A_StartSound("weapons/700e/in", lch_reload2);
      Lith_A_ReloadBobUp(2);
      lith_a_setInterpolation(true);
   }
   700E C 1 offset(-10, 60);
   700E C 3 offset(-7, 40);
   700E C 3 offset(-5, 36);
   700E C 2 offset(-2, 34);
   700E B 3 offset(1, 32) lith_a_setInterpolation(false);
   goto ReadySelector;
}

/* EOF */
