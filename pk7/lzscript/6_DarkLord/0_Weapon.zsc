// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_SubGrn : Lith_RifleGrenade {
   default {
      ExplosionDamage 200;
      ExplosionRadius 128;
      BounceType "None";
      Damage 25;
   }
}

class Lith_SubGrnPuff : Actor {
   default {
      Alpha 0.5;
      Mass 5;
      RenderStyle "Translucent";
      VSpeed 0.5;
      +ForcePain
      +HitTracer
      +NoExtremeDeath
      +NoInteraction
      +PuffOnActors
      +ThruGhost
      -AllowParticles
   }
   states {
   Spawn:
   XDeath:
      TNT1 A 0;
      TNT1 A 0 A_JumpIf(tracer ? tracer.bNoBlood : true, "Crash");
      TNT1 A 0 {
         if(random(0, 255) < 128) {
            A_StartSound("weapons/knife/hitflesh", lch_body, volume: 0.5, attenuation: 1.8);
         }
      }
      stop;
   Melee:
   Crash:
      PUFF A 3 bright {
         if(random(0, 255) < 64) {
            A_StartSound("weapons/knife/hitwall", lch_body, volume: 0.2, attenuation: 4);
         }
      }
      PUFF BCD 3;
      stop;
   }
}

class Lith_SubGrn2 : Lith_SubGrn {
   states {
   Death:
      TNT1 A 0 {
         A_Explode(nails: 30, nailDamage: 5, puffType: 'Lith_SubGrnPuff');
         Lith_A_ExplodeSound();
         return Lith_A_DoExplosion();
      }
      stop;
   }
}

class Lith_SubAxe : Actor {
   default {
      Damage 30;
      DamageType "Magic";
      Speed 16;
      Radius 8;
      BounceCount 2;
      Gravity 0.8;
      WallBounceSound "weapons/subweapon/axebounce";
      Projectile;
      +DontBounceOnSky
      +UseBounceState
      +BounceOnWalls
      +Bright
   }
   double m_warpAngle, m_warpZ;
   override int specialMissileHit(Actor th) {
      if(th != target) {
         if(th && th.bIsMonster && th.bShootable && th.health > 0) {
            int dmg = getMissileDamage(3, 1);
            dmg = th.damageMobj(self, target, dmg, 'Magic');
            if(target) {
               target.acs_scriptCall("Lith_GiveHealth", dmg / 3);
               if(Lith_UTIL.pData(_pdt_upgrade, UPGR_SubAxe_A)) {
                  tracer      = th;
                  m_warpAngle = th.angleTo(self) - th.angle;
                  m_warpZ     = pos.z - th.pos.z;
               }
            }
            a_startSound("body/flesh", lch_auto);
            a_startSound("weapons/kampilan/hitflesh", lch_weapon2);
         }
         return 0;
      } else {
         return 1;
      }
   }
   override void tick() {
      if(!isFrozen() && tracer) {
         warp(tracer, 0, 0, m_warpZ, m_warpAngle, WARPF_COPYINTERPOLATION|WARPF_NOCHECKPOSITION, radiusOffset: 1);
         angle = angleTo(tracer);
         if(tracer.health <= 0) {
            tracer = null;
            setState(resolveState("Death1"));
         }
      }
      super.tick();
   }
   states {
   Spawn:
      DAXE ABC 3;
      loop;
   Bounce.Wall:
      DAXE A 0 a_gravity;
   BounceWall:
      DAXE CBA 2;
      loop;
   Death:
      DAXE A 1 a_noGravity;
      DAXE A 0 a_jumpIf(tracer && tracer.health > 0, "Death2");
   Death1:
      DAXE A 0;
      DAXE A 0 a_startSound("weapons/subweapon/axefwoosh");
      DAXE DDEEFF 3 a_fadeOut;
      stop;
   Death2:
      DAXE A 100;
      goto Death1;
   }
}

class Lith_SubDrtSmoke : Actor {
   default {
      RenderStyle "Translucent";
      Alpha 0.5;
      Scale 0.25;
      Translation "Lith_AllToGrey";
      +NoInteraction
      +ThruActors
      +ForceXyBillboard
   }
   override void postBeginPlay() {
      super.postBeginPlay();
      vel = (fRandom(-0.05, 0.05), fRandom(-0.05, 0.05), fRandom(0.1, 0.5));
      scale *= fRandom(0.9, 1.1);
   }
   override void tick() {
      setOrigin(pos + vel, true);
      a_fadeOut(0.001);
      Lith_UTIL.stateTick(self);
   }
   states {
   Spawn:
      TNT1 A random(0, 30);
      MICX CCDDDDDDEEEEEEFFFFFFFFGGGGGGGGG random(1, 3);
      stop;
   }
}

class Lith_SubDrtThorn : Lith_ShrapnelProjectile {
   default {
      Translation "Lith_DartThorn";
      +Bright
   }
   states {
   Spawn:
      TNT1 A 0;
      SHCA E 0 {scale = (0.2, 0.2);}
      goto Spawn2;
   }
}

class Lith_SubDrt : Actor {
   default {
      Damage 0;
      DamageType "Poison";
      Speed 16;
      Radius 4;
      Projectile;
      +Bright
   }
   double m_warpAngle, m_warpZ;
   bool m_stuck;
   virtual void lith_hit(Actor th) {
      tracer      = th;
      m_warpAngle = th.angleTo(self) - th.angle;
      m_warpZ     = pos.z - th.pos.z;
      a_startSound("body/flesh", lch_auto);
   }
   override int specialMissileHit(Actor th) {
      if(th != target) {
         if(th) {
            lith_hit(th);
         }
         return 0;
      } else {
         return 1;
      }
   }
   override void tick() {
      if(m_stuck && (!tracer || tracer.health <= 0)) {
         destroy();
         return;
      }
      super.tick();
      if(!isFrozen() && tracer) {
         warp(tracer, 0, 0, m_warpZ, m_warpAngle, WARPF_COPYINTERPOLATION|WARPF_NOCHECKPOSITION, radiusOffset: 1);
         angle = angleTo(tracer);
      }
   }
   action void lith_a_spawnThorns(int amt) {
      for(int i = 0, j = random(1 * amt, 5 * amt); i < j; ++i) {
         let prj = a_spawnProjectile('Lith_SubDrtThorn', 0, angle: fRandom(-180, 180), flags: CMF_ABSOLUTEANGLE);
         prj.target = target;
      }
   }
   states {
   Spawn:
      DDAR A 3;
      loop;
   Death:
      DDAR A 0 {
         if(!tracer) {
            return resolveState("Death2");
         } else {
            m_stuck = true;
            return state(null);
         }
      }
      DDAR AAAAAAAAAAAAAAA 30 {
         tracer.damageMobj(self, target, 30, 'Poison');
         if(Lith_UTIL.pData(_pdt_upgrade, UPGR_SubDrt_A)) {
            lith_a_spawnThorns(1);
         }
      }
      stop;
   Death2:
      DDAR A 15 a_startSound("weapons/subweapon/dartstick");
      DDAR A 0 a_startSound("weapons/subweapon/dartxp", volume: 0.2);
      DDAR AAAA 1 {spriteOffset = (fRandom(-1, 1), fRandom(-1, 1));}
      DDAR AAA 1 {scale *= 1.1;}
      TNT1 A 0 {
         soundAlert(target);
         a_explode(20, 48, 0);
         if(Lith_UTIL.pData(_pdt_upgrade, UPGR_SubDrt_A)) {
            lith_a_spawnThorns(3);
         }
         for(int i = 0, j = random(8, 15); i < j; ++i) {
            spawn('Lith_SubDrtSmoke', pos);
         }
         a_setTranslation(Lith_UTIL.pData(_pdt_upgrade, UPGR_SubDrt_A) ? 'Lith_DartExplosion2' : 'Lith_DartExplosion');
         scale = (0.6, 0.6);
         spriteOffset = (0, 2);
         a_setRenderStyle(0.9, STYLE_Add);
      }
      APBX A 1 bright;
      APBX AAA 1 bright a_setScale(scale.x * 0.8);
      TNT1 A 0 {
         a_setTranslation("");
         scale = (0.3, 0.3);
         spriteOffset.y = 3;
         if(Lith_UTIL.pData(_pdt_upgrade, UPGR_SubDrt_A)) {
            a_setTranslation('Lith_DartExplosion3');
         }
      }
      IFOG ABB 3 bright;
      IFOG C 2 bright {spriteOffset = (-1, 1);}
      stop;
   }
}

class Lith_SubDrt2 : Lith_SubDrt {
   default {
      Speed 24;
      Radius 8;
      Scale 0.75;
      Translation "Lith_SubDrt2";
   }
}

class Lith_SubFistPuff : Lith_ChargeFistPuff {
   default {
      +ForcePain
   }
   override void beginPlay() {
      super.beginPlay();
      bSound = false;
   }
}

class Lith_DWeapon : Lith_Weapon;

default {
   Lith_Weapon.SprintSpeed 2.1;
   Inventory.RestrictedTo "Lith_DarkLordPlayer";
   Weapon.BobStyle "InverseAlpha";
   Weapon.BobSpeed 0.9;
   +Weapon.NoAutoFire
}
enum Lith_PSpriteD {
   _psp_d_fistflash = _psp_under_weapon,
   _psp_d_subweapon = _psp_flash_user,
   _psp_d_rems_particle_first = _psp_misc_user,
   _psp_d_rems_particle_last  = _psp_d_rems_particle_first + 70,
   _psp_d_rems_spark_first,
   _psp_d_rems_spark_last = _psp_d_rems_spark_first + 15,
   _psp_d_khanda_power,
}
action(Weapon) void lith_subGunPreFire() {
   player.findPSprite(_psp_d_subweapon).frame = randomPick(1, 3);
}
action(Weapon) void lith_subGunFire() {
   player.findPSprite(_psp_d_subweapon).frame = randomPick(0, 2);
   soundAlert(invoker.owner);
   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_SubGun_A)) {
      a_startSound("weapons/subweapon/armgun2", lch_altweapon);
      lith_fixedBullets(1, 15 * random(1, 2), tracerX: -6);
   } else {
      a_startSound("weapons/subweapon/armgun", lch_altweapon);
      lith_fireBullets(1, 2, -1, 15 * random(2, 4), flags: FBF_NORANDOM, tracerX: -6);
   }
   A_FireProjectile("Lith_LightProjectileRedShort", 0);
}
action(Weapon) void lith_subGrnFire() {
   soundAlert(invoker.owner);
   a_startSound("weapons/subweapon/grenade", lch_altweapon);
   class<Actor> prj = Lith_UTIL.pData(_pdt_upgrade, UPGR_SubGrn_A) ? 'Lith_SubGrn2' : 'Lith_SubGrn';
   a_fireProjectile(prj, 0, false, -7, 6);
}
action(Weapon) void lith_subAxeFire() {
   soundAlert(invoker.owner);
   a_startSound("weapons/subweapon/axe", lch_altweapon);
   a_fireProjectile('Lith_SubAxe', 0, false, -7, 6);
}
action(Weapon) void lith_subDrtFire() {
   a_startSound("weapons/subweapon/needle", lch_altweapon);
   class<Actor> prj = Lith_UTIL.pData(_pdt_upgrade, UPGR_SubDrt_A) ? 'Lith_SubDrt2' : 'Lith_SubDrt';
   a_fireProjectile(prj, 0, false, -7, 6);
}
action(Weapon) void lith_sprintOfs(double x, double y, int flags = 0) {
   lith_sprint();
   a_weaponOffset(x, y, flags);
}
action(Weapon) state lith_a_fistCharge() {
   a_recoil(-4);
   soundAlert(invoker.owner);
   FLineTraceData ltd;
   if(lineTrace(angle, radius*3, 0, offsetZ: lith_hermes.getattackheight(self), data: ltd) && ltd.hitType == FLineTraceData.TRACE_HitWall) {
      return resolveState("_SubFstHitWall");
   }
   if(level.time & 3 != 0) {
      return null;
   }
   let mo = lith_a_fireMelee(countInv("PowerStrength") ? 140 : 70, 255, _mlf_no_turn|_mlf_damage_stepup|_mlf_pull_in, "Lith_SubFistPuff");
   if(mo) {
      let a = angleTo(mo);
      mo.vel.xy += (cos(a), sin(a)) * 10;
      if(!mo.bMissile) {
         mo.vel.z += 700.0 / mo.mass;
      }
   }
   return null;
}
override bool lith_checkSprint() {
   return owner.getPlayerInput(INPUT_BUTTONS) & BT_SPEED != 0;
}
override double, double lith_getFirePattern() {
   m_firePattern %= 20;
   return 90.0 / 19.0 * m_firePattern++ - 45.0, 0;
}
override void tick() {
   super.tick();
   if(owner && owner.player && owner.player.readyWeapon == self &&
      owner.health > 0 && !isFrozen() &&
      owner.player.buttons & BT_ALTATTACK &&
      owner.player.getPSprite(_psp_d_subweapon).tics <= 0 &&
      owner.acs_scriptCall("Lith_GetSubShots") > 0) {
      int subtype = owner.acs_scriptCall("Lith_GetSubType");
      state which;
      switch(subtype) {
      case _subw_gun:     which = resolveState("_SubGun"); break;
      case _subw_grenade: which = resolveState("_SubGrn"); break;
      case _subw_axe:     which = resolveState("_SubAxe"); break;
      case _subw_dart:    which = resolveState("_SubDrt"); break;
      case _subw_fist:    which = resolveState("_SubFst"); break;
      default: return;
      }
      if(subtype != _subw_fist) {
         owner.acs_scriptCall("Lith_TakeSubShot");
         owner.player.setPSprite(_psp_d_subweapon, which);
         let psp = owner.player.findPSprite(_psp_d_subweapon);
         psp.bAddWeapon = false;
         psp.bAddBob    = false;
         psp.bPowDouble = true;
         psp.bCVarFast  = true;
      } else if(owner.player.weaponState & WF_WEAPONREADY) {
         owner.acs_scriptCall("Lith_TakeSubShot");
         owner.player.setPSprite(_psp_weapon, which);
      }
   }
}
states(Weapon) {
_Sprint:
   #### # 1 offset(1, 34) lith_a_adsCancel;
   #### # 1 offset(4, 40);
   #### # 1 offset(10, 55) a_startSound("player/ari/sprint", lch_body3);
   #### # 1 offset(17, 70);
   #### # 1 offset(21, 90);
   #### # 1 offset(24, 120);
   #### # 1 offset(25, 160) lith_sprint;
   TNT1 A 1 {
      lith_sprint();
      a_weaponOffset(0, 32);
      a_overlay(_psp_double_lg, "Null");
      a_overlay(_psp_double_rg, "Null");
   }
_SprintLoop:
   ,DLH A 0 lith_jumpIfSprint;
   ,DLH # 1 lith_sprintOfs(-18+fRandom[lith_weapon](-4, 0), 45);
   ,DLH # 1 lith_sprintOfs(9, -10, wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(7, -1,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(1, -1,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(0, -1,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(2,  0,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(2,  3,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(4,  4,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(7,  5,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(6,  1,  wof_interpolate|wof_add);
   ,DLH B 0 lith_jumpIfSprint;
   ,DLH # 1 lith_sprintOfs(18+fRandom[lith_weapon](0, 4), 45);
   ,DLH # 1 lith_sprintOfs(-9, -10, wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(-7, -1,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(-1, -1,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs( 0, -1,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(-2,  0,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(-2,  3,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(-4,  4,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(-7,  5,  wof_interpolate|wof_add);
   ,DLH # 1 lith_sprintOfs(-6,  1,  wof_interpolate|wof_add);
   loop;
_SprintDone:
   TNT1 A 1 offset(1, 32) a_lower(60);
   TNT1 A 0 {return invoker.m_sprintReturn;}
   stop;
_SubGun:
   TNT1 A 0 a_jumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_SubGun_A), "_SubGun2");
   ,DSB B 1 bright lith_subGunPreFire;
   ,DSB A 1 bright lith_subGunFire;
   ,DSB B 1 bright lith_subGunPreFire;
   ,DSB A 1 bright lith_subGunFire;
   TNT1 A 1;
   ,DSB B 1 bright lith_subGunPreFire;
   ,DSB A 1 bright lith_subGunFire;
   ,DSB B 1 bright lith_subGunPreFire;
   ,DSB A 1 bright lith_subGunFire;
   TNT1 A 1;
   ,DSB B 1 bright lith_subGunPreFire;
   TNT1 A 7;
   stop;
_SubGun2:
   ,DSB AAAAAAAAAAAAAAAAAAAA 1 bright lith_subGunFire;
   stop;
_SubGrn:
   ,DSG A 1 bright lith_subGrnFire;
   ,DSG BCDEFG 1 bright;
   TNT1 A 11;
   stop;
_SubAxe:
   ,DSA A 2 bright lith_subAxeFire;
   ,DSA BCD 2 bright;
   TNT1 A 10;
   stop;
_SubDrt:
   TNT1 A 18 lith_subDrtFire;
   stop;
_SubFst:
   #### # 1 offset(1, 34) lith_a_adsCancel;
   #### # 1 offset(10, 55) {Lith_Player(self).m_iFrames += 10;}
   #### # 1 offset(21, 90);
   #### # 1 offset(25, 160);
   TNT1 A 1 {
      lith_a_fistCharge();
      a_weaponOffset(0, 32);
      a_overlay(_psp_double_lg, "Null");
      a_overlay(_psp_double_rg, "Null");
   }
   #### # 0 lith_a_fistCharge;
   ,DLH C 1 offset(35, 160) a_startSound("weapons/subweapon/smash", lch_auto);
   #### # 0 lith_a_fistCharge;
   ,DLH C 1 offset(25, 130) lith_a_setInterpolation(true);
   ,DLH C 1 offset(18, 80) lith_a_fistCharge;
   ,DLH C 1 offset(10, 55) lith_a_fistCharge;
   ,DLH C 1 offset(4, 40) lith_a_fistCharge;
   ,DLH C 1 offset(1, 37) lith_a_fistCharge;
   ,DLH C 1 offset(-1, 35) lith_a_fistCharge;
   ,DLH CCCCCCCCCCC 1 lith_a_fistCharge;
   ,DLH C 1 offset(-1, 40);
   ,DLH C 1 offset(-1, 50);
   ,DLH C 1 offset(-1, 70);
   ,DLH C 1 offset(-1, 90);
   goto _SubFstDone;
_SubFstHitWallFx:
   ,DLH G 0 a_overlayAlpha(_psp_d_fistflash, 0.3);
   ,DLH G 1 offset(0, 40) bright;
   ,DLH GGG 1 bright a_overlayOffset(_psp_d_fistflash, fRandom(-5, 5), 32, WOF_INTERPOLATE);
   ,DLH G 1 offset(1, 35) bright a_overlayAlpha(_psp_d_fistflash, 0.2);
   ,DLH G 1 offset(0, 37) bright a_overlayAlpha(_psp_d_fistflash, 0.1);
   ,DLH G 1 offset(0, 40) bright a_overlayAlpha(_psp_d_fistflash, 0.03);
   stop;
_SubFstHitWall:
   ,DLH C 0 a_startSound("weapons/subweapon/smashhit", lch_auto);
   ,DLH CC 1 a_weaponOffset(fRandom(-1, 1), 60);
   ,DLH C 1 a_weaponOffset(fRandom(-1, 1), 50, WOF_INTERPOLATE);
   ,DLH C 0 {
      a_overlay(_psp_d_fistflash, "_SubFstHitWallFx");
      a_overlayFlags(_psp_d_fistflash, PSPF_ALPHA|PSPF_RENDERSTYLE|PSPF_FORCESTYLE, true);
      a_overlayFlags(_psp_d_fistflash, PSPF_ADDWEAPON|PSPF_ADDBOB, false);
      a_overlayRenderStyle(_psp_d_fistflash, STYLE_Add);
   }
   ,DLH C 1 a_weaponOffset(fRandom(-1, 1), 38, WOF_INTERPOLATE);
   ,DLH C 1 a_weaponOffset(fRandom(-1, 1), 32, WOF_INTERPOLATE);
   ,DLH CCCCCCCC 1 a_weaponOffset(fRandom(-2, 2), 31, WOF_INTERPOLATE);
   ,DLH CC 1 a_weaponOffset(fRandom(-10, 10), 35, WOF_INTERPOLATE);
   ,DLH C 1 a_weaponOffset(fRandom(-8, 8), 36, WOF_INTERPOLATE);
   ,DLH CC 1 a_weaponOffset(fRandom(-2, 2), 40, WOF_INTERPOLATE);
   ,DLH CCC 1 a_weaponOffset(fRandom(-1, 1), 50, WOF_INTERPOLATE);
   ,DLH CCCC 1 a_weaponOffset(fRandom(-0.5, 0.5), 70, WOF_INTERPOLATE);
   ,DLH CCCCC 1 a_weaponOffset(0, 90, WOF_INTERPOLATE);
_SubFstDone:
   TNT1 A 3 lith_a_setInterpolation(false);
   TNT1 A 0 resolveState("Select");
   stop;
}

/* EOF */
