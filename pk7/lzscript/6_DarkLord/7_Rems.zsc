// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_RemsBullet : FastProjectile {
   default {
      RenderStyle "Add";
      Radius 5;
      Height 5;
      Scale 0.5;
      Alpha 0.7;
      DamageFunction (35 + 10 * Lith_UTIL.pData(_pdt_upgrade, UPGR_Rems_A));
      DamageType "Electric";
      Speed 100;
      +ForcePain
      +Bright
   }

   override void effect() {
      Lith_URANUS.instance().particleRemsBullet(pos);
   }

   states {
   Spawn:
      BLLT Y -1 light("Lith_RemsLight1") bright;
      stop;
   Death:
      BLLT Y 0 {
         a_startSound("weapons/shotgun/gauss/puff", lch_body, volume: 0.2);
         bFlatSprite = false;
      }
      BLLT YYYY 2 light("Lith_RemsLight2") bright a_fadeOut;
      stop;
   }
}

class Lith_RemsRebuke : Lith_RemsBullet {
   default {
      Scale 2;
      DamageFunction (2000 + 166 * Lith_UTIL.pData(_pdt_upgrade, UPGR_Rems_A));
      +SeekerMissile
   }
   override void effect() {
      spawn("Lith_RemsSprayShotFx", pos);
   }
   states {
   Spawn:
      BLLT Y 1 light("Lith_RemsLight1") bright a_seekerMissile(90, 90, SMF_PRECISE);
      wait;
   }
}

class Lith_RemsSprayFx : Actor {
   default {
      Alpha 0.5;
      XScale 0.5;
      YScale 0.4;
      RenderStyle "Add";
      Translation "Lith_RemsSpray";
      +NoInteraction
   }
   states {
   Spawn:
      BFE1 AAABBBCCC 1 bright {
         scale *= 1.016;
      }
      BFE1 C 1 bright {
         scale.y *= 0.875;
         a_fadeOut(0.025);
      }
      wait;
   }
}

class Lith_RemsSprayShotFx : Lith_RemsSprayFx {
   default {
      Scale 1;
   }
   states {
   Spawn:
      BFE2 AAABBBCCC 1 bright {
         scale *= 1.025;
      }
      BFE2 D 1 bright {
         scale *= 0.95;
         a_fadeOut(0.01);
      }
      wait;
   }
}

class Lith_RemsShieldScreenFx : Actor {
   default {
      RenderStyle "Add";
      +NoInteraction
      +Bright
      +WallSprite
   }
   override void tick() {
      if(vel.x || vel.y || vel.z) {
         setOrigin(pos + vel, true);
      } else if(target) {
         setOrigin(target.pos, true);
      }
      a_fadeOut();
   }
   states {
   Spawn:
      #HXS A -1;
      stop;
   }
}

class Lith_RemsShieldScreen : Actor {
   default {
      Health 400;
      RenderStyle "Add";
      Height 70;
      Radius 24;
      Alpha 1.0;
      +Bright
      +Missile
      +NoBlood
      +NoClip
      +NoGravity
      +NoTeleport
      +NotAutoAimed
      +Shootable
      +WallSprite
   }
   vector3 m_tgtvec;
   double m_dist;
   override void postBeginPlay() {
      super.postBeginPlay();
      m_tgtvec = target.vec3To(self);
      m_dist = 48;
      scale.x *= randomPick(-1, 1);
   }
   override void tick() {
      super.tick();
      if(target) {
         warp(target, m_dist, 0, 0, angle, WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE | WARPF_ABSOLUTEANGLE);
      }
      let fx = lith_spawnFx();
      fx.vel = (Lith_URANUS.uiRandom(-0.3,0.3),Lith_URANUS.uiRandom(-0.3,0.3),Lith_URANUS.uiRandom(-0.3,0.3));
      fx.alpha = 0.3 * alpha;
   }
   override bool okayToSwitchTarget(Actor other) {
      return false;
   }
   override void die(Actor source, Actor inflictor, int dmgflags, name mod) {
      super.die(source, inflictor, dmgflags, mod);
      for(int i = 0; i < 4; ++i) {
         let fx = lith_spawnFx();
         fx.vel = (Lith_URANUS.uiRandom(-2,2),Lith_URANUS.uiRandom(-2,2),Lith_URANUS.uiRandom(-2,2));
      }
      if(source != target) {
         tracer = source;
         a_spawnProjectile("Lith_RemsRebuke", spawnheight: 0, flags: CMF_TRACKOWNER, ptr: AAPTR_TRACER);
      }
   }
   action(actor) state lith_a_shieldSpray(stateLabel nx, double maxAngle = 45, int rays = 20) {
      if(!target) {
         return resolveState(nx);
      }
      bool anyHit = false;
      for(int i = 0; i < rays; ++i) {
         FTranslatedLineTarget lt;
         target.aimLineAttack(angle - maxAngle / 2 + maxAngle / rays * i, MISSILERANGE, lt, 90, ALF_CHECK3D|ALF_NOFRIENDS|ALF_NOWEAPONCHECK);
         let mo = lt.lineTarget;
         if(mo && mo != self && mo != target) {
            let a = lt.angleFromSource;
            anyHit = true;
            a_startSound("weapons/rems/shieldfire", lch_weapon2, CHANF_OVERLAP, 0.05, pitch: fRandom(0.8, 1.2));
            Lith_URANUS.instance().particleRemsSpray(self, mo);
            spawn('Lith_RemsSprayShotFx', pos + (cos(a) * 8, sin(a) * 8, height / 2));
            int dmg = mo.damageMobj(target, target, 120 + 10 * Lith_UTIL.pData(_pdt_upgrade, UPGR_Rems_A), 'Electric', DMG_USEANGLE, a);
            if(dmg > 0) {
               spawn('Lith_RemsSprayFx', mo.pos.plusZ(mo.height / 2));
               mo.a_startSound("weapons/rems/shieldhit", lch_auto, 0, 0.5, pitch: fRandom(0.8, 1.2));
               lt.traceBleed(dmg, self);
            }
         }
      }
      if(anyHit) {
         target.a_startSound("weapons/rems/shieldshot", lch_weapon, CHANF_OVERLAP);
         lith_spawnFx();
         return resolveState(nx);
      }
      return null;
   }
   Actor lith_spawnFx() {
      let fx = spawn('Lith_RemsShieldScreenFx', pos);
      fx.angle  = angle;
      fx.target = self;
      fx.scale.x = scale.x;
      return fx;
   }
   states(actor) {
   Spawn:
      #HXS A 0;
      #HXS AAAAA 1 a_fadeIn;
      #HXS A 150;
   Spawn1:
      #HXS AAAAAAA 1 lith_a_shieldSpray("Spawn2");
   Spawn2:
      #HXS A 10;
      #HXS AAAAAAA 1 lith_a_shieldSpray("Spawn3");
   Spawn3:
      #HXS A 10 a_startSound("weapons/rems/shielddisappate", lch_body);
      #HXS A 1 {
         a_noBlocking();
         m_dist += m_dist / 12;
         a_fadeOut();
      }
      wait;
   Death:
      #HXS A 1 a_startSound("weapons/rems/shieldhit", lch_body);
      #HXS A 1 a_fadeOut(0.05);
      wait;
   }
}

class Lith_Rems : Lith_DWeapon;

default {
   Lith_Weapon.SpawnType "Lith_BFG9000Pickup";
   Tag "$LITH_INFO_SHORT_Rems";
   Weapon.SlotNumber 7;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/rems/draw";
   Lith_Weapon.AdsInSound "weapons/rems/ads";
   Lith_Weapon.AmmoType "Lith_CannonAmmo";
   Lith_Weapon.AdsZoom -0.1;
   Inventory.AltHudIcon ",D7IA0";
   +Weapon.NoAutoFire
   -Lith_Weapon.HitScan
}
int m_steamy, m_fireLoop, m_particleLoop, m_sparkNum;
double m_particleAlpha;
uint8 m_lastframe;
override void tick() {
   super.tick();
   if(owner) {
      if(m_ads != _ads_none && owner.vel.xy.length() > 1) {
         owner.a_startSound("weapons/rems/dragloop", lch_weapon4, CHANF_LOOPING, 0.3, startTime: fRandom(0, 1));
      } else {
         owner.a_stopSound(lch_weapon4);
      }
   }
}
action(weapon) void lith_a_increaseParticles() {
   let id = _psp_d_rems_particle_first + invoker.m_particleLoop;
   a_overlay(id, "RemsParticle");
   a_overlayFlags(id, PSPF_ALPHA|PSPF_RENDERSTYLE|PSPF_FORCESTYLE, true);
   a_overlayFlags(id, PSPF_ADDWEAPON|PSPF_ADDBOB, false);
   a_overlayRenderStyle(id, STYLE_Add);
   a_overlayScale(id, fRandom(0.1, 0.5));
   a_overlayOffset(id, fRandom(0, 320), fRandom(120, 240));
   ++invoker.m_particleLoop;
}
action(weapon) void lith_a_decreaseParticles() {
   invoker.m_particleAlpha -= 0.2;
}
action(weapon) void lith_a_resetParticles() {
   a_clearOverlays(_psp_d_rems_particle_first, _psp_d_rems_particle_last);
   invoker.m_particleLoop = 0;
}
action(weapon) void lith_a_spark() {
   a_startSound("weapons/rems/spark", lch_weapon, chanf_overlap, 0.3, pitch: fRandom(0.9, 1.2));
   A_FireProjectile("Lith_RemsSparkLightProjectile", 0);
   int id = _psp_d_rems_spark_first + invoker.m_sparkNum;
   double x = fRandom(200, 300), y = fRandom(120, 150);
   int xs = randomPick(-1,1), ys = randomPick(-1,1);
   int tics = 0, step = random(4, 12);
   double scale = 0.15;
   for(int i = 0; i < 5; ++i) {
      int j = id + i;
      a_overlay(j, "RemsSparkParticle");
      a_overlayFlags(j, PSPF_ALPHA|PSPF_RENDERSTYLE|PSPF_FORCESTYLE, true);
      a_overlayFlags(j, PSPF_ADDWEAPON|PSPF_ADDBOB, false);
      a_overlayRenderStyle(j, STYLE_Add);
      let psp = player.getPSprite(j);
      psp.scale = (scale, scale);
      psp.x = x;
      psp.y = y;
      psp.tics = tics;
      if(i == 3) {
         if(random(0, 1)) {xs = -xs;} else {ys = -ys;}
      }
      x += xs * step;
      y += ys * step;
      tics += random(1, 4);
      scale += fRandom(0.1, 0.2);
   }
   invoker.m_sparkNum = (invoker.m_sparkNum + 5) % 15;
}
override void pspriteTick(PSprite psp) {
   super.pspriteTick(psp);
   if(psp.id >= _psp_d_rems_particle_first && psp.id <= _psp_d_rems_particle_last) {
      psp.alpha = m_particleAlpha;
      psp.x += fRandom(-16, 16);
      psp.y += fRandom(-16, 16);
   }
   if(psp.id >= _psp_d_rems_spark_first && psp.id <= _psp_d_rems_spark_last && psp.curstate.bFullBright) {
      psp.alpha -= 0.075;
      if(psp.alpha <= 0) {
         psp.destroy();
      }
   }
}
action(weapon) state lith_a_fireRems() {
   a_overlayOffset(_psp_weapon, fRandom(-9, 47), fRandom(44, 64), WOF_INTERPOLATE);
   for(int i = 0; i < 4; ++i) {
      a_fireProjectile("Lith_RemsBullet", angle: fRandom(-20, 20), spawnofs_xy: fRandom(2, 8), spawnheight: fRandom(8, 10), flags: FPF_NOAUTOAIM, pitch: fRandom(-4, 4));
   }
   Lith_URANUS.instance().particleRemsSpark(player.mo);
   if(!invoker.m_ads) {
      A_Recoil(0.4);
      Lith_A_RecoilUp(fRandom(-0.2, 0.8));
   }
   lith_gunFlash();
   soundAlert(invoker.owner);
   A_Quake(2, 15, 0, 128);
   return invoker.m_fireLoop++ == 170 ? resolveState("FireDone") : state(null);
}
action(weapon) void lith_a_fireRemsShield() {
   let mo = spawn("Lith_RemsShieldScreen", self.pos);
   mo.angle = self.angle;
   mo.target = self;
   if(!invoker.m_ads) A_Recoil(2);
   lith_gunFlash();
   soundAlert(invoker.owner);
   A_Quake(2, 15, 0, 128);
   Lith_A_RecoilUp(0.8);
}
action(weapon) void lith_a_emitSteam() {
   if(invoker.m_steamy) {
      if(level.time % 3 == 0) {
         a_fireProjectile("Lith_GunSmokeEmitter", frandom(-10, 10), 0, 1.5, 9, pitch: frandom(-10, 10));
      }
      invoker.m_steamy--;
   }
}
override double getSpeedFactor() {
   return super.getSpeedFactor() * (m_ads ? 1/2.0 : 1);
}
override state lith_gotoReady() {
   return resolveState("Ready");
}
states(Weapon) {
Ready:
   TNT1 A 0 A_StartSound("weapons/rems/idle", lch_idleweapon, CHANF_LOOPING, 0.5);
   ,D7G A 0 a_jumpIf(!Lith_UTIL.pData(_pdt_upgrade, UPGR_Rems_A), "Ready1");
   ,D7G G 0 a_jumpIf(invoker.m_ads, "Ready1");
   ,D7G B 0;
Ready1:
   #### # 0 {
      lith_a_emitSteam();
      if(random(0, 70) == 0) {
         lith_a_spark();
      }
   }
   #### # 1 lith_a_ready(Lith_UTIL.pData(_pdt_upgrade, UPGR_Rems_A) ? WRF_ALLOWUSER1 : 0);
   loop;
AltReady:
   ,D7G G 0 lith_a_emitSteam;
   ,D7G G 1 Lith_A_Ready(WRF_ALLOWUSER1);
   loop;
Deselect:
   TNT1 A 0 A_StopSound(lch_idleweapon);
   TNT1 A 0 a_jumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_Rems_A), "DeselectBipod");
DeselectNormal: ,D7G A 1 lith_a_lower(_raise_slow); wait;
DeselectBipod:  ,D7G B 1 lith_a_lower(_raise_slow); wait;
Select:
   TNT1 A 0 {invoker.m_steamy = 0;}
   TNT1 A 0 a_jumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_Rems_A), "SelectBipod");
SelectNormal: ,D7G A 1 lith_a_raise(_raise_slow); wait;
SelectBipod:  ,D7G B 1 lith_a_raise(_raise_slow); wait;
User1:
   #### # 1;
   #### # 0 lith_a_adsToggle;
   goto ReadySelector;
AdsIn:
   ,D7G BC 2;
   ,D7G DE 1;
   ,D7G FG 3;
   goto ReadySelector;
AdsOut:
   ,D7G GF 3;
   ,D7G ED 1;
   ,D7G CB 2;
   goto ReadySelector;
RemsParticle:
   BLLT Y -1 bright;
   stop;
RemsSparkParticle:
   TNT1 A 1;
   BLLT Y 12 bright;
   stop;
Fire:
   #### # 0 {
      if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Rems_A) && !invoker.m_ads) {
         return resolveState("ReadySelector");
      } else if(!Lith_UTIL.pData(_pdt_upgrade, UPGR_Rems_B)) {
         return lith_jumpNoAmmo(4);
      } else {
         let st = lith_jumpNoAmmo(1);
         return st ? st : state(null);
      }
   }
   ,D7G # 0 lith_takeAmmo(4);
Fire1:
   ,D7G # 1 offset(0, 32) {
      a_startSound("weapons/rems/charge", lch_weapon2);
      a_startSound("weapons/rems/wail", lch_weapon3);
      invoker.m_particleLoop = 0;
      invoker.m_particleAlpha = 1.0;
      invoker.m_fireLoop = 0;
      invoker.m_steamy = 175;
   }
   ,D7G # 0 a_jumpIf(invoker.m_ads, 10);
   ,D7G ################################################################# 1 {
      A_FireProjectile("Lith_RemsChargeLightProjectile", 0);
      a_overlayOffset(_psp_weapon, fRandom(-0.4, 0.6), fRandom(-0.4, 0.6), WOF_INTERPOLATE|WOF_ADD);
      lith_a_increaseParticles();
   }
   ,D7G # 0 a_jumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_Rems_B), "FireScreen");
   ,D7G # 0 a_startSound("weapons/rems/fire", lch_weapon);
   ,D7F A 0 {if(invoker.m_ads) player.getPSprite(_psp_weapon).frame += 3;}
FireLoop:
   ,D7F # 1 bright lith_a_fireRems;
   ,D7F # 0 {++player.getPSprite(_psp_weapon).frame;}
   ,D7F # 1 bright lith_a_fireRems;
   ,D7F # 0 {--player.getPSprite(_psp_weapon).frame;}
   loop;
FireScreen:
   ,D7G # 0 lith_jumpNoAmmo(1);
   ,D7G # 1 {
      lith_takeAmmo(1);
      a_startSound("weapons/rems/fireshield", lch_weapon);
      lith_a_setInterpolation(false);
   }
   ,D7F A 0 {if(invoker.m_ads) player.getPSprite(_psp_weapon).frame += 3;}
   ,D7F # 1 bright offset(60, 82) lith_a_fireRemsShield;
   ,D7F # 0 {++player.getPSprite(_psp_weapon).frame;}
   ,D7F # 1 bright offset(45, 72);
   ,D7F # 0 {++player.getPSprite(_psp_weapon).frame;}
   ,D7F # 1 bright offset(30, 62);
   ,D7G A 0 {if(invoker.m_ads) player.getPSprite(_psp_weapon).frame += 6;}
   ,D7G # 2 offset(20, 50);
   ,D7G # 1 offset(18, 49) lith_a_setInterpolation(true);
   ,D7G # 2 offset(17, 47);
   ,D7G # 2 offset(15, 44) a_reFire("FireScreen");
   goto FireDone1;
FireDone:
   ,D7F C 0 {if(invoker.m_ads) player.getPSprite(_psp_weapon).frame += 3;}
   ,D7F # 1 bright offset(14, 44) a_startSound("weapons/rems/firefinish", lch_weapon2);
FireDone1:
   ,D7G A 0 {if(invoker.m_ads) player.getPSprite(_psp_weapon).frame += 6;}
   ,D7G # 1 bright offset(12, 40) lith_a_decreaseParticles;
   ,D7G # 1 bright offset(8, 38) {
      lith_a_decreaseParticles();
      lith_a_setInterpolation(true);
   }
   ,D7G # 1 offset(4, 39) lith_a_decreaseParticles;
   ,D7G ## 1 offset(2, 35) lith_a_decreaseParticles;
   ,D7G # 1 offset(1, 33) lith_a_resetParticles;
FireCock:
   ,D7G # 2 offset(1, 32) Lith_A_RecoilDn(0.25);
   ,D7G # 2 offset(3, 32) Lith_A_RecoilDn(0.25);
   ,D7G # 2 offset(4, 32) Lith_A_RecoilDn(0.25);
   ,D7G # 2 offset(8, 38) Lith_A_RecoilDn(0.25);
   ,D7G # 2 offset(12, 45);
   ,D7G # 2 offset(16, 53);
   ,D7G # 1 offset(19, 60);
   ,D7G # 1 offset(21, 64);
   ,D7G # 1 offset(23, 67);
   ,D7G # 0 Lith_A_ReloadBobDn(0.5);
   ,D7G # 1 offset(22, 74) A_StartSound("weapons/sniper/boltback", lch_weapon2);
   ,D7G # 1 offset(19, 78) Lith_A_ReloadBobDn(0.5);
   ,D7G # 5 offset(18, 80);
   ,D7G # 1 offset(17, 74) A_StartSound("weapons/sniper/boltforward", lch_weapon3);
   ,D7G # 1 offset(19, 67) lith_a_emitSteam;
   ,D7G # 1 offset(20, 66) lith_a_emitSteam;
   ,D7G # 1 offset(21, 62) lith_a_emitSteam;
   ,D7G # 1 offset(21, 63) lith_a_emitSteam;
   ,D7G # 1 offset(23, 66) lith_a_emitSteam;
   ,D7G ## 1 offset(24, 68) lith_a_emitSteam;
   ,D7G ## 1 offset(25, 63) lith_a_emitSteam;
   ,D7G ## 1 offset(24, 59) lith_a_emitSteam;
   ,D7G ## 1 offset(20, 54) lith_a_emitSteam;
   ,D7G ## 1 offset(16, 49) lith_a_emitSteam;
   ,D7G ## 1 offset(12, 44) lith_a_emitSteam;
   ,D7G ## 1 offset(8, 40) lith_a_emitSteam;
   ,D7G ## 1 offset(2, 35) lith_a_emitSteam;
   ,D7G # 0 lith_a_setInterpolation(false);
   ,D7G ### 1 offset(0, 32) lith_a_emitSteam;
   goto ReadySelector;
FireEmpty:
   ,D7G # 2 offset(3, 38) lith_a_resetParticles;
   ,D7G # 1 offset(7, 40);
   ,D7G # 1 offset(5, 37) A_StartSound("weapons/rems/empty", lch_dryweapon);
   ,D7G # 1 offset(4, 34);
   ,D7G # 1 offset(2, 33);
   ,D7G # 5 offset(1, 32);
   goto ReadySelector;
}

/* EOF */
