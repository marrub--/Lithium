// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Alison G. Watson. Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_KampilanPuff : Actor {
   default {
      Mass 5;
      +HitTracer
      +NoInteraction
      +PuffOnActors
      +PuffGetsOwner
      +ThruGhost
      -AllowParticles
   }

   virtual void lith_doFx(color cr) {
      Lith_URANUS.instance().particleKampilanSwing(self, cr, false);
   }

   override void postBeginPlay() {
      super.postBeginPlay();
      if(tracer ? tracer.bNoBlood : true) {
         if(target) {
            target.a_startSound("weapons/kampilan/hit", lch_weapon2);
         }
         lith_doFx("white");
         a_quakeEx(0.1, 0.1, 0, 5, 0, 128);
      } else {
         a_startSound("body/flesh", lch_auto);
         lith_doFx("red");
         if(target) {
            target.a_startSound("weapons/kampilan/hitflesh", lch_weapon2);
         }
         a_quakeEx(0.7, 0.7, 0, 15, 0, 256);
      }
   }

   states {
   XDeath:
   Melee:
   Spawn:
      TNT1 A 8;
      stop;
   }
}

class Lith_KampilanPuff2 : Lith_KampilanPuff {
   override void lith_doFx(color cr) {
      Lith_URANUS.instance().particleKampilanSwing(self, cr, true);
   }
}

class Lith_KampilanBonkPuff : Actor {
   default {
      Alpha 0.6;
      RenderStyle "Translucent";
      Mass 5;
      +ForcePain
      +HitTracer
      +NoInteraction
      +PuffOnActors
      +PuffGetsOwner
      +ThruGhost
      -AllowParticles
   }

   override void postBeginPlay() {
      super.postBeginPlay();
      if(target) {
         target.a_startSound("weapons/kampilan/bonk", lch_weapon2);
      }
      if(tracer) {
         if(!tracer.bNoBlood) {
            a_startSound("body/flesh", lch_auto);
         }
         a_quakeEx(1.1, 1.1, 0, 10, 0, 256);
      } else {
         a_quakeEx(0.5, 0.5, 0, 7, 0, 256);
      }
   }

   action void lith_a_setPain() {
      if(tracer && !tracer.bBoss && tracer.health > 0) {
         let st = tracer.resolveState("Pain");
         if(st) {
            tracer.setState(st);
         }
      }
   }

   states {
   Spawn:
      TNT1 A 0;
      FHFX STUVW 3 lith_a_setPain;
      TNT1 A 3 lith_a_setPain;
      stop;
   }
}

class Lith_KampilanBonkPuff2 : Lith_KampilanBonkPuff {
   states {
   Spawn:
      TNT1 A 0;
      FHFX STUVW 3 lith_a_setPain;
      TNT1 AAAAAAA 3 lith_a_setPain;
      stop;
   }
}

class Lith_KampilanBonkPuff3 : Lith_KampilanBonkPuff {
   override void postBeginPlay() {
      if(tracer) {
         a_explode(70, 200, 0);
         a_startSound("weapons/kampilan/hitxpl", lch_auto);
         Lith_URANUS.instance().particleKampilanSwing(self, "blue", false);
      }
      super.postBeginPlay();
   }
   states {
   Spawn:
      TNT1 A 0;
      TNT1 AAAA 2 lith_a_setPain;
      stop;
   }
}

class Lith_Kampilan : Lith_DWeapon;

default {
   Lith_Weapon.SpawnType "Lith_FistPickup";
   Lith_Weapon.DefaultSpeed 1.6;
   Lith_Weapon.MagSize 5;
   Tag "$LITH_INFO_SHORT_Kampilan";
   Weapon.SlotNumber 1;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/kampilan/draw";
   Inventory.AltHudIcon "KAMLZ0";
   +Lith_Weapon.HitScan
}

int m_cooldownTics;

action(Weapon) void lith_a_kampilanSwing() {
   class<Lith_KampilanPuff> puffType;
   if(invoker.m_swingSide) {
      puffType = "Lith_KampilanPuff2";
   } else {
      puffType = "Lith_KampilanPuff";
   }
   a_recoil(-1.5);
   a_quake(2, 3, 0, 128);
   let hit_mo = lith_a_fireMelee(int((countInv("PowerStrength") ? 300 : 150) * (invoker.m_fired * 0.1 + 1)), 132, _mlf_pull_in|_mlf_damage_stepup, puffType);
   if(invoker.m_cooldownTics) {
      invoker.m_cooldownTics += 20;
   }
   lith_a_recoilDn(10);
}

action(Weapon) void lith_a_kampilanBonk() {
   class<Lith_KampilanBonkPuff> puffType;
   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Kampilan_A) && invoker.m_fired == 5) {
      puffType = "Lith_KampilanBonkPuff3";
   } else if(invoker.m_swingSide) {
      puffType = "Lith_KampilanBonkPuff2";
   } else {
      puffType = "Lith_KampilanBonkPuff";
   }
   a_recoil(-1.5);
   a_quake(3, 3, 0, 128);
   let hit_mo = lith_a_fireMelee(countInv("PowerStrength") ? 100 : 50, 132, _mlf_pull_in|_mlf_damage_stepup, puffType);
   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Kampilan_A) && hit_mo) {
      if(invoker.m_fired < 5) {
         ++invoker.m_fired;
         if(!hit_mo.bInvulnerable && !hit_mo.bDormant) {
            invoker.m_cooldownTics = 50;
         }
      } else {
         invoker.m_fired = 0;
      }
   }
   lith_a_recoilDn(10);
}

override void tick() {
   super.tick();
   if(m_fired && !--m_cooldownTics) {
      --m_fired;
      m_cooldownTics = 35;
   }
}

bool m_swingSide;

states(Weapon) {
Ready: TNT1 A 0 a_jumpIf(invoker.m_swingSide, "ReadyLeft");
ReadyRight: KAMR A 1 lith_a_ready(WRF_ALLOWRELOAD); wait;
ReadyLeft:  KAML A 1 lith_a_ready(WRF_ALLOWRELOAD); wait;

Deselect: TNT1 A 0 a_jumpIf(invoker.m_swingSide, "DeselectLeft");
DeselectRight: KAMR A 1 lith_a_lower(_raise_fast); wait;
DeselectLeft:  KAML A 1 lith_a_lower(_raise_fast); wait;

Select: TNT1 A 0 a_jumpIf(invoker.m_swingSide, "SelectLeft");
SelectRight: KAMR A 1 lith_a_raise(_raise_fast); wait;
SelectLeft:  KAML A 1 lith_a_raise(_raise_fast); wait;

Fire: TNT1 A 0 a_jumpIf(invoker.m_swingSide, "SwingLeft");
SwingRight:
   KAMR B 1 offset(213, 69);
   KAMR C 1 offset(196, 56);
   KAMR C 1 offset(204, 51);
   KAMR D 1 offset(200, 42);
   KAMR E 2 offset(196, 36);
   KAMR F 2 offset(194, 35);
   KAMR G 3 offset(198, 36);
   KAMR H 1 offset(176, 49) a_startSound("weapons/kampilan/swing", lch_weapon);
   KAMR J 1 offset(207, 95);
   KAMR K 1 offset(233, 78);
   KAMR L 1 offset(223, -17) lith_a_kampilanSwing;
   KAMR L 1 offset(132, -15);
   #### # 0 lith_a_setInterpolation(true);
   KAMR M 1 offset(133, 61);
   KAMR M 1 offset(76, 141);
   KAMR M 1 offset(22, 203);
   #### # 0 lith_a_setInterpolation(false);
   TNT1 A 5;
   KAML H 1 offset(-2, 197);
   #### # 0 lith_a_setInterpolation(true);
   KAML H 1 offset(-20, 193);
   #### # 0 lith_a_setInterpolation(false);
   KAML I 1 offset(-37, 182);
   KAML I 1 offset(-68, 172);
   KAML J 1 offset(-86, 133) a_startSound("weapons/kampilan/ready", lch_weapon3);
   #### # 0 lith_a_setInterpolation(true);
   KAML K 1 offset(-86, 103);
   KAML L 1 offset(-94, 80);
   KAML M 1 offset(-99, 67);
   KAML A 1 offset(1, 32);
   #### # 0 lith_a_setInterpolation(false);
   #### # 0 {invoker.m_swingSide = !invoker.m_swingSide;}
   #### # 0 a_reFire;
   goto ReadySelector;
SwingLeft:
   #### # 0 lith_a_setInterpolation(true);
   KAML A 1 offset(-11, 33);
   KAML A 1 offset(-19, 36);
   KAML A 1 offset(-24, 39);
   KAML A 2 offset(-25, 40);
   KAML B 2 offset(-117, 55);
   KAML B 1 offset(-104, 50);
   KAML C 1 offset(41, 38) a_startSound("weapons/kampilan/swing", lch_weapon);
   KAML C 1 offset(41, 38);
   KAML D 1 offset(135, 88);
   KAML E 1 offset(182, 110) lith_a_kampilanSwing;
   KAML F 1 offset(231, 141);
   KAML G 1 offset(272, 167);
   #### # 0 lith_a_setInterpolation(false);
   TNT1 A 5;
   KAMR N 1 offset(232, 8);
   #### # 0 lith_a_setInterpolation(true);
   KAMR N 1 offset(242, -11);
   KAMR N 1 offset(254, -34) a_startSound("weapons/kampilan/ready", lch_weapon3);
   #### # 0 lith_a_setInterpolation(false);
   KAMR P 1 offset(263, 27);
   KAMR Q 2 offset(236, 73);
   KAMR R 2 offset(222, 86);
   KAMR S 3 offset(219, 78);
   KAMR A 1 offset(1, 32);
   #### # 0 {invoker.m_swingSide = !invoker.m_swingSide;}
   #### # 0 a_reFire;
   goto ReadySelector;
Reload: TNT1 A 0 a_jumpIf(invoker.m_swingSide, "BonkLeft");
BonkRight:
   #### # 0 lith_a_setInterpolation(true);
   KAMR T 1 offset(225, 70);
   KAMR T 1 offset(229, 70);
   KAMR U 2 offset(250, 43);
   KAMR V 3 offset(281, 57);
   KAMR W 1 offset(271, 60) a_startSound("weapons/kampilan/swing", lch_weapon);
   KAMR X 1 offset(214, 24) lith_a_kampilanBonk;
   KAMR Y 2 offset(191, -29);
   KAMR Y 3 offset(197, -27);
   KAMR Y 2 offset(184, -27);
   KAMR Y 3 offset(187, -26);
   #### # 0 lith_a_setInterpolation(false);
   KAMR X 1 offset(218, 27);
   KAMR T 2 offset(215, 72);
   KAMR A 1 offset(1, 32);
   goto ReadySelector;
BonkLeft:
   #### # 0 lith_a_setInterpolation(true);
   KAML N 1 offset(-114, 65);
   KAML N 2 offset(-117, 67);
   KAML N 3 offset(-118, 68);
   KAML O 1 offset(-119, 84);
   KAML O 2 offset(-110, 84);
   KAML P 3 offset(-113, 66) a_startSound("weapons/kampilan/swing", lch_weapon);
   KAML Q 1 offset(-93, 55);
   KAML R 1 offset(-11, 72) lith_a_kampilanBonk;
   KAML S 3 offset(84, 136);
   KAML S 2 offset(93, 136);
   KAML S 3 offset(88, 139);
   KAML S 2 offset(88, 136);
   KAML R 1 offset(16, 101);
   KAML O 2 offset(-58, 113);
   KAML M 3 offset(-92, 76);
   #### # 0 lith_a_setInterpolation(false);
   KAML A 1 offset(1, 32);
   goto ReadySelector;
}

/* EOF */
