// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_FortuneProjectilePuff : Lith_BasicPuff {
   default {
      DamageType "Electric";
   }
}

class Lith_FortuneExplosionParticle : Actor {
   default {
      RenderStyle "Add";
      +NoInteraction
      +RollSprite
      +FlatSprite
   }
   override void postBeginPlay() {
      super.postBeginPlay();
      angle = fRandom[Lith_Fortune](-180, 180);
      pitch = fRandom[Lith_Fortune](-90, 90);
      roll  = fRandom[Lith_Fortune](-180, 180);
   }
   override void tick() {
      if(!isFrozen()) {
         a_fadeOut(0.05);
         scale.x += 0.05;
         scale.y += 0.05;
      }
   }
   states {
   Spawn:
      BLLT X -1;
      stop;
   }
}

class Lith_FortuneExplosionParticle2 : Lith_FortuneExplosionParticle {
   default {
      Scale 0.25;
   }
}

class Lith_FortuneBuildup : Actor {
   default {
      RenderStyle "Add";
      Scale 0.5;
      Height 8;
      Radius 8;
      Species "Lith_Player";
      +DontHarmSpecies
      +NoClip
      +NoGravity
      +Bright
   }
   int m_buildup;
   const BUILDUP_EXPLODED = -1337;
   const BUILDUP_MAX = 500;
   void lith_triggerExplosion() {
      m_buildup = BUILDUP_EXPLODED;
      setState(resolveState("Explodo"));
   }
   override void tick() {
      super.tick();
      if(m_buildup > 0) {
         a_setScale(m_buildup / double(BUILDUP_MAX));
         if(m_buildup > BUILDUP_MAX) {
            lith_triggerExplosion();
         } else {
            --m_buildup;
         }
      } else if(m_buildup != BUILDUP_EXPLODED) {
         destroy();
      }
   }
   states {
   Spawn:
      BLLT L -1;
      stop;
   Explodo:
      SDXP A 1 {
         A_Explode(32*m_buildup/(BUILDUP_MAX/2), 256, 0);
         A_StartSound("weapons/shipgun/explode", lch_body);
         let original_target = target;
         for(let it = BlockThingsIterator.create(self, 512); it.next();) {
            let th = it.thing;
            if(!th) continue;
            if(th.player) {
               th.A_SetBlend("White", 0.1, int(35*2*(2048-distance2d(th))/1536.0));
            } else {
               let majin_bu = Lith_FortuneBuildup(th);
               if(majin_bu && majin_bu.m_buildup != BUILDUP_EXPLODED) {
                  let majin_buildup = majin_bu.m_buildup;
                  majin_bu.lith_triggerExplosion();
                  target = majin_bu;
                  A_CustomRailgun(100*majin_buildup/(BUILDUP_MAX/2), 0, "", "#ffffff", RGF_SILENT|RGF_EXPLICITANGLE|RGF_FULLBRIGHT|RGF_CENTERZ, 1, 9, "Lith_FortuneProjectilePuff", 0, 0, distance2d(majin_bu), 35*5*(1+majin_buildup/BUILDUP_MAX), 0.1, 0.1);
               }
            }
         }
         target = original_target;
      }
      SDXP BCDEFGHIJKLMNOPQRS 1;
      SDXP T 1 A_FadeOut;
      wait;
   }
}

class Lith_FortuneExplosion : Lith_Explosive {
   default {
      DamageType "Shrapnel";
      ExplosionDamage 100;
      ExplosionRadius 100;
      Lith_FortuneExplosion.Part "Lith_FortuneExplosionParticle";
      Lith_FortuneExplosion.NPart 2;
      +NoGravity
      +ForceRadiusDmg
   }
   meta class<Actor> m_particle;
   meta int m_numParticle;
   property Part: m_particle;
   property NPart: m_numParticle;
   states {
   Spawn:
      TNT1 A 0;
      TNT1 A 0 {
         if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Fortune_A)) {
            array<Lith_FortuneBuildup> buildup;
            for(let it = BlockThingsIterator.Create(self, 32); it.next();) {
               let pr = Lith_FortuneBuildup(it.thing);
               if(pr &&
                  self.pos.z >= pr.pos.z - 125 * pr.scale.y &&
                  self.pos.z < pr.pos.z + 125 * pr.scale.y)
               {
                  buildup.push(pr);
               }
            }
            int initial_buildup = 300;
            if(buildup.size()) {
               int total_buildup = initial_buildup / buildup.size();
               foreach(pr : buildup) {
                  pr.m_buildup += total_buildup;
               }
            } else {
               let pr = Lith_FortuneBuildup(spawn("Lith_FortuneBuildup", pos));
               pr.m_buildup = initial_buildup;
            }
         }
         a_explode(explosionDamage, explosionRadius, xf_nosplash, fulldamagedistance: explosionRadius);
         a_quake(3, 20, 0, 640);
         for(int i = 0; i < m_numParticle; i++)
            spawn(m_particle, pos);
         lith_a_explodeSound();
         return lith_a_doExplosion();
      }
      stop;
   }
}

class Lith_FortuneExplosion2 : Lith_FortuneExplosion {
   default {
      ExplosionDamage 15;
      ExplosionRadius 80;
      Scale 0.5;
      Lith_FortuneExplosion.Part "Lith_FortuneExplosionParticle2";
      Lith_FortuneExplosion.NPart 1;
   }
}

class Lith_FortuneShot : FastProjectile {
   default {
      Radius 5;
      Height 5;
      DamageFunction 100;
      Speed 170;
   }
   states {
   Spawn:
      TNT1 A -1;
      stop;
   Death:
      TNT1 A 1 A_StartSound("weapons/fortune/hit", lch_body, attenuation: 0.2, pitch: frandom[Lith_Fortune](0.5, 1.0));
      TNT1 A 0 A_SpawnItemEx("Lith_FortuneExplosion", flags: SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
      stop;
   }
}

class Lith_FortuneShot2 : Lith_FortuneShot {
   default {
      DamageFunction 15;
   }
   states {
   Death:
      TNT1 A 1 A_StartSound("weapons/fortune/hit", lch_body, attenuation: 0.2, pitch: frandom[Lith_Fortune](0.5, 1.0));
      TNT1 A 0 A_SpawnItemEx("Lith_FortuneExplosion2", flags: SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
      stop;
   }
}

class Lith_FortuneProjectile : Actor {
   default {
      Height 1;
      Radius 1;
      Projectile;
      Lith_FortuneProjectile.Proj "Lith_FortuneShot";
      Species "Lith_Player";
      +DontHarmSpecies
      +NoClip
      -ActivateImpact
      -ActivatePCross
   }
   meta class<Actor> m_projectile;
   property Proj: m_projectile;
   override void postBeginPlay() {
      super.postBeginPlay();
      let prj = a_spawnProjectile(m_projectile, flags: CMF_AIMDIRECTION|CMF_SAVEPITCH|CMF_ABSOLUTEPITCH, pitch: pitch);
      prj.target = target;
   }
   override void tick() {
      if(!isFrozen()) {
         Lith_UTIL.stateTick(self);
      }
   }
   states {
   Spawn:
      TNT1 A 0;
      TNT1 AAAAAAAA 2 {
         A_StartSound("weapons/fortune/spark", lch_body, 0, frandom[Lith_Fortune](0.1, 0.3), 2.0, frandom[Lith_Fortune](0.5, 1.5));
         A_CustomRailgun(50, 0, "", Lith_UTIL.colorLerp("#ffffff", "#91c3ff", fRandom[Lith_Fortune](0.0, 1.0)), RGF_SILENT|RGF_EXPLICITANGLE|RGF_FULLBRIGHT|RGF_CENTERZ, 0, 50, "Lith_FortuneProjectilePuff", 0, 0, 16000, 10, 0.2, 0, spawnofs_z: 32);
      }
      stop;
   }
}

class Lith_FortuneProjectile2 : Lith_FortuneProjectile {
   default {
      Lith_FortuneProjectile.Proj "Lith_FortuneShot2";
   }
   states {
   Spawn:
      TNT1 A 0;
      TNT1 AAA 1 {
         A_StartSound("weapons/fortune/spark", lch_body, 0, frandom[Lith_Fortune](0.1, 0.3), 2.0, frandom[Lith_Fortune](0.5, 1.5));
         A_CustomRailgun(20, 0, "", "#ffffff", RGF_SILENT|RGF_EXPLICITANGLE|RGF_FULLBRIGHT|RGF_CENTERZ, 0, 5, "Lith_FortuneProjectilePuff", 0, 0, 16000, 10, 0.2, 0, spawnofs_z: 32);
      }
      stop;
   }
}

class Lith_FortuneSpark : Lith_ShockEffect {
   default {
      Projectile;
      +ForceXyBillboard
   }
   states {
   Spawn:
      ZAP1 FFEEFFEEFFEEDDCCBBCCBBAABBAA 1 {
         if(target && target.player) {
            A_Warp(AAPTR_TARGET, cos(target.pitch)*16, 4, target.player.viewZ-target.player.mo.viewheight-target.pos.z+lith_hermes.getAttackHeight(target)-sin(target.pitch)*16, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
            angle = target.angle;
            pitch = target.pitch;
         }
         if(random[Lith_Fortune](0, 1) == 0) {
            A_CustomRailgun(5, 0, "", "White", RGF_SILENT|RGF_EXPLICITANGLE|RGF_FULLBRIGHT|RGF_CENTERZ, 0, 10, "Lith_ShockEffectPuff", FRandom[Lith_Fortune](-45, 45), FRandom[Lith_Fortune](-45, 45), FRandom[Lith_Fortune](100,400), 10, 0.2, 0);
         }
      }
      stop;
   }
}

class Lith_FortuneGun : Lith_DWeapon;

default {
   Lith_Weapon.SpawnType "Lith_PlasmaRiflePickup";
   Tag "$LITH_INFO_SHORT_FortuneGun";
   Weapon.SlotNumber 6;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/fortune/draw";
   Lith_Weapon.AdsZoom 1.4;
   Lith_Weapon.AdsInSound "weapons/ionrifle/zoomin";
   Lith_Weapon.AdsOutSound "weapons/ionrifle/zoomout";
   Lith_Weapon.AmmoType "Lith_PlasmaAmmo";
   Inventory.AltHudIcon "FORTZ0";
   +Weapon.NoAutoFire
   +Lith_Weapon.HitScan
}

int m_chargeTime;

override void markPrecacheSounds() {
   super.markPrecacheSounds();
   markSound("weapons/fortune/hit");
   markSound("weapons/fortune/spark");
   markSound("weapons/fortune/fire");
   markSound("weapons/fortune/charge");
   markSound("weapons/spas/empty");
}

action(Weapon) void Lith_A_FireFortune() {
   lith_takeAmmo(350);
   A_StartSound("weapons/fortune/fire", lch_weapon, attenuation: 0.5, pitch: frandom[Lith_Fortune](0.9, 1.05));
   lith_gunFlash();
   soundAlert(invoker.owner);
   A_Recoil(12);
   A_Quake(2, 15, 0, 128);
   let pr = A_FireProjectile("Lith_FortuneProjectile", spawnheight: -32);
   pr.pitch = self.pitch;
   Lith_A_RecoilUp(10);
   A_FireProjectile("Lith_LightProjectileSkyLong", 0);
}

action(Weapon) void Lith_A_FireFortune2() {
   lith_takeAmmo(50);
   A_StartSound("weapons/fortune/fire", lch_weapon, attenuation: 0.5, pitch: frandom[Lith_Fortune](1.3, 1.5));
   lith_gunFlash();
   soundAlert(invoker.owner);
   A_Recoil(4);
   let pr = A_FireProjectile("Lith_FortuneProjectile2", spawnheight: -32);
   pr.pitch = self.pitch;
   pr.target = self;
   Lith_A_RecoilUp(2);
   A_FireProjectile("Lith_LightProjectileSkyLong", 0);
}

action(Weapon) bool lith_a_emitFortuneSpark() {
   if(!invoker.lith_noAmmo()) {
      if(!invoker.m_ads) {
         let mo = spawn("Lith_FortuneSpark", pos);
         mo.target = self;
         A_FireProjectile("Lith_LightProjectileSkyShort", 0);
      }
      return true;
   } else {
      return false;
   }
}

states(Weapon) {
AltReady:
   SCOP D 1 Lith_A_Ready(WRF_NOBOB|WRF_ALLOWUSER1);
   goto Ready1;
Ready:
   FORT A 1 Lith_A_Ready(WRF_ALLOWUSER1);
Ready1:
   #### # 0 {
      if(random[Lith_Fortune](0, 77) == 0 || level.time % 50 == 0) {
         if(lith_a_emitFortuneSpark()) {
            A_StartSound("weapons/fortune/spark", lch_weapon3, volume: fRandom[Lith_Fortune](0.6, 0.8), pitch: frandom[Lith_Fortune](0.9, 1.2));
         }
      }
   }
   goto ReadySelector;
Deselect:
   FORT A 1 Lith_A_Lower(_raise_slow);
   loop;
Select:
   FORT A 1 Lith_A_Raise(_raise_slow);
   loop;
User1:
   #### # 7;
   #### # 0 Lith_A_AdsToggle(_ads_scope);
   goto ReadySelector;
Fire:
   #### # 0 lith_jumpNoAmmo(350);
   #### # 0 {
      A_StartSound("weapons/fortune/charge", lch_weapon2);
      invoker.m_chargeTime = 4;
   }
FireCharge:
   #### # 0 {
      if(random(0,1)) lith_a_emitFortuneSpark();
   }
   #### ###### 1 a_overlayOffset(_psp_weapon, !invoker.m_ads ? fRandom[Lith_Fortune](0, 4) : 0, fRandom[Lith_Fortune](32, 34), wof_interpolate);
   #### # 0 a_jumpIf(--invoker.m_chargeTime, "FireCharge");
Fire2:
   #### # 0 lith_jumpNoAmmo(350);
   #### # 0 a_jumpIf(invoker.m_ads, "FireScope");
FireNoScope:
   FORT A 1 offset(2, 33);
   FORT A 1 offset(2, 34);
   FORT A 0 lith_a_emitFortuneSpark;
   FORT A 1 offset(5, 37);
   FORT B 2 bright offset(1, 32) Lith_A_FireFortune;
   FORT C 2 offset(2, 34);
   FORT C 1 offset(-1, 32);
   FORT A 0;
   goto Fire3;
FireScope:
   SCOP D 1 offset(0, 33);
   SCOP D 1 offset(0, 34);
   SCOP D 0 lith_a_emitFortuneSpark;
   SCOP D 1 offset(0, 37);
   SCOP D 2 bright offset(0, 32) Lith_A_FireFortune;
   SCOP D 2 offset(0, 34);
   SCOP D 1 offset(0, 32);
   SCOP D 0;
Fire3:
   #### # 3 offset(22, 64);
   #### # 3 offset(19, 60);
   #### # 3 offset(16, 55);
   #### # 2 offset(15, 52);
   #### # 2 offset(14, 50);
   #### # 2 offset(13, 48);
   #### # 1 offset(12, 44);
   #### # 1 offset(11, 43);
   #### # 1 offset(10, 42);
   #### # 1 offset(8, 41);
   #### # 1 offset(7, 40);
   #### # 2 offset(6, 38);
   #### ### 1 offset(5, 37) A_ReFire("Fire2");
   #### #### 1 offset(4, 36) a_weaponReady(WRF_NOBOB);
   #### ##### 1 offset(3, 35) a_weaponReady(WRF_NOBOB);
   #### ###### 1 offset(2, 34) a_weaponReady(WRF_NOBOB);
   #### ####### 1 offset(1, 33) a_weaponReady(WRF_NOBOB);
   #### # 0 a_startSound("weapons/fortune/load", lch_dryweapon);
   #### ######## 1 offset(1, 32) a_weaponReady(WRF_NOBOB);
   goto ReadySelector;
FireEmpty:
   #### # 2 offset(3, 38);
   #### # 1 offset(7, 40);
   #### # 1 offset(5, 37) A_StartSound("weapons/spas/empty", lch_dryweapon);
   #### # 1 offset(4, 34);
   #### # 1 offset(2, 33);
   #### # 5 offset(1, 32);
   goto ReadySelector;
}

/* EOF */
