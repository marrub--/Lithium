// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_SwitchableDecor : Actor abstract {
   default {
      Mass int.max;
      Activation AF_DEFAULT|AF_NODEATHSPECIAL|AF_SWITCH|AF_DEACTIVATE;
      Lith_SwitchableDecor.Volume 1;
      +Solid
      +UseSpecial
      +ForceYBillboard
      +CastSpriteShadow
   }

   meta sound m_IdleNoise;
   meta double m_Volume;

   property Noise: m_IdleNoise;
   property Volume: m_Volume;

   override void markPrecacheSounds() {
      super.markPrecacheSounds();
      markSound(m_idleNoise);
      markSound("amb/turnon");
      markSound("amb/turnoff");
   }

   virtual void Lith_Active() {
      if(m_IdleNoise)
         A_StartSound(m_IdleNoise, lch_body, CHANF_LOOP, m_Volume, ATTN_STATIC);
   }

   virtual void Lith_Inactive() {
      A_StopSound(lch_body);
   }

   override void PostBeginPlay() {
      Super.PostBeginPlay();
      Lith_Active();
   }

   override void Die(Actor source, Actor inflictor, int dmgflags) {
      Super.Die(source, inflictor, dmgflags);
      bUseSpecial = false;
      Lith_Inactive();
   }

   override void Activate(Actor mo) {
      if(health > 0) {
         Lith_Active();
         A_StartSound("amb/turnon", lch_body2);
         SetStateLabel("Spawn");
      }
   }

   override void Deactivate(Actor mo) {
      if(health > 0) {
         Lith_Inactive();
         A_StartSound("amb/turnoff", lch_body2);
         SetStateLabel("Inactive");
      }
   }
}

class Lith_DestructableSwitchDecor : Lith_SwitchableDecor abstract {
   default {
      +SHOOTABLE
      +NOBLOOD
      +NOTAUTOAIMED
   }
}

class Lith_FlareDecor : Lith_DestructableSwitchDecor abstract {
   meta class<Actor> m_Type;
   Actor m_Flare;

   property Type: m_Type;

   override void Lith_Active() {
      Super.Lith_Active();
      m_Flare = Spawn(m_Type, pos);
      m_Flare.master = self;
   }

   override void Lith_Inactive() {
      Super.Lith_Inactive();
      if(m_Flare) m_Flare.destroy();
   }
}

class Lith_DecorFlare : Actor abstract {
   default {
      Radius 2;
      Renderstyle "Add";
      Alpha 0.5;
      +NotOnAutoMap
      +NoInteraction
      +ForceXyBillboard
   }

   override void tick() {
      a_warp(AAPTR_MASTER, 0, 0, height, 0, WARPF_COPYINTERPOLATION | WARPF_NOCHECKPOSITION);
   }
}

class Lith_DecorFlareB : Lith_DecorFlare {states {Spawn: BLGL A -1; stop;}}
class Lith_DecorFlareG : Lith_DecorFlare {states {Spawn: GRGL A -1; stop;}}
class Lith_DecorFlareR : Lith_DecorFlare {states {Spawn: RDGL A -1; stop;}}
class Lith_DecorFlareY : Lith_DecorFlare {states {Spawn: YLGL A -1; stop;}}

/* EOF */
