// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_RifleLaserTrail : Actor
{
   default
   {
      RenderStyle "Add";
      Scale 0.14;

      +NOINTERACTION
      +NOTIMEFREEZE
   }

   states
   {
   Spawn:
      BLLT E 0 bright;
      BLLT E 0 bright A_JumpIf(Random(0, 255) < 10, "Spawn2");
   Spawn1:
      BLLT E 5 bright;
      goto Spawn3;
   Spawn2:
      BLLT E 5 bright light("Lith_FinalizerLight");
   Spawn3:
      BLLT E 1 bright {if(Scale.X < 0.05) Destroy(); else Scale -= (0.035, 0.035);}
      loop;
   }
}

class Lith_LaserRiflePuff : Actor
{
   default
   {
      DamageType "Electric";

      +ALWAYSPUFF
      +FORCEDECAL
   }

   states {
   Spawn:
      TNT1 A 1;
      stop;
   }
}

class Lith_CombatRifle : Lith_MWeapon;

default
{
   Lith_Weapon.SpawnType "Lith_ChaingunPickup";
   Lith_Weapon.MagSize 50;
   Tag "$LITH_INFO_SHORT_CombatRifle";
   Weapon.SlotNumber 4;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/rifle/draw";
   Inventory.AltHudIcon "RIFLA0";
   Lith_Weapon.AmmoType "Lith_BulletAmmo";

   +Weapon.NoAutoAim
   +Lith_Weapon.HitScan
}

int  m_Burst;
bool m_GrenFire;

override double, double Lith_GetFirePattern()
{
   switch(m_FirePattern = (m_FirePattern + 1) % 18) {
   case 0:  return  1, -0.5;
   case 1:  return -1, -1;
   case 2:  return  1,  0;
   case 3:  return  1, -1;
   case 4:  return  0,  0;
   case 5:  return  0, -1;
   case 6:  return -1,  0.5;
   case 7:  return  0, -0.5;
   case 8:  return  1,  0.5;
   case 9:  return  1,  0;
   case 10: return  0,  0;
   case 11: return  0,  0.5;
   case 12: return -1,  0;
   case 13: return -1,  1;
   case 14: return  0,  1;
   case 15: return -1,  0;
   case 16: return -1, -0.5;
   case 17: return  1,  1;
   }
   return 0, 0;
}

action(Weapon) void Lith_A_FireRifle()
{
   lith_takeAmmo();
   Lith_A_MagIncr();
   lith_gunFlash();
   soundAlert(invoker.owner);
   Lith_A_RecoilUp(0.4);
   A_FireProjectile("Lith_LightProjectileRedShort", 0);
   if(!Lith_UTIL.pData(_pdt_upgrade, UPGR_Rifle_B))
   {
      Lith_A_GunSmokeAndSparksSmall();

      if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Seven7s))
         A_StartSound("marathon/rifle/fire", lch_weapon);
      else
      {
         let ro1 = CallACS("Lith_AmmoRunOut", false)/FIX;
         let ro2 = CallACS("Lith_AmmoRunOut", true) /FIX;
         A_StartSound("weapons/rifle/fire",   lch_weapon,    volume: ro1);
         A_StartSound("weapons/rifle/firero", lch_dryweapon, volume: ro2);
      }

      for(int i = 0; i < 2; i++)
      {
         class<Actor> cl = Random(0, 256) < 128 ? "Lith_RifleBullet"
                                                : "Lith_RifleBulletPainless";
         Lith_FixedBullets(1, 1, pufftype: cl);
      }
   }
   else
   {
      A_StartSound("weapons/rcw/fire", lch_weapon);

      for(int i = 0; i < 2; i++) {
         A_RailAttack(8, 0, true, "", "Red", RGF_SILENT|RGF_FULLBRIGHT, 0, "Lith_LaserRiflePuff", 5.77, 3, 0, 0, 4, 0, "Lith_RifleLaserTrail", 0);
      }
   }
}

action(Weapon) void Lith_A_FireRifleBurst()
{
   lith_takeAmmo();
   Lith_A_MagIncr();
   lith_gunFlash();
   soundAlert(invoker.owner);
   for(int i = 0; i < 2; i++)
   {
      if(!Lith_UTIL.pData(_pdt_upgrade, UPGR_Rifle_B))
      {
         A_StartSound("weapons/rifle/firesnipe", lch_weapon);
         Lith_FireBullets(0, 0, -3, 1, FBF_NORANDOM, "Lith_RifleBullet");
      }
      else
      {
         A_StartSound("weapons/rcw/firesnipe", lch_weapon);
         A_RailAttack(8, 0, true, "", "Red", RGF_SILENT|RGF_FULLBRIGHT, 0, "Lith_LaserRiflePuff", 2, 2, 0, 0, 4, 0, "Lith_RifleLaserTrail", 0);
      }
   }
}

action(Weapon) void Lith_A_FireRifleGrenade()
{
   invoker.m_GrenFire = true;
   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Seven7s))
      A_StartSound("marathon/rifle/grenade", lch_weapon);
   else
      A_StartSound("weapons/rifle/grenade", lch_weapon);
   SoundAlert(Invoker.Owner);
   A_FireProjectile("Lith_RifleGrenade");
}

states(Weapon)
{
Ready:
   CRFG A 1 Lith_A_Ready(WRF_ALLOWRELOAD);
   loop;

Deselect:
   CRFG A 1 Lith_A_Lower(_raise_fast);
   loop;

Select:
   CRFG A 0 ACS_ScriptCall("Lith_ResetRifleMode");
SelectLoop:
   CRFG A 1 Lith_A_Raise(_raise_fast);
   loop;

Fire:
   CRFG A 0 A_JumpIf(Lith_UTIL.pData(_pdt_riflemode) == rifle_firemode_grenade, "FireGrenade");
   CRFG A 0 lith_jumpNoAmmo;
   CRFG A 0 Lith_A_JumpIfMagEmpty;
   CRFG A 0 A_JumpIf(Lith_UTIL.pData(_pdt_riflemode) == rifle_firemode_burst, "FireBurstStart");
   CRFG B 1 bright Lith_A_FireRifle;
   CRFG C 1 bright Lith_A_RecoilDn(0.35);
   CRFG A 1 Lith_A_RecoilDn(0.2);
   CRFG A 0 Lith_A_RecoilDn(0.4);
   CRFG AAAAAA 1 A_ReFire;
   goto ReadySelector;
FireBurstStart:
   #### # 0 {invoker.m_Burst = 5;}
FireBurst:
   CRFG B 1 bright Lith_A_FireRifleBurst;
   CRFG C 1 bright;
   CRFG C 1;
   CRFG A 0 A_JumpIf(--invoker.m_Burst == 0, "FireBurstDone");
   loop;
FireBurstDone:
   CRFG A 4;
   CRFG A 2 A_JumpIf(!Lith_UTIL.pData(_pdt_upgrade, UPGR_Rifle_B), 2);
   CRFG AAAAAA 1 A_Refire;
   goto ReadySelector;
FireGrenade:
   #### # 0 A_JumpIf(invoker.m_GrenFire, "GrenadeReload");
   CRFG G 2 bright Lith_A_FireRifleGrenade;
   CRFG H 2 bright;
   CRFG I 2 bright;
   CRFG A 5;
   CRFG A 1 A_ReFire;
   goto ReadySelector;
GrenadeReload:
   CRFG A 1 offset(1, 32) {
      lith_a_setInterpolation(true);
      if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Seven7s))
         A_StartSound("marathon/rifle/reload", lch_reload);
      else
         A_StartSound("weapons/rifle/rldmount", lch_reload);
   }
   CRFG A 1 offset(3, 32);
   CRFG A 1 offset(4, 32);
   CRFG A 1 offset(8, 38);
   CRFG A 1 offset(12, 45);
   CRFG A 1 offset(16, 53);
   CRFG A 1 offset(19, 60);
   CRFG A 1 offset(21, 64) Lith_A_ReloadBobDn(0.1);
   CRFG A 1 offset(23, 67) Lith_A_ReloadBobDn(0.1);
   CRFG A 1 offset(22, 69) Lith_A_ReloadBobDn(0.1);
   CRFG A 1 offset(19, 70) Lith_A_ReloadBobDn(0.1);
   CRFG A 7 offset(18, 72) Lith_A_ReloadBobDn(0.1);
   CRFG A 1 offset(17, 69);
   CRFG A 1 offset(19, 67);
   CRFG A 1 offset(20, 66);
   CRFG A 1 offset(21, 62) Lith_A_ReloadBobUp(0.4);
   CRFG A 1 offset(20, 60) {Lith_A_ReloadBobUp(0.4); invoker.m_GrenFire = false;}
   CRFG A 1 offset(21, 63);
   CRFG A 1 offset(23, 66);
   CRFG A 1 offset(24, 68);
   CRFG A 1 offset(25, 63);
   CRFG A 1 offset(24, 59);
   CRFG A 1 offset(22, 57);
   CRFG A 1 offset(20, 54);
   CRFG A 1 offset(16, 49);
   CRFG A 1 offset(12, 44);
   CRFG A 1 offset(10, 42);
   CRFG A 1 offset(8, 40);
   CRFG A 1 offset(5, 38);
   CRFG A 1 offset(2, 35);
   CRFG A 8 offset(0, 32) lith_a_setInterpolation(false);
   goto ReadySelector;

FireEmpty:
   #### # 1;
   #### # 1 offset(0, 45);
   #### # 1 offset(0, 43);
   #### # 1 offset(0, 40) A_StartSound("weapons/empty", lch_dryweapon);
   #### # 1 offset(0, 38);
   #### # 1 offset(0, 36);
   #### # 1 offset(0, 33);
   #### # 1 offset(0, 32);
   #### # 2;
   goto ReadySelector;

AltFire:
   #### # 0 A_JumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_Rifle_A), "SwitchMode");
   goto FireGrenade;
SwitchMode:
   CRFG A 0 ACS_ScriptCall("Lith_SwitchRifleFiremode", 0);
   CRFG A 0 Lith_A_ReloadBobDn(0.1);
   CRFG DEF 1;
   CRFG A 9 A_WeaponReady(WRF_NOSECONDARY);
   goto ReadySelector;

Reload:
   #### # 0 Lith_A_JumpIfMagFull;
   CRFG K 1 lith_a_setInterpolation(true);
   CRFG J 1 offset(-2, 34);
   CRFG J 1 offset(-4, 37);
   CRFG J 0 Lith_A_ReloadBobUp(0.1);
   CRFG J 1 offset(-9, 43) A_StartSound("weapons/rifle/reloadout", lch_reload);
   CRFG J 1 offset(-12, 47) Lith_A_ReloadBobUp(0.1);
   CRFG J 0 Lith_A_ReloadBobUp(0.1);
   CRFG J 1 offset(-14, 52) Lith_A_DropMag("Lith_CombatRifleMagazine", "Lith_CombatRifleMagazine2", 9,0,20, frandom(0,1),frandom(-1,-4),0);
   CRFG J 0 Lith_A_ReloadBobUp(0.1);
   CRFG J 2 offset(-12, 55);
   CRFG J 3 offset(-11, 57);
   CRFG J 8 offset(-10, 60);
   CRFG J 8 offset(-11, 60);
   CRFG J 0 Lith_A_ReloadFinish;
   CRFG J 0 Lith_A_ReloadBobDn(0.1);
   CRFG J 2 offset(-13, 59) A_StartSound("weapons/rifle/reloadin", lch_reload2);
   CRFG J 2 offset(-11, 49) {
      Lith_A_ReloadBobDn(0.7);
      lith_a_setInterpolation(false);
   }
   CRFG J 2 offset(-11, 47) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   CRFG A 7 offset(-11, 45) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   CRFG A 1 offset(-12, 49) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   CRFG A 1 offset(-8, 53) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   CRFG A 1 offset(-1, 57) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   CRFG A 1 offset(3, 56) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   CRFG A 1 offset(8, 52) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   CRFG A 1 offset(10, 49) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   CRFG A 1 offset(8, 47) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   CRFG A 1 offset(7, 45) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   CRFG A 2 offset(5, 43) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   CRFG A 2 offset(3, 40) A_WeaponReady(WRF_NOBOB);
   CRFG A 3 offset(2, 39) A_WeaponReady(WRF_NOBOB);
   CRFG A 3 offset(1, 37) A_WeaponReady(WRF_NOBOB);
   CRFG A 4 offset(1, 34) A_WeaponReady(WRF_NOBOB);
   CRFG A 4 A_WeaponReady(WRF_NOBOB);
   goto ReadySelector;
}

/* EOF */
