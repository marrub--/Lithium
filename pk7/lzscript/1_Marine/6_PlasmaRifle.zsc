// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_ParticleBeamPuff : Actor
{
   default
   {
      DamageType "Electric";

      +AlwaysPuff
      +ForceDecal
   }
}

class Lith_ParticleBeam : Lith_PlasmaLaze
{
   default
   {
      DamageType "Electric";
      Mass 0;
      RenderStyle "Add";
      Scale 0.4;
      Translation "Lith_AllToBlueMid";
      +ForceRadiusDmg
      +ForceXyBillboard
      -NoTimeFreeze
   }

   states
   {
   Spawn:
      BLLT A 0;
      BLLT A 2 A_Explode(8, 256, xf_nosplash);
      BFS1 A 1 A_FadeOut(0.1);
      wait;
   }
}

class Lith_PlasmaRifle : Lith_MWeapon;

default
{
   Lith_Weapon.SpawnType "Lith_PlasmaRiflePickup";
   Lith_Weapon.MagSize 5;
   Tag "$LITH_INFO_SHORT_PlasmaRifle";
   Weapon.SlotNumber 6;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/plasma/draw";
   Lith_Weapon.AmmoType "Lith_PlasmaAmmo";
   Inventory.AltHudIcon "PLASA0";
   -Lith_Weapon.HitScan
}

override void markPrecacheSounds() {
   super.markPrecacheSounds();
   markSound("weapons/plasma/fire");
   markSound("weapons/plasma/part/fire");
   markSound("weapons/plasma/part/charge");
   markSound("weapons/plasma/part/reloadin");
   markSound("weapons/plasma/part/reloadout");
   markSound("weapons/plasma/altfire");
   markSound("weapons/plasma/empty");
   markSound("weapons/plasma/laser/fire_start");
   markSound("weapons/plasma/laser/fire_loop");
   markSound("weapons/plasma/laser/fire_hum");
   markSound("weapons/plasma/laser/fire_end");
}
action(Weapon) void Lith_A_FirePlasma()
{
   invoker.bHitScan = false;
   lith_takeAmmo(35);
   lith_gunFlash();
   soundAlert(invoker.owner);
   A_StartSound("weapons/plasma/fire", lch_weapon);
   for(int i = 0; i < 4; i++) {
      let [y, p] = Lith_UTIL.circleSpread(7, 3);
      A_FireProjectile("Lith_PlasmaBolt", y, false, 0, -9, 0, -p);
   }
   A_FireProjectile("Lith_LightProjectileGreenShort", 0);
}

action(Weapon) void Lith_A_FireLaser()
{
   invoker.bHitScan = true;
   lith_takeAmmo(10);
   SoundAlert(Invoker.Owner);
   A_FireBullets(0, 0, 1, 0, "Lith_PlasmaHit", FBF_NORANDOMPUFFZ);
   A_RailAttack(Lith_UTIL.pData(_pdt_upgrade, UPGR_TorgueMode) ? 1 : 12, 0, false, "", "Red", RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING, 0, "Lith_BasicPuff", 0, 0, 0, 1, 3, 0, "Lith_PlasmaLaze");
   A_FireProjectile("Lith_LightProjectileRedShort", 0);
}

action(Weapon) void Lith_A_FireRail()
{
   invoker.bHitScan = true;
   Lith_A_MagIncr();
   SoundAlert(Invoker.Owner);
   lith_takeAmmo(200);
   A_StartSound("weapons/plasma/part/fire", lch_weapon);
   A_RailAttack(400, 0, false, "", "Blue", RGF_SILENT|RGF_FULLBRIGHT, 0, "Lith_ParticleBeamPuff", 0, 0, 0, 0, 16, 0, "Lith_ParticleBeam", -8);
   A_FireProjectile("Lith_LightProjectileSkyLong", 0);
}

action(Weapon) void Lith_A_FireAltPlasma()
{
   lith_takeAmmo(90);
   lith_gunFlash();
   soundAlert(invoker.owner);
   A_FireProjectile("Lith_PenetratingPlasmaBolt", 0, false, 0, -9);
   A_FireProjectile("Lith_PenetratingPlasmaBolt", frandom(-2.7, -1.9), false, 0, -9);
   A_FireProjectile("Lith_PenetratingPlasmaBolt", frandom(2.7, 1.9), false, 0, -9);
   A_StartSound("weapons/plasma/altfire", lch_weapon);
   A_FireProjectile("Lith_LightProjectileRedLong", 0);
}

action(Weapon) void Lith_A_EmitIons(int spars)
{
   A_RailAttack(0, 0, false, "", "White", RGF_SILENT|RGF_FULLBRIGHT, spars, "Lith_BasicPuff", 0, 0, 0, 1, 0.75, 0, "", -2);
}

states(Weapon)
{
Ready:
   PLSG A 1 Lith_A_Ready(WRF_ALLOWRELOAD);
   loop;

Deselect:
   PLSG A 0 {A_StopSound(lch_weapon2); A_StopSound(lch_weapon3);}
DeselectLoop:
   PLSG A 1 Lith_A_Lower(_raise_fast);
   loop;

Select:
   PLSG A 1 Lith_A_Raise(_raise_fast);
   loop;

Fire:
   PLSG A 0 A_JumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_Plasma_A), "FireLaser");
   PLSG A 0 A_JumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_Plasma_B), "FireParticleBeam");
FireReal:
   PLSG A 0 lith_jumpNoAmmo;
   PLSJ A 1 offset(0, 37) bright Lith_A_FirePlasma;
   PLSJ B 1 offset(0, 36) bright;
   PLSJ C 1 offset(0, 32);
   PLSG AAAA 1 A_ReFire;
   goto ReadySelector;
FireLaser:
   PLSG A 0 lith_jumpNoAmmo;
   PLSK A 0 {
      A_StartSound("weapons/plasma/laser/fire_start", lch_weapon);
      A_StartSound("weapons/plasma/laser/fire_loop", lch_weapon2, CHANF_LOOP);
      A_StartSound("weapons/plasma/laser/fire_hum",  lch_weapon3, CHANF_LOOP, 0.4);
      Lith_A_FireLaser();
   }
   PLSK AA 1 offset(0, 35) bright Lith_A_FireLaser;
FireLaserLoop:
   PLSG A 0 lith_jumpNoAmmo;
   PLSK B 1 offset(0, 39) bright Lith_A_FireLaser;
   PLSK BB 1 offset(-2, 38) bright Lith_A_FireLaser;
   PLSK B 1 offset(1, 37) bright Lith_A_FireLaser;
   PLSK B 1 offset(-1, 40) bright Lith_A_FireLaser;
   PLSK CC 1 offset(1, 37) bright A_ReFire("FireLaserLoop");
FireLaserDone:
   PLSG A 1 offset(1, 36) {
      A_StopSound(lch_weapon3);
      A_StartSound("weapons/plasma/laser/fire_end", lch_weapon2);
   }
   PLSG A 1 offset(0, 35);
   PLSG A 1 offset(0, 34);
   PLSG A 1 offset(0, 33);
   PLSG A 1 offset(0, 32);
   PLSG A 1;
   goto ReadySelector;
FireParticleBeam:
   PLSG A 0 lith_jumpNoAmmo;
   PLSG A 0 Lith_A_JumpIfMagEmpty;
   PLSG A 3 A_StartSound("weapons/plasma/part/charge", lch_weapon2);
   PLSG A 3 offset(0, 33) Lith_A_EmitIons(5);
   PLSG A 3;
   PLSG A 3 Lith_A_EmitIons(4);
   PLSG A 2;
   PLSG A 3 offset(0, 34) Lith_A_EmitIons(3);
   PLSG A 1;
   PLSG A 3 Lith_A_EmitIons(2);
   PLSG A 1;
   PLSG A 3 offset(0, 35) Lith_A_EmitIons(2);
   PLSF A 1 bright offset(0, 55) Lith_A_FireRail;
   PLSF A 1 bright offset(0, 45);
   PLSF B 1 bright offset(0, 37);
   PLSF B 1 bright offset(0, 36);
   PLSF C 1 bright offset(0, 35);
   PLSG A 1 offset(0, 35);
   PLSG A 3 offset(0, 34);
   PLSG A 4 offset(0, 33);
   PLSG A 5 offset(0, 32);
   PLSG AAAAA 1 A_ReFire;
   goto ReadySelector;
FireEmpty:
   #### # 1 {
      A_StopSound(lch_weapon2);
      A_StopSound(lch_weapon3);
      A_StartSound("weapons/plasma/empty", lch_dryweapon);
   }
   #### # 1 offset(0, 37);
   #### # 1 offset(0, 36);
   #### # 1 offset(0, 35);
   #### # 1 offset(0, 34);
   #### # 1 offset(0, 32);
   #### # 1 A_ReFire;
   goto ReadySelector;

AltFire:
   PLSG A 0 A_JumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_Plasma_A), "FireReal");
   PLSG A 0 A_JumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_Plasma_B), "FireReal");
   #### # 0 lith_jumpNoAmmo;
   PLSK A 1 offset(0, 37) bright Lith_A_FireAltPlasma;
   PLSK C 1 offset(0, 36) bright;
   PLSG A 1 offset(0, 35);
   PLSG A 1 offset(0, 34);
   PLSG A 1 offset(0, 32);
   PLSG AAAA 1 A_ReFire;
   goto ReadySelector;

Reload:
   #### # 1 Lith_A_JumpIfMagFull;
   #### # 0 lith_a_setInterpolation(true);
   PLSG A 1 offset(-2, 34);
   PLSG A 1 offset(-4, 37);
   PLSG A 1 offset(-9, 43) {
      A_StartSound("weapons/plasma/part/reloadout", lch_reload);
      Lith_A_ReloadBobDn(0.5);
   }
   PLSG A 1 offset(-12, 47);
   PLSG A 1 offset(-14, 52);
   PLSG A 2 offset(-12, 55);
   PLSG A 3 offset(-11, 57);
   PLSG A 8 offset(-10, 60);
   PLSG A 8 offset(-11, 60);
   PLSG A 2 offset(-13, 59) {
      A_StartSound("weapons/plasma/part/reloadin", lch_reload2);
      Lith_A_ReloadFinish();
      Lith_A_ReloadBobUp(0.5);
   }
   PLSG A 2 offset(-11, 49);
   #### # 0 lith_a_setInterpolation(false);
   PLSG A 2 offset(-11, 47) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   PLSG A 7 offset(-11, 45) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   PLSG A 1 offset(-12, 49) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   PLSG A 1 offset(-8, 53) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   PLSG A 1 offset(-1, 57) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   PLSG A 2 offset(3, 56) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   PLSG A 2 offset(8, 52) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   PLSG A 2 offset(10, 49) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   PLSG A 2 offset(8, 47) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   PLSG A 2 offset(7, 45) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   PLSG A 2 offset(5, 43) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   PLSG A 2 offset(3, 40) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
   PLSG A 3 offset(2, 39) A_WeaponReady(WRF_NOBOB);
   PLSG A 3 offset(1, 37) A_WeaponReady(WRF_NOBOB);
   PLSG A 4 offset(1, 34) A_WeaponReady(WRF_NOBOB);
   PLSG A 4 A_WeaponReady(WRF_NOBOB);
   goto ReadySelector;
}

/* EOF */
