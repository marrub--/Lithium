// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_PlasmaPistolShotTrail : Actor
{
   default
   {
      Alpha 1;
      RenderStyle "Add";
      Scale 0.4;

      +NOINTERACTION
   }

   states
   {
   Spawn:
      BLLT A 0;
      BLLT A 1 bright {A_SetScale(Scale.X * 0.9); A_FadeOut(0.1);}
      loop;
   }
}

class Lith_PlasmaPistolShot : FastProjectile
{
   default
   {
      Alpha 1;
      Damage 6;
      DeathSound "weapons/pistol/plasma/explode";
      Height 16;
      Radius 6;
      RenderStyle "Add";
      Scale 0.4;
      Speed 40;

      Projectile;
   }

   states
   {
   Spawn:
      BLLT A 1 bright light("Lith_PlasmaPistolLight") A_SpawnItemEx("Lith_PlasmaPistolShotTrail");
      loop;
   Death:
      PLSE AAAAAAAAA 0 A_SpawnItemEx("Lith_GaussExplosionParticle", FRandom(-4, 4), FRandom(-4, 4), FRandom(-8, 8), FRandom(-4, 4), FRandom(-4, 4), FRandom(4, 7), 0, SXF_NOCHECKPOSITION);
      PLSE ABCDE 3 bright light("Lith_PlasmaPistolLight");
      stop;
   }
}

class Lith_Pistol : Lith_MWeapon;

default
{
   Lith_Weapon.SpawnType "Lith_PistolPickup";
   Lith_Weapon.MagSize 14;
   Lith_Weapon.AdsInSound "weapons/pistol/zoomin";
   Lith_Weapon.AdsOutSound "weapons/pistol/zoomout";
   Lith_Weapon.AdsZoom 0.5;
   Tag "$LITH_INFO_SHORT_Pistol";
   Weapon.BobRangeX 0.2;
   Weapon.BobRangeY 0.3;
   Weapon.BobSpeed 3;
   Weapon.SlotNumber 2;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/pistol/draw";
   Inventory.AltHudIcon "PISTA0";
   +Weapon.NoAutoFire
   +Lith_Weapon.HitScan
}

override void markPrecacheSounds() {
   super.markPrecacheSounds();
   markSound("weapons/empty");
   markSound("weapons/pistol/fire");
   markSound("weapons/pistol/fireauto");
   markSound("weapons/pistol/reload");
   markSound("weapons/pistol/plasma/fire");
}
override double, double Lith_GetFirePattern()
{
   switch(m_FirePattern = (m_FirePattern + 1) % 4) {
   case 0: return  1,  0.5;
   case 1: return -1,  0.5;
   case 2: return  1, -0.5;
   case 3: return -1, -0.5;
   }
   return 0, 0;
}

action(Weapon) void Lith_A_FirePistol()
{
   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Pistol_B))
   {
      invoker.bHitScan = false;
      A_StartSound("weapons/pistol/plasma/fire", lch_weapon);
      A_FireProjectile("Lith_PlasmaPistolShot");
      return;
   }
   invoker.bHitScan = true;

   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Pistol_A))
      Lith_FixedBullets(1, 24);
   else
      Lith_FireBullets(0, 0, -1, 24, FBF_NORANDOM);

   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Pistol_A))
      A_StartSound("weapons/pistol/fireauto", lch_weapon);
   else
      A_StartSound("weapons/pistol/fire", lch_weapon);

   Lith_A_GunSmokeAndSparksSmall();
   A_FireProjectile("Lith_LightProjectileRedShort", 0);
}

states(Weapon)
{
AltReady:
   SCOP B 1 Lith_A_Ready(WRF_ALLOWRELOAD | WRF_NOBOB);
   loop;
Ready:
   MARP A 1 Lith_A_Ready(WRF_ALLOWRELOAD);
   loop;
Deselect:
   MARP A 1 Lith_A_Lower(_raise_fast);
   loop;
Select:
   MARP A 1 Lith_A_Raise(_raise_fast);
   wait;
Fire:
   #### # 0 Lith_A_JumpIfMagEmpty;
   #### # 0 Lith_A_MagIncr;
   #### # 0 soundAlert(invoker.owner);
   #### # 0 Lith_A_FirePistol;
   #### # 0 A_JumpIf(invoker.m_ads, "FireFinish_Scoped");
FireFinish_Unscoped:
   MARP A 1;
   MARP D 1 bright;
   MARP E 1 bright offset(0, 45);
   MARP E 1 bright offset(0, 40);
   MARP C 1 offset(0, 36);
   MARP A 0 A_JumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_Pistol_A), "FireFinish_Auto_Unscoped");
   MARP B 2 offset(0, 32) A_WeaponReady(WRF_ALLOWRELOAD);
   MARP AAAAA 1 A_WeaponReady(WRF_ALLOWRELOAD);
   goto ReadySelector;
FireFinish_Auto_Unscoped:
   MARP BB 1 A_ReFire;
   MARP A 0;
   goto FireFinish_Auto_Scoped;
FireFinish_Scoped:
   SCOP B 5 bright;
   SCOP B 0 A_JumpIf(Lith_UTIL.pData(_pdt_upgrade, UPGR_Pistol_A), "FireFinish_Auto_Scoped");
   SCOP BBBBB 1 A_WeaponReady(WRF_ALLOWRELOAD | WRF_NOBOB);
   goto ReadySelector;
FireFinish_Auto_Scoped:
   #### ##### 1 A_ReFire;
   goto ReadySelector;
FireEmpty:
   #### # 1;
   #### # 1 offset(0, 45);
   #### # 1 offset(0, 43);
   #### # 1 offset(0, 40) A_StartSound("weapons/empty", lch_dryweapon);
   #### # 1 offset(0, 38);
   #### # 1 offset(0, 36);
   #### # 1 offset(0, 33);
   #### # 1 offset(0, 32);
   #### # 2;
   goto ReadySelector;
AltFire:
   #### B 1;
   #### # 0 Lith_A_AdsToggle(_ads_scope);
   goto ReadySelector;
Reload:
   #### # 0 Lith_A_JumpIfMagFull;
   MARP A 0 Lith_A_AdsOut;
   MARP A 0 {
      A_StartSound("weapons/pistol/reload", lch_reload);
      lith_a_setInterpolation(true);
   }
   MARP A 1 offset(0, 34);
   MARP A 1 offset(0, 36);
   MARP B 1 offset(0, 50);
   MARP A 0 Lith_A_ReloadBobUp(0.2);
   MARP B 1 offset(-1, 51);
   MARP B 1;
   MARP B 4 offset(-2, 53) Lith_A_DropMag("Lith_PistolMagazine", "Lith_PistolMagazine2", 5,0,20, FRandom(1,3),0,0);
   MARP C 5;
   MARP A 0 Lith_A_ReloadBobDn(0.2);
   MARP B 1 offset(-1, 50);
   MARP B 1 offset(0, 45);
   MARP B 1 offset(0, 36);
   MARP B 2 lith_a_setInterpolation(false);
   MARP A 0 Lith_A_ReloadFinish;
   goto ReadySelector;
}

/* EOF */
