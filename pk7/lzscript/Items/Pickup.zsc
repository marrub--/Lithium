// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_ItemGlow : Actor {
   default {
      RenderStyle "Add";
      Alpha 0.7;
      Scale 0.1;
      Translation "Lith_ItemGlow";
      +ForceXyBillboard
      +NoInteraction
      +Bright
   }

   override void beginPlay() {
      super.beginPlay();
   }

   override void tick() {
      if(!master || !master.bSpecial || (!isFrozen() && getAge() > 5 && (alpha -= 0.03) < 0)) {
         destroy();
      }
   }

   states {
   Spawn:
      #EIG # -1;
      stop;
   }
}

class Lith_WeapGlow : Lith_ItemGlow {
   default {
      Translation "Lith_AllToBlueMid";
   }

   override void postBeginPlay() {
      super.postBeginPlay();
      if(lith_player_brightweps) {
         A_SetTranslation("Lith_AllToBlueBright");
      }
   }
}

class Lith_UpgrGlow : Lith_ItemGlow {
   default {
      Translation "None";
   }
}

mixin class Lith_Pickup {
   meta string m_pkSprGf;
   meta string m_pkSprAf;
   meta string m_pkSprCf;
   meta string m_pkSprDf;
   meta string m_pkSprIf;
   meta string m_pkSprMf;
   meta string m_pkSprTf;
   meta string m_pkSprWf;
   meta class<Actor> m_pkGlow;
   uint m_pkFlags;
   Actor m_pkSpr;
   int m_pkGlowFrame;
   double m_pkOffset;

   property Sprite: m_pkSprGf;
   property SpriteA: m_pkSprAf;
   property SpriteC: m_pkSprCf;
   property SpriteD: m_pkSprDf;
   property SpriteI: m_pkSprIf;
   property SpriteM: m_pkSprMf;
   property SpriteT: m_pkSprTf;
   property SpriteW: m_pkSprWf;
   property Glow: m_pkGlow;

   flagDef Pkup_NoSprite: m_pkFlags, 0;
   flagDef Pkup_NoGlow:   m_pkFlags, 1;
   flagDef Pkup_SpawnFx:  m_pkFlags, 2;

   void pkPostBeginPlay() {
      if(bDropped) {
         bPkup_NoGlow  = true;
         bPkup_SpawnFx = false;
      }
      m_pkSpr = null;
      m_pkGlowFrame = Lith_Player(players[consoleplayer].mo).m_pclass;
      m_pkOffset = fRandom[Lith_Pickup](0, 360);
   }

   void pkTick() {
   }

   void pkSetSpr(string f) {
      [m_pkSpr.sprite, m_pkSpr.frame] = Lith_SpriteLoader.get(f);
   }

   void pkItemGlow() const {
      if(isFrozen()) {
         return;
      }
      let p = players[consolePlayer].camera;
      let d = int(distance2D(p));
      bool needSprite = !bPkup_NoSprite && !m_pkSpr;
      bool needFx     = bPkup_SpawnFx;
      if((needSprite || needFx) && checkSight(p)) {
         if(needSprite) {
            pkSpawnSprite();
         }
         if(needFx) {
            pkSpawnFx();
         }
      }
      if(lith_player_noitemfx || bPkup_NoGlow) {
         return;
      }
      let s = sin(m_pkOffset + level.time/35.0*142.85);
      let z = sin(m_pkOffset + level.time/35.0* 57.14);
      let c = cos(m_pkOffset + level.time/35.0*142.85);
      let n = 1 - s;
      switch(d / 512) {
      case 0:
         pkSpawnGlow(pos+(s*32,    c*32, 24+z*9 ));
         pkSpawnGlow(pos+(c*32, n*32-32, 24+s*32));
         pkSpawnGlow(pos+(n*32-32, c*32, 24+s*32));
      case 1:
         pkSpawnGlow(pos+(   0, s*32, 24+c*32));
         pkSpawnGlow(pos+(s*32, c*32, 24+s*32));
      case 2:
         pkSpawnGlow(pos+(s*32, 0, 24+c*32));
      default:
         pkSpawnGlow(pos+(c*32, s*32, 24+s*32));
      }
   }

   void pkSpawnGlow(vector3 pos) {
      let m = spawn(m_pkGlow, pos);
      m.frame = m_pkGlowFrame;
      m.master = self;
   }

   void pkSpawnFx() {
      /* TODO
      let p = Lith_Player(players[consoleplayer].mo);
      a_startSound("player/" .. p.m_discrim .. "/item-spawn", lch_body, attenuation: 0.5);
      switch(pcl) {
      case pcl_darklord:
         spawn('Lith_DarkLordItemSpawnFx', pos);
         break;
      }
      */
      bPkup_SpawnFx = false;
   }

   void pkSpawnSprite() {
      let pcl = Lith_Player(players[consoleplayer].mo).m_pclass;
      m_pkSpr = spawn('Lith_ItemSprite', pos);
      m_pkSpr.master = self;
      /**/ if(m_pkSprAf && pcl == pcl_assassin)  {pkSetSpr(m_pkSprAf);}
      else if(m_pkSprCf && pcl == pcl_cybermage) {pkSetSpr(m_pkSprCf);}
      else if(m_pkSprDf && pcl == pcl_darklord)  {pkSetSpr(m_pkSprDf);}
      else if(m_pkSprIf && pcl == pcl_informant) {pkSetSpr(m_pkSprIf);}
      else if(m_pkSprMf && pcl == pcl_marine)    {pkSetSpr(m_pkSprMf);}
      else if(m_pkSprTf && pcl == pcl_thoth)     {pkSetSpr(m_pkSprTf);}
      else if(m_pkSprWf && pcl == pcl_wanderer)  {pkSetSpr(m_pkSprWf);}
      else if(m_pkSprGf)                         {pkSetSpr(m_pkSprGf);}
   }

   states(Actor) {
   Spawn:
      TNT1 A 1 pkItemGlow;
      loop;
   }
}

/* EOF */
