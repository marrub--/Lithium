// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_Clip : Lith_AmmoItem replaces Clip {
   default {
      Tag "$LITH_LOG_Clip";
      Inventory.PickupSound "player/pickup/clips";
      Lith_AmmoItem.Give "Lith_BulletAmmo", 10;
   }

   states {
   Spawn:
      CLIP A -1;
      stop;
   }
}

class Lith_ClipBox : Lith_AmmoItem replaces ClipBox {
   default {
      Tag "$LITH_LOG_ClipBox";
      Inventory.PickupSound "player/pickup/clipb";
      Lith_AmmoItem.Give "Lith_BulletAmmo", 50;
   }

   states {
   Spawn:
      AMMO A -1;
      stop;
   }
}

class Lith_Shell : Lith_AmmoItem replaces Shell {
   default {
      Tag "$LITH_LOG_Shell";
      Inventory.PickupSound "player/pickup/shells";
      Lith_AmmoItem.Give "Lith_ShellAmmo", 4;
   }

   states {
   Spawn:
      SHEL A -1;
      stop;
   }
}

class Lith_ShellBox : Lith_AmmoItem replaces ShellBox {
   default {
      Tag "$LITH_LOG_ShellBox";
      Inventory.PickupSound "player/pickup/shellb";
      Lith_AmmoItem.Give "Lith_ShellAmmo", 20;
   }

   states {
   Spawn:
      SBOX A -1;
      stop;
   }
}

class Lith_RocketAmmoPickup : Lith_AmmoItem replaces RocketAmmo {
   default {
      Tag "$LITH_LOG_Rocket";
      Inventory.PickupSound "player/pickup/rockets";
      Lith_AmmoItem.Give "Lith_RocketAmmo", 1;
   }

   states {
   Spawn:
      ROCK A -1;
      stop;
   }
}

class Lith_RocketBox : Lith_AmmoItem replaces RocketBox {
   default {
      Tag "$LITH_LOG_RocketBox";
      Inventory.PickupSound "player/pickup/rocketb";
      Lith_AmmoItem.Give "Lith_RocketAmmo", 5;
   }

   states {
   Spawn:
      BROK A -1;
      stop;
   }
}

class Lith_Cell : Lith_AmmoItem replaces Cell {
   default {
      Tag "$LITH_LOG_Cell";
      Inventory.PickupSound "player/pickup/cells";
      Lith_AmmoItem.Give "Lith_PlasmaAmmo", 500;
   }

   states {
   Spawn:
      CELL A -1;
      stop;
   }
}

class Lith_CellPack : Lith_AmmoItem replaces CellPack {
   default {
      Tag "$LITH_LOG_CellBox";
      Inventory.PickupSound "player/pickup/cellb";
      Lith_AmmoItem.Give  "Lith_PlasmaAmmo", 1500;
      Lith_AmmoItem.Give2 "Lith_CannonAmmo", 4;
   }

   states {
   Spawn:
      CELP A -1;
      stop;
   }
}

class Lith_AmmoItem : Lith_BasicPickup abstract;

default {
   Inventory.Amount 0;
   -Lith_BasicPickup.DrawPopup
   +CastSpriteShadow
   +Inventory.Quiet
}

meta class<Lith_Ammo> m_type, m_type2;
int m_amount, m_amount2;

property Give:  m_type,  m_amount;
property Give2: m_type2, m_amount2;

bool lith_ammoNotFull(Actor mo) {
   let t1 = m_type;
   let t2 = m_type2;
   let a1 = m_amount;
   let a2 = m_amount2;

   if(mo is "Lith_ThothPlayer") {
      if(t1) {t1 = "Lith_ManaAmmo"; a1 *= 7;}
      if(t2) {t2 = "Lith_ManaAmmo"; a2 *= 7;}
   }

   let i1 = mo.findInventory(t1);
   let i2 = mo.findInventory(t2);
   return m_type  && m_amount  && (!i1 || i1.amount < i1.maxAmount) ||
          m_type2 && m_amount2 && (!i2 || i2.amount < i2.maxAmount);
}

override bool canPickup(Actor mo) {
   if(super.canPickup(mo)) {
      return lith_ammoNotFull(mo);
   } else {
      return false;
   }
}

void lith_absorbAmmo(Actor mo, class<Lith_Ammo> ty, in out int amt) {
   if(!ty) return;

   if(mo is "Lith_ThothPlayer") {ty = "Lith_ManaAmmo"; amt *= 7;}

   Lith_Ammo(mo.findInventory(ty)).lith_absorbAmount(getTag(), pos, amt);
   playPickupSound(mo);
}

override bool tryPickup(in out Actor mo) {
   lith_absorbAmmo(mo, m_type,  m_amount);
   lith_absorbAmmo(mo, m_type2, m_amount2);
   return !m_amount && !m_amount2 && super.tryPickup(mo);
}

override void postBeginPlay() {
   super.postBeginPlay();
   if(amount) {
      m_amount = amount;
   }
}

/* EOF */
