// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

/* IDOL: Inventory Dummies are Overly Luxurious */
class Lith_IDOL : Inventory {
   default {
      +Inventory.KeepDepleted
      +Inventory.Untossable
      +Inventory.Undroppable
   }

   Lith_InventoryItem lith_find(uint ip) {
      for(Inventory it = inv; it; it = it.inv) {
         if(it is "Lith_InventoryItem") {
            let item = Lith_InventoryItem(it);
            if(item.m_invItem == ip) {
               return item;
            }
         }
      }
      return null;
   }

   void lith_remove(uint ip) {
      let it = lith_find(ip);
      it.lith_detach();
   }

   bool lith_use(uint ip) {
      let it = lith_find(ip);
      return it.lith_useItem();
   }
}

class Lith_BasicPickup : Inventory {
   default {
      Inventory.PickupMessage "";
      Inventory.PickupSound "";
      Lith_BasicPickup.LogType msg_item;
      +Lith_BasicPickup.DrawPopup
      +Inventory.Transfer
      +CastSpriteShadow
   }

   meta string m_logName;
   meta int    m_logType;
   meta int    m_logLevl;
   int m_flags;
   string m_infoPage;

   property LogName:  m_logName, m_logLevl;
   property LogType:  m_logType;
   property InfoPage: m_infoPage;
   flagdef Vacuum:    m_flags, 0;
   flagdef DrawPopup: m_flags, 1;

   virtual void lith_onPickup(Actor mo) {
      if(m_logName) {
         Lith_HERMES.log(m_logType, m_logLevl, "_" .. m_logName);
      }
      if(m_infoPage) {
         Lith_HERMES.unlockBip(mo, m_infoPage);
      }
   }

   override bool tryPickup(in out Actor mo) {
      lith_onPickup(mo);
      if(bDrawPopup) {
         callAcs("Lith_ItemPopupTag");
      }
      goAwayAndDie();
      return true;
   }
}

class Lith_InventoryItem : Inventory abstract;

default {
   Inventory.PickupMessage "";
   Inventory.PickupSound "";
   Lith_InventoryItem.InvEquip _cont_store;
   Lith_InventoryItem.ItemType _itemt_item;
   +Inventory.Untossable
   +Inventory.Undroppable
   +CastSpriteShadow
}

int    m_itemType;
int    m_invEquip;
string m_invName;
int    m_invSell;
int    m_invItem;
int    m_invType;
int    m_invW, m_invH;
string m_infoPage;
int    m_w, m_h;
Actor  m_pl;

property ItemType: m_itemType;
property InvType:  m_invType;
property InvSize:  m_invW, m_invH;
property InvEquip: m_invEquip;
property InvName:  m_invName;
property InvSell:  m_invSell;
property Size:     m_w, m_h;
property InfoPage: m_infoPage;

virtual void lith_onAttach(Actor mo) {
   m_pl = mo;
   if(m_infoPage) {
      Lith_HERMES.unlockBip(mo, m_infoPage);
   }
}

virtual bool lith_useItem() {
   return false;
}

bool lith_onBody() const {
   return callAcs("Lith_ItemOnBody", m_invItem);
}

void lith_detach() {
   if(!self) {
      return;
   }
   m_invItem = 0;
   destroy();
}

void lith_destroy() {
   if(m_invItem) {
      uint ip = m_invItem;
      m_invItem = 0;
      callAcs("Lith_ItemDetach", ip);
   }
}

void lith_createItem() {
   m_invItem = callAcs("Lith_ItemCreate");
}

string lith_getName() {
   return Lith_HERMES.localize("LITH_ITEM_TAG_" .. m_invName);
}

override Inventory createCopy(Actor mo) {
   let copy = Lith_InventoryItem(super.createCopy(mo));
   if(copy != self) {
      copy.setTag(lith_getName());
      copy.m_invName  = m_invName;
      copy.m_invSell  = m_invSell;
      copy.m_w        = m_w;
      copy.m_h        = m_h;
      copy.m_infoPage = m_infoPage;
      copy.lith_createItem();
   }
   return copy;
}

override bool handlePickup(Inventory item) {
   return false;
}

override void beginPlay() {
   super.beginPlay();
   setTag(lith_getName());
   lith_createItem();
}

override void attachToOwner(Actor mo) {
   let id = Lith_IDOL(mo.findInventory("Lith_IDOL"));
   if(callAcs("Lith_ItemAttach", m_invItem)) {
      lith_onAttach(mo);
      super.attachToOwner(id);
   }
}

override bool canPickup(Actor mo) {
   if(super.canPickup(mo)) {
      let id = Lith_IDOL(mo.findInventory("Lith_IDOL"));
      return m_invItem && id && callAcs("Lith_ItemCanPlace", m_invItem);
   } else {
      return false;
   }
}

override bool tryPickup(in out Actor mo) {
   if(super.tryPickup(mo)) {
      Lith_HERMES.log(msg_item, 3, lith_getName());
      return true;
   } else {
      return false;
   }
}

/* EOF */
