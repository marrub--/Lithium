// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_ArmorResistant : Lith_ArmorBase {
   protected int m_Resist;

   property Resist: m_Resist;

   override Inventory createCopy(Actor mo) {
      let copy = Lith_ArmorResistant(super.createCopy(mo));
      copy.m_Resist = m_Resist;
      return copy;
   }

   override int Lith_SaveAmt(name type) {
      let dt = Lith_HERMES.nameToDT(type);
      return m_Resist == dt ? m_curSave * 2 : m_curSave;
   }
}

class Lith_GreenArmor : Lith_RandomSpawn replaces GreenArmor {
   default {
      Lith_RandomSpawn.SpawnNum lrsn_garmor;
   }
}

class Lith_BlueArmor : Lith_RandomSpawn replaces BlueArmor {
   default {
      Lith_RandomSpawn.SpawnNum lrsn_barmor;
   }
}

class Lith_ArmorBase : Lith_InventoryItem abstract;

default {
   Lith_InventoryItem.InvEquip _cont_body;
   +INVENTORY.ISARMOR
}

int    m_save0, m_save1;
double m_speed;

protected int m_curSave;

property Save:  m_save0, m_save1;
property Speed: m_speed;

virtual int Lith_SaveAmt(name type) {return m_curSave;}

override Inventory createCopy(Actor mo) {
   let copy = Lith_ArmorBase(super.createCopy(mo));

   copy.m_save0   = m_save0;
   copy.m_save1   = m_save1;
   copy.m_speed   = m_speed;
   copy.m_curSave = m_curSave;

   return copy;
}

override void beginPlay() {
   super.beginPlay();
   m_curSave = m_save0;
}

override void AbsorbDamage(int damage, name type, out int newdamage) {
   if(Lith_OnBody() && !DamageTypeDefinition.IgnoreArmor(type)) {
      int save = Lith_SaveAmt(type);

      if(damage - save < 1) newdamage = 1;
      else                  newdamage = damage - save;
   }
}

override double getSpeedFactor() {
   if(m_speed && Lith_OnBody()) {
      return m_speed;
   } else {
      return 1.0;
   }
}

/* EOF */
