// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_Steggles : MBFHelperDog {
   default {
      Health 10000000;
      PainChance 0;
      Tag "$LITH_TAG_Steggles";

      +THRUACTORS
      +FRIENDLY
   }

   states {
   Energize:
      DOGS A 0 {
         target.GiveInventory("HealthBonus", 1);
         callAcs("Lith_ItemPopupTag");
         Lith_HERMES.Log(msg_item, 1, "_Dogs");
      }
      stop;
   PureSteggleEnergy:
      DOGS A 0 {
         target = players[consolePlayer].mo;
         bNOCLIP = true;
         bNOGRAVITY = true;
         A_ChangeLinkFlags(1);
      }
      DOGS A 0 A_SetTranslucent(0.8, 1);
      DOGS A 1 {
         setOrigin(Lith_UTIL.vec3Lerp(pos, target.pos, 0.01), true);
         a_faceTarget();
         return A_JumpIfCloser(radius, "Energize");
      }
      wait;
   }
}

class Lith_SteggleSphereSprite : Lith_ItemSprite {
   states {
   Spawn:
      DOGO ABCB 6;
      loop;
   }
}

class Lith_SteggleSphere : Inventory;

default {
   Tag "$LITH_TAG_SteggleSphere";
   Inventory.PickupMessage "";
   Inventory.PickupSound "misc/p_pkup";
   +CountItem
   +Inventory.BigPowerup
   +Inventory.FancyPickupSound
}
override void postBeginPlay() {
   super.postBeginPlay();
   spawn("Lith_SteggleSphereSprite", self.pos).master = self;
}
override bool tryPickup(in out Actor mo) {
   mo.ACS_ScriptCall("Lith_DOGS");
   callAcs("Lith_ItemPopupTag");
   Lith_HERMES.Log(msg_item, 5, "_DoggoSphere");
   goAwayAndDie();
   return true;
}
states {
Spawn:
   TNT1 A 1;
   wait;
}

/* EOF */
