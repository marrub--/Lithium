// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Marrub / Alison.  Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_BarrierFX : Actor {
   default {
      RenderStyle "Add";
      Scale 0.3;

      +NOTIMEFREEZE
      +NOINTERACTION
   }
   states {
   Spawn:
      TNT1 A 0;
      #EBA A 10 A_StartSound("player/barrier", lch_body, CHANF_NOPAUSE|CHANF_LISTENERZ);
      #EBA A 1 {Scale *= 0.86; Alpha -= 0.25; if(Alpha <= 0) Destroy();}
      wait;
   }
}

class Lith_HasBarrier : Powerup {
   default {
      Powerup.Duration 0x7FFFFFFD;
      Powerup.Color "C3 DF E8", 0.1;
      +Inventory.HubPower
   }

   override void Tick() {
      if(!isFrozen()) {
         Actor th;
         for(let it = ThinkerIterator.Create("Actor"); (th = Actor(it.Next()));)
            if(th.bMISSILE && th.Target && th.Target.bCOUNTKILL && !th.IsZeroDamage() &&
               th.GetMissileDamage(th.bStrifeDamage ? 3 : 7, 1) < 80 && Random(0, 256) < 80 &&
               th.distance3D(Owner) <= 64)
         {
            Spawn("Lith_BarrierFX", th.Pos);
            th.Destroy();
         }
         Super.Tick();
      }
   }
}

class Lith_BarrierStat : Lith_StatFx {
   override void initCb() {
      basic("BAR", 2100);
      plyr.giveInventory("Lith_HasBarrier", 1);
   }
   override void doneCb() {
      plyr.takeInventory("Lith_HasBarrier", 1);
   }
}

class Lith_BlurSphere : Inventory;

default {
   Tag "$LITH_TAG_BlurSphere";
   Inventory.PickupMessage "";
   Inventory.PickupSound "player/pickup/barrier";

   +CountItem
   +Inventory.BigPowerup
   +Inventory.FancyPickupSound
   +Inventory.AlwaysPickup
}

override bool tryPickup(in out Actor mo) {
   Lith_HERMES.Log(msg_item, 5, "_BlurSphere");
   Lith_HERMES.UnlockBip(mo, "Fragma");
   Lith_StatFx.addToPool("Lith_BarrierStat");
   callAcs("Lith_ItemPopupTag");
   goAwayAndDie();
   return true;
}

states {
Spawn:
   TNT1 A 0;
   TNT1 A 0 A_SpawnItemEx("Lith_BlurSphereSprite", flags: SXF_SETMASTER);
   TNT1 A 1;
   wait;
}

/* EOF */
